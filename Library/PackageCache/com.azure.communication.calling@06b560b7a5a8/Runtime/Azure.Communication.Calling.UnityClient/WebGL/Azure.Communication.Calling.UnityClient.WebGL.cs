#if UNITY_WEBGL && !UNITY_EDITOR
//
// Copyright (c) Microsoft Corporation. All rights reserved.
// ACSCallingShared
// This file was auto-generated from ACSCallingModelBETA.cs.
//

// <auto-generated />

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

namespace Azure.Communication.Calling.UnityClient
{
    internal enum Status
    {
        /// <summary>
        /// Success
        /// </summary>
        OK = 0,
        /// <summary>
        /// Failed
        /// </summary>
        Failed = 1,
        /// <summary>
        /// Cannot access a disposed object.
        /// </summary>
        ObjectDisposed = 2,
        /// <summary>
        /// Out of memory.
        /// </summary>
        OutOfMemory = 12,
        /// <summary>
        /// Invalid argument.
        /// </summary>
        InvalidArgument = 22,
        /// <summary>
        /// The operation attempted to mutate a value already mutably accessed by another operation. The operation was aborted, as this would have caused a race condition.
        /// </summary>
        ConcurrentMutation = 24,
        /// <summary>
        /// The value is out of range.
        /// </summary>
        OutOfRange = 34,
        /// <summary>
        /// Not implemented.
        /// </summary>
        NotImplemented = 38,
        /// <summary>
        /// The operation was canceled.
        /// </summary>
        OperationCanceled = 59,
        /// <summary>
        /// The key does not exist in the collection.
        /// </summary>
        KeyNotFound = 77,
        /// <summary>
        /// No errors
        /// </summary>
        None = 78,
        /// <summary>
        /// No Audio permissions available.
        /// </summary>
        NoAudioPermission = 79,
        /// <summary>
        /// No Video permissions available.
        /// </summary>
        NoVideoPermission = 80,
        /// <summary>
        /// No Video and Audio permissions available.
        /// </summary>
        NoAudioAndVideoPermission = 81,
        /// <summary>
        /// Failed to process push notification payload.
        /// </summary>
        ReceivedInvalidPushNotificationPayload = 82,
        /// <summary>
        /// Received empty/invalid notification payload.
        /// </summary>
        FailedToProcessPushNotificationPayload = 83,
        /// <summary>
        /// Received invalid group Id.
        /// </summary>
        InvalidGuidGroupId = 84,
        /// <summary>
        /// Push notification device registration token is invalid.
        /// </summary>
        InvalidPushNotificationDeviceRegistrationToken = 85,
        /// <summary>
        /// Cannot create multiple renders for same device or stream.
        /// </summary>
        MultipleRenderersNotSupported = 86,
        /// <summary>
        /// Renderer doesn't support creating multiple views.
        /// </summary>
        MultipleViewsNotSupported = 87,
        /// <summary>
        /// The local video stream on the video options is invalid.
        /// </summary>
        InvalidLocalVideoStreamForVideoOptions = 88,
        /// <summary>
        /// No multiple connections with same identity per app is allowed.
        /// </summary>
        NoMultipleConnectionsWithSameIdentity = 89,
        /// <summary>
        /// Invalid server call Id because it's empty or has invalid values.
        /// </summary>
        InvalidServerCallId = 90,
        /// <summary>
        /// Failure while switch source on a local video stream.
        /// </summary>
        LocalVideoStreamSwitchSourceFailure = 91,
        /// <summary>
        /// Attempt to answer an incoming call that has been unplaced.
        /// </summary>
        IncomingCallAlreadyUnplaced = 92,
        /// <summary>
        /// Invalid meeting link provided.
        /// </summary>
        InvalidMeetingLink = 93,
        /// <summary>
        /// Attempt to add participant to a unconnected call.
        /// </summary>
        ParticipantAddedToUnconnectedCall = 94,
        /// <summary>
        /// Participant already added to the call.
        /// </summary>
        ParticipantAlreadyAddedToCall = 95,
        /// <summary>
        /// Call feature extension not found.
        /// </summary>
        CallFeatureExtensionNotFound = 96,
        /// <summary>
        /// User display name is longer than the supported length.
        /// </summary>
        DisplayNameLengthLongerThanSupported = 97,
        /// <summary>
        /// Cannot hangup for everyone in a non-hostless call
        /// </summary>
        FailedToHangupForEveryone = 98,
        /// <summary>
        /// Attempted to added a participant with an invalid type to the call
        /// </summary>
        InvalidParticipantAddedToCall = 99,
        /// <summary>
        /// Feature extension not found.
        /// </summary>
        FeatureExtensionNotFound = 100,
        /// <summary>
        /// Video effect not supported by device
        /// </summary>
        VideoEffectNotSupported = 101,
        /// <summary>
        /// Sending Raw Audio Buffer Failed
        /// </summary>
        FailedToSendRawAudioBuffer = 102,
        /// <summary>
        /// Cannot mute virtual audio stream
        /// </summary>
        CannotMuteVirtualAudioStream = 103,
        /// <summary>
        /// Virtual tried to register an already registered device id.
        /// </summary>
        DuplicateDeviceId = 104,
        /// <summary>
        /// App is expected to register a delegation to complete the operation.
        /// </summary>
        DelegateIsRequired = 105,
        /// <summary>
        /// Virtual device is not started.
        /// </summary>
        VirtualDeviceNotStarted = 106,
        /// <summary>
        /// Invalid video stream combination provided.
        /// </summary>
        InvalidVideoStreamCombination = 107,
        /// <summary>
        /// No multiple connections with different cloud type per app is allowed.
        /// </summary>
        NoMultipleConnectionsWithDifferentClouds = 108,
        /// <summary>
        /// No active audio stream to stop.
        /// </summary>
        NoActiveAudioStreamToStop = 109,
        /// <summary>
        /// Invalid video format set
        /// </summary>
        InvalidVideoFormat = 110,
        /// <summary>
        /// The buffer does not match the video format set or does contain valid data
        /// </summary>
        InvalidBuffer = 111,
        /// <summary>
        /// There was a problem while sending the video frame
        /// </summary>
        RawVideoFrameNotSent = 112,
        /// <summary>
        /// The selected video resolution is not valid for the virtual video
        /// </summary>
        UnsupportedVideoStreamResolution = 113,
        /// <summary>
        /// Start captions failed
        /// </summary>
        CaptionsFailedToStart = 114,
        /// <summary>
        /// Start captions failed, captions is disabled by configurations
        /// </summary>
        CaptionsDisabledByConfigurations = 115,
        /// <summary>
        /// Start captions failed, captions policy is disabled
        /// </summary>
        CaptionsPolicyDisabled = 116,
        /// <summary>
        /// Captions are not active
        /// </summary>
        CaptionsNotActive = 117,
        /// <summary>
        /// The requested language is not supported
        /// </summary>
        CaptionsRequestedLanguageNotSupported = 118,
        /// <summary>
        /// Set caption language failed
        /// </summary>
        FailedToSetCaptionLanguage = 119,
        /// <summary>
        /// Set caption language is disabled
        /// </summary>
        SetCaptionLanguageDisabled = 120,
        /// <summary>
        /// Set caption language failed, teams premium license needed
        /// </summary>
        SetCaptionLanguageTeamsPremiumLicenseNeeded = 121,
        /// <summary>
        /// Failed to set spoken language
        /// </summary>
        CaptionsFailedToSetSpokenLanguage = 122,
        /// <summary>
        /// Set spoken language is disabled
        /// </summary>
        CaptionsSetSpokenLanguageDisabled = 123,
        /// <summary>
        /// Get captions failed, call should be connected
        /// </summary>
        GetCaptionsFailedCallStateNotConnected = 124,
        /// <summary>
        /// Get captions failed
        /// </summary>
        GetCaptionsFailed = 125,
        /// <summary>
        /// Spotlight failed, spotlight feature is disabled by configurations
        /// </summary>
        SpotlightDisabledByConfigurations = 126,
        /// <summary>
        /// Max supported spotlight reached
        /// </summary>
        MaxSpotlightReached = 127,
        /// <summary>
        /// Spotlight Input List empty
        /// </summary>
        SpotlightParticipantEmptyList = 128,
        /// <summary>
        /// Signaling Service Status Code
        /// </summary>
        SignalingOperationFailed = 129,
        /// <summary>
        /// Teams Interop is disabled while using proxy
        /// </summary>
        ProxyNotAvailableForTeams = 130,
        /// <summary>
        /// Forbidden to mute others
        /// </summary>
        MuteOthersForbidden = 131,
        /// <summary>
        /// Internal server error occurred when muting others
        /// </summary>
        MuteOthersInternalServerError = 132,
        /// <summary>
        /// Not found exception occurred when muting others
        /// </summary>
        MuteOthersNotFound = 133,
        /// <summary>
        /// Lobby is disabled by configurations
        /// </summary>
        LobbyDisabledByConfigurations = 134,
        /// <summary>
        /// Current conversation type does not support Lobby
        /// </summary>
        LobbyConversationTypeNotSupported = 135,
        /// <summary>
        /// Current meeting role does not have permission to admit/reject user from Lobby
        /// </summary>
        LobbyMeetingRoleNotAllowed = 136,
        /// <summary>
        /// Participant is not exist in the Lobby
        /// </summary>
        LobbyParticipantNotExist = 137,
        /// <summary>
        /// Remove participant operation failure
        /// </summary>
        RemoveParticipantOperationFailure = 138,
        /// <summary>
        /// Music mode not enabled
        /// </summary>
        MusicModeNotEnabled = 139,
        /// <summary>
        /// Survey Rating Scale Invalid Bounds
        /// </summary>
        SurveyRatingScaleOutOfBounds = 140,
        /// <summary>
        /// Survey Rating Scale Invalid Threshold
        /// </summary>
        SurveyRatingScaleInvalidThreshold = 141,
        /// <summary>
        /// Survey Score Out of Bounds
        /// </summary>
        SurveyScoreOutOfBounds = 142,
        /// <summary>
        /// Survey Double Submission Not Allowed
        /// </summary>
        SurveyDoubleSubmissionNotAllowed = 143,
        /// <summary>
        /// Admit/AdmitAll operation failure
        /// </summary>
        LobbyAdmitOperationFailure = 144,
        /// <summary>
        /// Set media proxy failed
        /// </summary>
        FailedToSetMediaProxy = 145,
        /// <summary>
        /// Invalid token provider given.
        /// </summary>
        InvalidTokenProvider = 146,
        /// <summary>
        /// Invalid report interval for Media Statistics Call Feature.
        /// </summary>
        MediaStatisticsInvalidReportInterval = 147,
        /// <summary>
        /// Start Data Channel Call Feature failed
        /// </summary>
        DataChannelFailedToStart = 148,
        /// <summary>
        /// Data Channel sender already closed
        /// </summary>
        DataChannelSenderClosed = 149,
        /// <summary>
        /// Random data channel id not available
        /// </summary>
        DataChannelRandomIdNotAvailable = 150,
        /// <summary>
        /// Data Channel message size over the limit
        /// </summary>
        DataChannelMessageSizeOverLimit = 151,
        /// <summary>
        /// Data Channel message failed to send due to bandwidth
        /// </summary>
        DataChannelMessageFailureForBandwidth = 152,
        /// <summary>
        /// Start Data Channel message failed to send due to traffic limit
        /// </summary>
        DataChannelMessageFailureForTrafficLimit = 153,
    }

    internal static class NativeLibraryHelpers
    {
        internal static string[] IntPtrToStringArray(IntPtr result, int result_length)
        {
            // an empty list is returned as a single null character
            if (result_length == 1)
            {
                return Array.Empty<string>();
            }

            byte[] bytes = new byte[result_length - 1];
            System.Runtime.InteropServices.Marshal.Copy(result, bytes, 0, result_length - 1);
            System.Runtime.InteropServices.Marshal.FreeCoTaskMem(result);
            return System.Text.Encoding.UTF8.GetString(bytes).Split('\0');
        }

        internal static Azure.Communication.Calling.UnityClient.Status StatusFromErrorCode(CallingCommunicationErrors errorCode)
        {
            switch (errorCode)
            {
                case CallingCommunicationErrors.None: return Azure.Communication.Calling.UnityClient.Status.None;
                case CallingCommunicationErrors.NoAudioPermission: return Azure.Communication.Calling.UnityClient.Status.NoAudioPermission;
                case CallingCommunicationErrors.NoVideoPermission: return Azure.Communication.Calling.UnityClient.Status.NoVideoPermission;
                case CallingCommunicationErrors.NoAudioAndVideoPermission: return Azure.Communication.Calling.UnityClient.Status.NoAudioAndVideoPermission;
                case CallingCommunicationErrors.ReceivedInvalidPushNotificationPayload: return Azure.Communication.Calling.UnityClient.Status.ReceivedInvalidPushNotificationPayload;
                case CallingCommunicationErrors.FailedToProcessPushNotificationPayload: return Azure.Communication.Calling.UnityClient.Status.FailedToProcessPushNotificationPayload;
                case CallingCommunicationErrors.InvalidGuidGroupId: return Azure.Communication.Calling.UnityClient.Status.InvalidGuidGroupId;
                case CallingCommunicationErrors.InvalidPushNotificationDeviceRegistrationToken: return Azure.Communication.Calling.UnityClient.Status.InvalidPushNotificationDeviceRegistrationToken;
                case CallingCommunicationErrors.MultipleRenderersNotSupported: return Azure.Communication.Calling.UnityClient.Status.MultipleRenderersNotSupported;
                case CallingCommunicationErrors.MultipleViewsNotSupported: return Azure.Communication.Calling.UnityClient.Status.MultipleViewsNotSupported;
                case CallingCommunicationErrors.InvalidLocalVideoStreamForVideoOptions: return Azure.Communication.Calling.UnityClient.Status.InvalidLocalVideoStreamForVideoOptions;
                case CallingCommunicationErrors.NoMultipleConnectionsWithSameIdentity: return Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithSameIdentity;
                case CallingCommunicationErrors.InvalidServerCallId: return Azure.Communication.Calling.UnityClient.Status.InvalidServerCallId;
                case CallingCommunicationErrors.LocalVideoStreamSwitchSourceFailure: return Azure.Communication.Calling.UnityClient.Status.LocalVideoStreamSwitchSourceFailure;
                case CallingCommunicationErrors.IncomingCallAlreadyUnplaced: return Azure.Communication.Calling.UnityClient.Status.IncomingCallAlreadyUnplaced;
                case CallingCommunicationErrors.InvalidMeetingLink: return Azure.Communication.Calling.UnityClient.Status.InvalidMeetingLink;
                case CallingCommunicationErrors.ParticipantAddedToUnconnectedCall: return Azure.Communication.Calling.UnityClient.Status.ParticipantAddedToUnconnectedCall;
                case CallingCommunicationErrors.ParticipantAlreadyAddedToCall: return Azure.Communication.Calling.UnityClient.Status.ParticipantAlreadyAddedToCall;
                case CallingCommunicationErrors.CallFeatureExtensionNotFound: return Azure.Communication.Calling.UnityClient.Status.CallFeatureExtensionNotFound;
                case CallingCommunicationErrors.DisplayNameLengthLongerThanSupported: return Azure.Communication.Calling.UnityClient.Status.DisplayNameLengthLongerThanSupported;
                case CallingCommunicationErrors.FailedToHangupForEveryone: return Azure.Communication.Calling.UnityClient.Status.FailedToHangupForEveryone;
                case CallingCommunicationErrors.InvalidParticipantAddedToCall: return Azure.Communication.Calling.UnityClient.Status.InvalidParticipantAddedToCall;
                case CallingCommunicationErrors.FeatureExtensionNotFound: return Azure.Communication.Calling.UnityClient.Status.FeatureExtensionNotFound;
                case CallingCommunicationErrors.VideoEffectNotSupported: return Azure.Communication.Calling.UnityClient.Status.VideoEffectNotSupported;
                case CallingCommunicationErrors.FailedToSendRawAudioBuffer: return Azure.Communication.Calling.UnityClient.Status.FailedToSendRawAudioBuffer;
                case CallingCommunicationErrors.CannotMuteVirtualAudioStream: return Azure.Communication.Calling.UnityClient.Status.CannotMuteVirtualAudioStream;
                case CallingCommunicationErrors.DuplicateDeviceId: return Azure.Communication.Calling.UnityClient.Status.DuplicateDeviceId;
                case CallingCommunicationErrors.DelegateIsRequired: return Azure.Communication.Calling.UnityClient.Status.DelegateIsRequired;
                case CallingCommunicationErrors.VirtualDeviceNotStarted: return Azure.Communication.Calling.UnityClient.Status.VirtualDeviceNotStarted;
                case CallingCommunicationErrors.InvalidVideoStreamCombination: return Azure.Communication.Calling.UnityClient.Status.InvalidVideoStreamCombination;
                case CallingCommunicationErrors.NoMultipleConnectionsWithDifferentClouds: return Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithDifferentClouds;
                case CallingCommunicationErrors.NoActiveAudioStreamToStop: return Azure.Communication.Calling.UnityClient.Status.NoActiveAudioStreamToStop;
                case CallingCommunicationErrors.InvalidVideoFormat: return Azure.Communication.Calling.UnityClient.Status.InvalidVideoFormat;
                case CallingCommunicationErrors.InvalidBuffer: return Azure.Communication.Calling.UnityClient.Status.InvalidBuffer;
                case CallingCommunicationErrors.RawVideoFrameNotSent: return Azure.Communication.Calling.UnityClient.Status.RawVideoFrameNotSent;
                case CallingCommunicationErrors.UnsupportedVideoStreamResolution: return Azure.Communication.Calling.UnityClient.Status.UnsupportedVideoStreamResolution;
                case CallingCommunicationErrors.CaptionsFailedToStart: return Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToStart;
                case CallingCommunicationErrors.CaptionsDisabledByConfigurations: return Azure.Communication.Calling.UnityClient.Status.CaptionsDisabledByConfigurations;
                case CallingCommunicationErrors.CaptionsPolicyDisabled: return Azure.Communication.Calling.UnityClient.Status.CaptionsPolicyDisabled;
                case CallingCommunicationErrors.CaptionsNotActive: return Azure.Communication.Calling.UnityClient.Status.CaptionsNotActive;
                case CallingCommunicationErrors.CaptionsRequestedLanguageNotSupported: return Azure.Communication.Calling.UnityClient.Status.CaptionsRequestedLanguageNotSupported;
                case CallingCommunicationErrors.FailedToSetCaptionLanguage: return Azure.Communication.Calling.UnityClient.Status.FailedToSetCaptionLanguage;
                case CallingCommunicationErrors.SetCaptionLanguageDisabled: return Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageDisabled;
                case CallingCommunicationErrors.SetCaptionLanguageTeamsPremiumLicenseNeeded: return Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageTeamsPremiumLicenseNeeded;
                case CallingCommunicationErrors.CaptionsFailedToSetSpokenLanguage: return Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToSetSpokenLanguage;
                case CallingCommunicationErrors.CaptionsSetSpokenLanguageDisabled: return Azure.Communication.Calling.UnityClient.Status.CaptionsSetSpokenLanguageDisabled;
                case CallingCommunicationErrors.GetCaptionsFailedCallStateNotConnected: return Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailedCallStateNotConnected;
                case CallingCommunicationErrors.GetCaptionsFailed: return Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailed;
                case CallingCommunicationErrors.SpotlightDisabledByConfigurations: return Azure.Communication.Calling.UnityClient.Status.SpotlightDisabledByConfigurations;
                case CallingCommunicationErrors.MaxSpotlightReached: return Azure.Communication.Calling.UnityClient.Status.MaxSpotlightReached;
                case CallingCommunicationErrors.SpotlightParticipantEmptyList: return Azure.Communication.Calling.UnityClient.Status.SpotlightParticipantEmptyList;
                case CallingCommunicationErrors.SignalingOperationFailed: return Azure.Communication.Calling.UnityClient.Status.SignalingOperationFailed;
                case CallingCommunicationErrors.ProxyNotAvailableForTeams: return Azure.Communication.Calling.UnityClient.Status.ProxyNotAvailableForTeams;
                case CallingCommunicationErrors.MuteOthersForbidden: return Azure.Communication.Calling.UnityClient.Status.MuteOthersForbidden;
                case CallingCommunicationErrors.MuteOthersInternalServerError: return Azure.Communication.Calling.UnityClient.Status.MuteOthersInternalServerError;
                case CallingCommunicationErrors.MuteOthersNotFound: return Azure.Communication.Calling.UnityClient.Status.MuteOthersNotFound;
                case CallingCommunicationErrors.LobbyDisabledByConfigurations: return Azure.Communication.Calling.UnityClient.Status.LobbyDisabledByConfigurations;
                case CallingCommunicationErrors.LobbyConversationTypeNotSupported: return Azure.Communication.Calling.UnityClient.Status.LobbyConversationTypeNotSupported;
                case CallingCommunicationErrors.LobbyMeetingRoleNotAllowed: return Azure.Communication.Calling.UnityClient.Status.LobbyMeetingRoleNotAllowed;
                case CallingCommunicationErrors.LobbyParticipantNotExist: return Azure.Communication.Calling.UnityClient.Status.LobbyParticipantNotExist;
                case CallingCommunicationErrors.RemoveParticipantOperationFailure: return Azure.Communication.Calling.UnityClient.Status.RemoveParticipantOperationFailure;
                case CallingCommunicationErrors.MusicModeNotEnabled: return Azure.Communication.Calling.UnityClient.Status.MusicModeNotEnabled;
                case CallingCommunicationErrors.SurveyRatingScaleOutOfBounds: return Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleOutOfBounds;
                case CallingCommunicationErrors.SurveyRatingScaleInvalidThreshold: return Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleInvalidThreshold;
                case CallingCommunicationErrors.SurveyScoreOutOfBounds: return Azure.Communication.Calling.UnityClient.Status.SurveyScoreOutOfBounds;
                case CallingCommunicationErrors.SurveyDoubleSubmissionNotAllowed: return Azure.Communication.Calling.UnityClient.Status.SurveyDoubleSubmissionNotAllowed;
                case CallingCommunicationErrors.LobbyAdmitOperationFailure: return Azure.Communication.Calling.UnityClient.Status.LobbyAdmitOperationFailure;
                case CallingCommunicationErrors.FailedToSetMediaProxy: return Azure.Communication.Calling.UnityClient.Status.FailedToSetMediaProxy;
                case CallingCommunicationErrors.InvalidTokenProvider: return Azure.Communication.Calling.UnityClient.Status.InvalidTokenProvider;
                case CallingCommunicationErrors.MediaStatisticsInvalidReportInterval: return Azure.Communication.Calling.UnityClient.Status.MediaStatisticsInvalidReportInterval;
                case CallingCommunicationErrors.DataChannelFailedToStart: return Azure.Communication.Calling.UnityClient.Status.DataChannelFailedToStart;
                case CallingCommunicationErrors.DataChannelSenderClosed: return Azure.Communication.Calling.UnityClient.Status.DataChannelSenderClosed;
                case CallingCommunicationErrors.DataChannelRandomIdNotAvailable: return Azure.Communication.Calling.UnityClient.Status.DataChannelRandomIdNotAvailable;
                case CallingCommunicationErrors.DataChannelMessageSizeOverLimit: return Azure.Communication.Calling.UnityClient.Status.DataChannelMessageSizeOverLimit;
                case CallingCommunicationErrors.DataChannelMessageFailureForBandwidth: return Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForBandwidth;
                case CallingCommunicationErrors.DataChannelMessageFailureForTrafficLimit: return Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForTrafficLimit;
                default: throw new NotImplementedException("Unknown error code " + errorCode);
            }
        }

        internal static Azure.Communication.Calling.UnityClient.Status StatusFromException(Exception e)
        {
            if (e == null)
            {
                return Azure.Communication.Calling.UnityClient.Status.OK;
            }
            if (e is ObjectDisposedException)
            {
                return Azure.Communication.Calling.UnityClient.Status.ObjectDisposed;
            }
            if (e is OutOfMemoryException)
            {
                return Azure.Communication.Calling.UnityClient.Status.OutOfMemory;
            }
            if (e is NotImplementedException)
            {
                return Azure.Communication.Calling.UnityClient.Status.NotImplemented;
            }
            if (e is ArgumentOutOfRangeException)
            {
                return Azure.Communication.Calling.UnityClient.Status.OutOfRange;
            }
            if (e is KeyNotFoundException)
            {
                return Azure.Communication.Calling.UnityClient.Status.KeyNotFound;
            }
            if (e is OperationCanceledException)
            {
                return Azure.Communication.Calling.UnityClient.Status.OperationCanceled;
            }
            if (e is ArgumentException)
            {
                return Azure.Communication.Calling.UnityClient.Status.InvalidArgument;
            }
            if (e is CallingCommunicationException le0)
            {
                return StatusFromErrorCode(le0.ErrorCode);
            }
            return Azure.Communication.Calling.UnityClient.Status.Failed;
        }

        internal static Exception ExceptionFromStatus(Azure.Communication.Calling.UnityClient.Status value, string fullMessage)
        {
            switch (value)
            {
                case Azure.Communication.Calling.UnityClient.Status.OK:
                    return null;
                case Azure.Communication.Calling.UnityClient.Status.Failed:
                    return new InvalidOperationException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ObjectDisposed:
                    return new ObjectDisposedException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OutOfMemory:
                    return new OutOfMemoryException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidArgument:
                    return new ArgumentException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ConcurrentMutation:
                    return new InvalidOperationException("ConcurrentMutation: " + fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OutOfRange:
                    return new ArgumentOutOfRangeException(string.Empty, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NotImplemented:
                    return new NotImplementedException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OperationCanceled:
                    return new OperationCanceledException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.KeyNotFound:
                    return new KeyNotFoundException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.None:
                    return new CallingCommunicationException(CallingCommunicationErrors.None, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoAudioPermission:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoAudioPermission, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoVideoPermission:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoVideoPermission, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoAudioAndVideoPermission:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoAudioAndVideoPermission, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ReceivedInvalidPushNotificationPayload:
                    return new CallingCommunicationException(CallingCommunicationErrors.ReceivedInvalidPushNotificationPayload, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FailedToProcessPushNotificationPayload:
                    return new CallingCommunicationException(CallingCommunicationErrors.FailedToProcessPushNotificationPayload, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidGuidGroupId:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidGuidGroupId, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidPushNotificationDeviceRegistrationToken:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidPushNotificationDeviceRegistrationToken, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MultipleRenderersNotSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.MultipleRenderersNotSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MultipleViewsNotSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.MultipleViewsNotSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidLocalVideoStreamForVideoOptions:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidLocalVideoStreamForVideoOptions, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithSameIdentity:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoMultipleConnectionsWithSameIdentity, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidServerCallId:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidServerCallId, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LocalVideoStreamSwitchSourceFailure:
                    return new CallingCommunicationException(CallingCommunicationErrors.LocalVideoStreamSwitchSourceFailure, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.IncomingCallAlreadyUnplaced:
                    return new CallingCommunicationException(CallingCommunicationErrors.IncomingCallAlreadyUnplaced, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidMeetingLink:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidMeetingLink, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ParticipantAddedToUnconnectedCall:
                    return new CallingCommunicationException(CallingCommunicationErrors.ParticipantAddedToUnconnectedCall, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ParticipantAlreadyAddedToCall:
                    return new CallingCommunicationException(CallingCommunicationErrors.ParticipantAlreadyAddedToCall, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CallFeatureExtensionNotFound:
                    return new CallingCommunicationException(CallingCommunicationErrors.CallFeatureExtensionNotFound, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DisplayNameLengthLongerThanSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.DisplayNameLengthLongerThanSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FailedToHangupForEveryone:
                    return new CallingCommunicationException(CallingCommunicationErrors.FailedToHangupForEveryone, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidParticipantAddedToCall:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidParticipantAddedToCall, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FeatureExtensionNotFound:
                    return new CallingCommunicationException(CallingCommunicationErrors.FeatureExtensionNotFound, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.VideoEffectNotSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.VideoEffectNotSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSendRawAudioBuffer:
                    return new CallingCommunicationException(CallingCommunicationErrors.FailedToSendRawAudioBuffer, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CannotMuteVirtualAudioStream:
                    return new CallingCommunicationException(CallingCommunicationErrors.CannotMuteVirtualAudioStream, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DuplicateDeviceId:
                    return new CallingCommunicationException(CallingCommunicationErrors.DuplicateDeviceId, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DelegateIsRequired:
                    return new CallingCommunicationException(CallingCommunicationErrors.DelegateIsRequired, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.VirtualDeviceNotStarted:
                    return new CallingCommunicationException(CallingCommunicationErrors.VirtualDeviceNotStarted, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidVideoStreamCombination:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidVideoStreamCombination, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithDifferentClouds:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoMultipleConnectionsWithDifferentClouds, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NoActiveAudioStreamToStop:
                    return new CallingCommunicationException(CallingCommunicationErrors.NoActiveAudioStreamToStop, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidVideoFormat:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidVideoFormat, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidBuffer:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidBuffer, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.RawVideoFrameNotSent:
                    return new CallingCommunicationException(CallingCommunicationErrors.RawVideoFrameNotSent, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.UnsupportedVideoStreamResolution:
                    return new CallingCommunicationException(CallingCommunicationErrors.UnsupportedVideoStreamResolution, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToStart:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsFailedToStart, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsDisabledByConfigurations:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsDisabledByConfigurations, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsPolicyDisabled:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsPolicyDisabled, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsNotActive:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsNotActive, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsRequestedLanguageNotSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsRequestedLanguageNotSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSetCaptionLanguage:
                    return new CallingCommunicationException(CallingCommunicationErrors.FailedToSetCaptionLanguage, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageDisabled:
                    return new CallingCommunicationException(CallingCommunicationErrors.SetCaptionLanguageDisabled, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageTeamsPremiumLicenseNeeded:
                    return new CallingCommunicationException(CallingCommunicationErrors.SetCaptionLanguageTeamsPremiumLicenseNeeded, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToSetSpokenLanguage:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsFailedToSetSpokenLanguage, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsSetSpokenLanguageDisabled:
                    return new CallingCommunicationException(CallingCommunicationErrors.CaptionsSetSpokenLanguageDisabled, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailedCallStateNotConnected:
                    return new CallingCommunicationException(CallingCommunicationErrors.GetCaptionsFailedCallStateNotConnected, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailed:
                    return new CallingCommunicationException(CallingCommunicationErrors.GetCaptionsFailed, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SpotlightDisabledByConfigurations:
                    return new CallingCommunicationException(CallingCommunicationErrors.SpotlightDisabledByConfigurations, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MaxSpotlightReached:
                    return new CallingCommunicationException(CallingCommunicationErrors.MaxSpotlightReached, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SpotlightParticipantEmptyList:
                    return new CallingCommunicationException(CallingCommunicationErrors.SpotlightParticipantEmptyList, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SignalingOperationFailed:
                    return new CallingCommunicationException(CallingCommunicationErrors.SignalingOperationFailed, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ProxyNotAvailableForTeams:
                    return new CallingCommunicationException(CallingCommunicationErrors.ProxyNotAvailableForTeams, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersForbidden:
                    return new CallingCommunicationException(CallingCommunicationErrors.MuteOthersForbidden, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersInternalServerError:
                    return new CallingCommunicationException(CallingCommunicationErrors.MuteOthersInternalServerError, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersNotFound:
                    return new CallingCommunicationException(CallingCommunicationErrors.MuteOthersNotFound, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LobbyDisabledByConfigurations:
                    return new CallingCommunicationException(CallingCommunicationErrors.LobbyDisabledByConfigurations, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LobbyConversationTypeNotSupported:
                    return new CallingCommunicationException(CallingCommunicationErrors.LobbyConversationTypeNotSupported, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LobbyMeetingRoleNotAllowed:
                    return new CallingCommunicationException(CallingCommunicationErrors.LobbyMeetingRoleNotAllowed, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LobbyParticipantNotExist:
                    return new CallingCommunicationException(CallingCommunicationErrors.LobbyParticipantNotExist, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.RemoveParticipantOperationFailure:
                    return new CallingCommunicationException(CallingCommunicationErrors.RemoveParticipantOperationFailure, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MusicModeNotEnabled:
                    return new CallingCommunicationException(CallingCommunicationErrors.MusicModeNotEnabled, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleOutOfBounds:
                    return new CallingCommunicationException(CallingCommunicationErrors.SurveyRatingScaleOutOfBounds, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleInvalidThreshold:
                    return new CallingCommunicationException(CallingCommunicationErrors.SurveyRatingScaleInvalidThreshold, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SurveyScoreOutOfBounds:
                    return new CallingCommunicationException(CallingCommunicationErrors.SurveyScoreOutOfBounds, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.SurveyDoubleSubmissionNotAllowed:
                    return new CallingCommunicationException(CallingCommunicationErrors.SurveyDoubleSubmissionNotAllowed, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.LobbyAdmitOperationFailure:
                    return new CallingCommunicationException(CallingCommunicationErrors.LobbyAdmitOperationFailure, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSetMediaProxy:
                    return new CallingCommunicationException(CallingCommunicationErrors.FailedToSetMediaProxy, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidTokenProvider:
                    return new CallingCommunicationException(CallingCommunicationErrors.InvalidTokenProvider, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.MediaStatisticsInvalidReportInterval:
                    return new CallingCommunicationException(CallingCommunicationErrors.MediaStatisticsInvalidReportInterval, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelFailedToStart:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelFailedToStart, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelSenderClosed:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelSenderClosed, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelRandomIdNotAvailable:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelRandomIdNotAvailable, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageSizeOverLimit:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageSizeOverLimit, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForBandwidth:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageFailureForBandwidth, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForTrafficLimit:
                    return new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageFailureForTrafficLimit, fullMessage);
            }

            throw new NotSupportedException($"Unhandled status code {value}");
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static void CheckStatus(Azure.Communication.Calling.UnityClient.Status value)
        {
            if (value == Azure.Communication.Calling.UnityClient.Status.OK)
            {
                return;
            }

            Exception e = ExceptionFromStatus(value, string.Empty);

            if (e != null)
            {
                throw e;
            }
        }

        internal static void CheckStatus(IntPtr handle, Azure.Communication.Calling.UnityClient.Status value)
        {
            if (value == Azure.Communication.Calling.UnityClient.Status.OK)
            {
                return;
            }

            string message;
            string requestCorrelationVector;
            string responseCorrelationVector;

            Azure.Communication.Calling.UnityClient.Status code = Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_error_details(handle, out message, out requestCorrelationVector, out responseCorrelationVector);

            string fullMessage;
            if (code == Azure.Communication.Calling.UnityClient.Status.Failed)
            {
                throw new InvalidOperationException("Unexpected error in exception handling.");
            }
            else if (code != Azure.Communication.Calling.UnityClient.Status.OK)
            {
                fullMessage = "Exception thrown and an unexpected error in exception handling.";
            }
            else
            {
                fullMessage = message + ".";
                if (!string.IsNullOrEmpty(requestCorrelationVector))
                {
                    fullMessage += " Request CV: " + requestCorrelationVector + ".";
                }
                if (!string.IsNullOrEmpty(responseCorrelationVector))
                {
                    fullMessage += " Response CV: " + responseCorrelationVector + ".";
                }
            }

            switch (value)
            {
                case Azure.Communication.Calling.UnityClient.Status.OK:
                    return;
                case Azure.Communication.Calling.UnityClient.Status.Failed:
                    throw new InvalidOperationException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ObjectDisposed:
                    throw new ObjectDisposedException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OutOfMemory:
                    throw new OutOfMemoryException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.InvalidArgument:
                    throw new ArgumentException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.ConcurrentMutation:
                    throw new InvalidOperationException("ConcurrentMutation: " + fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OutOfRange:
                    throw new ArgumentOutOfRangeException(string.Empty, fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.NotImplemented:
                    throw new NotImplementedException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.OperationCanceled:
                    throw new OperationCanceledException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.KeyNotFound:
                    throw new KeyNotFoundException(fullMessage);
                case Azure.Communication.Calling.UnityClient.Status.None:
                    throw new CallingCommunicationException(CallingCommunicationErrors.None, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoAudioPermission:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoAudioPermission, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoVideoPermission:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoVideoPermission, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoAudioAndVideoPermission:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoAudioAndVideoPermission, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.ReceivedInvalidPushNotificationPayload:
                    throw new CallingCommunicationException(CallingCommunicationErrors.ReceivedInvalidPushNotificationPayload, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FailedToProcessPushNotificationPayload:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FailedToProcessPushNotificationPayload, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidGuidGroupId:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidGuidGroupId, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidPushNotificationDeviceRegistrationToken:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidPushNotificationDeviceRegistrationToken, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MultipleRenderersNotSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MultipleRenderersNotSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MultipleViewsNotSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MultipleViewsNotSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidLocalVideoStreamForVideoOptions:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidLocalVideoStreamForVideoOptions, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithSameIdentity:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoMultipleConnectionsWithSameIdentity, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidServerCallId:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidServerCallId, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LocalVideoStreamSwitchSourceFailure:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LocalVideoStreamSwitchSourceFailure, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.IncomingCallAlreadyUnplaced:
                    throw new CallingCommunicationException(CallingCommunicationErrors.IncomingCallAlreadyUnplaced, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidMeetingLink:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidMeetingLink, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.ParticipantAddedToUnconnectedCall:
                    throw new CallingCommunicationException(CallingCommunicationErrors.ParticipantAddedToUnconnectedCall, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.ParticipantAlreadyAddedToCall:
                    throw new CallingCommunicationException(CallingCommunicationErrors.ParticipantAlreadyAddedToCall, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CallFeatureExtensionNotFound:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CallFeatureExtensionNotFound, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DisplayNameLengthLongerThanSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DisplayNameLengthLongerThanSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FailedToHangupForEveryone:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FailedToHangupForEveryone, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidParticipantAddedToCall:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidParticipantAddedToCall, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FeatureExtensionNotFound:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FeatureExtensionNotFound, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.VideoEffectNotSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.VideoEffectNotSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSendRawAudioBuffer:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FailedToSendRawAudioBuffer, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CannotMuteVirtualAudioStream:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CannotMuteVirtualAudioStream, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DuplicateDeviceId:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DuplicateDeviceId, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DelegateIsRequired:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DelegateIsRequired, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.VirtualDeviceNotStarted:
                    throw new CallingCommunicationException(CallingCommunicationErrors.VirtualDeviceNotStarted, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidVideoStreamCombination:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidVideoStreamCombination, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoMultipleConnectionsWithDifferentClouds:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoMultipleConnectionsWithDifferentClouds, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.NoActiveAudioStreamToStop:
                    throw new CallingCommunicationException(CallingCommunicationErrors.NoActiveAudioStreamToStop, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidVideoFormat:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidVideoFormat, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidBuffer:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidBuffer, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.RawVideoFrameNotSent:
                    throw new CallingCommunicationException(CallingCommunicationErrors.RawVideoFrameNotSent, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.UnsupportedVideoStreamResolution:
                    throw new CallingCommunicationException(CallingCommunicationErrors.UnsupportedVideoStreamResolution, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToStart:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsFailedToStart, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsDisabledByConfigurations:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsDisabledByConfigurations, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsPolicyDisabled:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsPolicyDisabled, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsNotActive:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsNotActive, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsRequestedLanguageNotSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsRequestedLanguageNotSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSetCaptionLanguage:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FailedToSetCaptionLanguage, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageDisabled:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SetCaptionLanguageDisabled, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SetCaptionLanguageTeamsPremiumLicenseNeeded:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SetCaptionLanguageTeamsPremiumLicenseNeeded, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsFailedToSetSpokenLanguage:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsFailedToSetSpokenLanguage, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.CaptionsSetSpokenLanguageDisabled:
                    throw new CallingCommunicationException(CallingCommunicationErrors.CaptionsSetSpokenLanguageDisabled, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailedCallStateNotConnected:
                    throw new CallingCommunicationException(CallingCommunicationErrors.GetCaptionsFailedCallStateNotConnected, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.GetCaptionsFailed:
                    throw new CallingCommunicationException(CallingCommunicationErrors.GetCaptionsFailed, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SpotlightDisabledByConfigurations:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SpotlightDisabledByConfigurations, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MaxSpotlightReached:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MaxSpotlightReached, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SpotlightParticipantEmptyList:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SpotlightParticipantEmptyList, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SignalingOperationFailed:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SignalingOperationFailed, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.ProxyNotAvailableForTeams:
                    throw new CallingCommunicationException(CallingCommunicationErrors.ProxyNotAvailableForTeams, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersForbidden:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MuteOthersForbidden, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersInternalServerError:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MuteOthersInternalServerError, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MuteOthersNotFound:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MuteOthersNotFound, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LobbyDisabledByConfigurations:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LobbyDisabledByConfigurations, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LobbyConversationTypeNotSupported:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LobbyConversationTypeNotSupported, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LobbyMeetingRoleNotAllowed:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LobbyMeetingRoleNotAllowed, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LobbyParticipantNotExist:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LobbyParticipantNotExist, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.RemoveParticipantOperationFailure:
                    throw new CallingCommunicationException(CallingCommunicationErrors.RemoveParticipantOperationFailure, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MusicModeNotEnabled:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MusicModeNotEnabled, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleOutOfBounds:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SurveyRatingScaleOutOfBounds, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SurveyRatingScaleInvalidThreshold:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SurveyRatingScaleInvalidThreshold, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SurveyScoreOutOfBounds:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SurveyScoreOutOfBounds, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.SurveyDoubleSubmissionNotAllowed:
                    throw new CallingCommunicationException(CallingCommunicationErrors.SurveyDoubleSubmissionNotAllowed, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.LobbyAdmitOperationFailure:
                    throw new CallingCommunicationException(CallingCommunicationErrors.LobbyAdmitOperationFailure, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.FailedToSetMediaProxy:
                    throw new CallingCommunicationException(CallingCommunicationErrors.FailedToSetMediaProxy, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.InvalidTokenProvider:
                    throw new CallingCommunicationException(CallingCommunicationErrors.InvalidTokenProvider, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.MediaStatisticsInvalidReportInterval:
                    throw new CallingCommunicationException(CallingCommunicationErrors.MediaStatisticsInvalidReportInterval, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelFailedToStart:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelFailedToStart, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelSenderClosed:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelSenderClosed, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelRandomIdNotAvailable:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelRandomIdNotAvailable, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageSizeOverLimit:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageSizeOverLimit, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForBandwidth:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageFailureForBandwidth, message, requestCorrelationVector, responseCorrelationVector);
                case Azure.Communication.Calling.UnityClient.Status.DataChannelMessageFailureForTrafficLimit:
                    throw new CallingCommunicationException(CallingCommunicationErrors.DataChannelMessageFailureForTrafficLimit, message, requestCorrelationVector, responseCorrelationVector);
            }
        }
    }

    internal static class ProjectedObjectHelpers
    {
        public static IntPtr ConvertHandleToCookie(IntPtr handle)
        {
            if (handle == IntPtr.Zero)
            {
                throw new ArgumentException("Invalid handle.", nameof(handle));
            }

            return handle;
        }

        public static IntPtr ConvertCookieToHandle(IntPtr cookie)
        {
            return cookie;
        }
    }

    /// <summary>
    /// This interface is implemented by classes to be cached by the <see cref="ProjectedObjectCache"/>.
    /// </summary>
    internal interface ICachedObject
    {
        /// <summary>
        /// Unique cookie value for projected object identification.
        /// </summary>
        IntPtr Cookie { get; }
    }

    /// <summary>
    /// This interface is implemented by classes which contain reference counted objects
    /// </summary>
    internal interface IReferenceCounted
    {
        /// <summary>
        /// Increase reference count by 1
        /// </summary>
        void IncreaseReferenceCount();

        /// <summary>
        /// Decrease reference count by 1
        /// </summary>
        void DecreaseReferenceCount();
    }

    /// <summary>
    /// Represents a cache of event handlers for projected object events.
    /// </summary>
    internal static class ProjectedObjectEventHandlerCache
    {
        private readonly static IDictionary<IntPtr, IDictionary<string, Delegate>> tracked = new Dictionary<IntPtr, IDictionary<string, Delegate>>();

        /// <summary>
        /// Gets a value indicating whether the cache is empty.
        /// </summary>
        public static bool IsEmpty => tracked.Count == 0;

        /// <summary>
        /// Adds an event handler to the cache for the specified cookie and event.
        /// The delegate is added to the multicast delegate.
        /// </summary>
        /// <param name="cookie">The cookie associated with the event.</param>
        /// <param name="eventName">The name of the event.</param>
        /// <param name="handler">The event handler.</param>
        /// <returns>True if this was the first handler of the event, false otherwise.</returns>
        /// <exception cref="ArgumentNullException">The handler is null.</exception>
        /// <exception cref="ArgumentException"></exception>
        public static bool AddEventHandler<T>(IntPtr cookie, string eventName, T handler)
            where T : Delegate
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The value of {nameof(cookie)} is not valid.", nameof(cookie));
            }

            if (string.IsNullOrWhiteSpace(eventName))
            {
                throw new ArgumentException("The argument is either null, empty, or whitespace.", nameof(eventName));
            }

            if (handler == null)
            {
                throw new ArgumentNullException(nameof(handler));
            }

            lock (tracked)
            {
                IDictionary<string, Delegate> eventDelegates = GetOrInitializeEvents(cookie);

                if (!eventDelegates.TryGetValue(eventName, out Delegate existingHandler) || existingHandler == null)
                {
                    eventDelegates[eventName] = handler;
                    return true;
                }

                eventDelegates[eventName] = Delegate.Combine(existingHandler, handler);
                return false;
            }
        }

        /// <summary>
        /// Removes an event handler from the cache for the specified cookie and event.
        /// The delegate is removed from the multicast delegate.
        /// </summary>
        /// <param name="cookie">The cookie associated with the event.</param>
        /// <param name="eventName">The name of the event.</param>
        /// <param name="handler">The handler.</param>
        /// <returns>True if event has no more handlers, false otherwise.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public static bool RemoveEventHandler<T>(IntPtr cookie, string eventName, T handler)
            where T : Delegate
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The value of {nameof(cookie)} is not valid.", nameof(cookie));
            }

            if (string.IsNullOrWhiteSpace(eventName))
            {
                throw new ArgumentException("The argument is either null, empty, or whitespace.", nameof(eventName));
            }

            if (handler == null)
            {
                throw new ArgumentNullException(nameof(handler));
            }

            lock (tracked)
            {
                IDictionary<string, Delegate> eventDelegates = GetOrInitializeEvents(cookie);

                if (!eventDelegates.TryGetValue(eventName, out Delegate existingHandler) || existingHandler == null)
                {
                    return true;
                }

                Delegate result = Delegate.Remove(existingHandler, handler);
                eventDelegates[eventName] = result;
                return result == null;
            }
        }

        /// <summary>
        /// Gets the event handler for the specified cookie and event name.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="cookie">The cookie.</param>
        /// <param name="eventName">The name of the event.</param>
        /// <returns><see cref="IReadOnlyCollection{T}"/>.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public static T GetEventHandler<T>(IntPtr cookie, string eventName)
            where T : Delegate
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The value of {nameof(cookie)} is not valid.", nameof(cookie));
            }

            if (string.IsNullOrWhiteSpace(eventName))
            {
                throw new ArgumentException("The argument is either null, empty, or whitespace.", nameof(eventName));
            }

            lock (tracked)
            {
                if (!tracked.TryGetValue(cookie, out IDictionary<string, Delegate> events))
                {
                    // No events have been cached for the object.
                    return null;
                }

                if (!events.TryGetValue(eventName, out Delegate eventDelegate))
                {
                    // The specified event has not been cached for the object.
                    return null;
                }

                return eventDelegate as T;
            }
        }

        /// <summary>
        /// Clears the cache of event handles for the specified instance cookie.
        /// </summary>
        /// <param name="cookie">The cookie.</param>
        /// <exception cref="ArgumentException"></exception>
        public static void Clear(IntPtr cookie)
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The cookie is not valid: {cookie}.", nameof(cookie));
            }

            lock (tracked)
            {
                tracked.Remove(cookie);
            }
        }

        private static IDictionary<string, Delegate> GetOrInitializeEvents(IntPtr cookie)
        {
            // We assume a lock on `tracked` is already held at this point, so no need to lock here.
            if (!tracked.TryGetValue(cookie, out IDictionary<string, Delegate> events))
            {
                // Setup event handler cache for the object.
                events = new Dictionary<string, Delegate>(StringComparer.Ordinal);
                tracked[cookie] = events;
            }

            return events;
        }
    }

    /// <summary>
    /// Represents a cache of projected object events.
    /// </summary>
    internal static class ProjectedObjectCache
    {
        private static readonly Dictionary<IntPtr, System.WeakReference<ICachedObject>> tracked = new Dictionary<IntPtr, System.WeakReference<ICachedObject>>();

        private static readonly Azure.Communication.Calling.UnityClient.ProjectedObjectCleanupNative projectedObjectCleanupHandlerDelegate = ProjectedObjectCleanupHandler;

        /// <summary>
        /// Gets a value indicating whether the cache is empty.
        /// </summary>
        public static bool IsEmpty => tracked.Count == 0;

        /// <summary>
        /// Initializes static members of the <see cref="ProjectedObjectCache"/> class.
        /// </summary>
        static ProjectedObjectCache()
        {
            NativeLibraryHelpers.CheckStatus(NativeLibrary.sam_set_projected_object_cleanup(projectedObjectCleanupHandlerDelegate));
        }

        /// <summary>
        /// Adds the specified instance to the cache.
        /// </summary>
        /// <param name="instance">The instance.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        public static void Add(ICachedObject instance)
        {
            if (instance is null)
            {
                throw new ArgumentNullException(nameof(instance));
            }

            if (instance.Cookie == default)
            {
                throw new ArgumentException($"The value of {nameof(ICachedObject.Cookie)} is not valid.", nameof(instance));
            }

            lock (tracked)
            {
                if (!tracked.TryGetValue(instance.Cookie, out WeakReference<ICachedObject> cachedReference))
                {
                    tracked[instance.Cookie] = new System.WeakReference<ICachedObject>(instance);
                    return;
                }

                // Ensure that we have a good reference.
                if (!cachedReference.TryGetTarget(out _))
                {
                    cachedReference.SetTarget(instance);
                }
            }
        }

        /// <summary>
        /// Gets a cached instance using the specified instance cookie.
        /// If a cached instance isn't found, a new instance is created using the <paramref name="createFactory"/>, which
        /// is then cached and returned.
        /// </summary>
        /// <typeparam name="T">The type of the object to get or create.</typeparam>
        /// <param name="cookie">The cookie.</param>
        /// <param name="createFactory">The create factory.</param>
        /// <returns>A cached instance of type <typeparamref name="T"/>.</returns>
        /// <exception cref="ArgumentException"><paramref name="cookie"/> is not valid.</exception>
        public static T GetOrCreate<T>(IntPtr cookie, Func<IntPtr, T> createFactory)
            where T : class, ICachedObject
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The cookie is not valid: {cookie}.", nameof(cookie));
            }

            ICachedObject referenceTarget;

            lock (tracked)
            {
                if (tracked.TryGetValue(cookie, out System.WeakReference<ICachedObject> reference))
                {
                    if (!reference.TryGetTarget(out referenceTarget))
                    {
                        // The reference is gone, so create a new one.
                        referenceTarget = createFactory(cookie);
                        tracked[cookie].SetTarget(referenceTarget);
                    }
                }
                else
                {
                    // Object is not being tracked. Create an instance and track it.
                    referenceTarget = createFactory(cookie);
                    tracked[cookie] = new System.WeakReference<ICachedObject>(referenceTarget);
                }
            }

            return (T)referenceTarget;
        }

        /// <summary>
        /// Removes the specified instance from the cache.
        /// </summary>
        /// <param name="instance">The instance.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public static void Remove(ICachedObject instance)
        {
            if (instance is null)
            {
                throw new ArgumentNullException(nameof(instance));
            }

            Remove(instance.Cookie);
        }

        /// <summary>
        /// Removes the specified instance from the cache using the instance cookie.
        /// </summary>
        /// <param name="cookie">The cookie.</param>
        /// <exception cref="ArgumentException"></exception>
        public static void Remove(IntPtr cookie)
        {
            if (cookie == default)
            {
                throw new ArgumentException($"The cookie is not valid: {cookie}.", nameof(cookie));
            }

            lock (tracked)
            {
                tracked.Remove(cookie);
            }
        }

        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.ProjectedObjectCleanupNative))]
        private static void ProjectedObjectCleanupHandler(IntPtr handle)
        {
            IntPtr cookie = ProjectedObjectHelpers.ConvertHandleToCookie(handle);
            Remove(cookie);
            ProjectedObjectEventHandlerCache.Clear(cookie);
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallVideoStreamStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    /// <summary>
    /// Informs the sdk that a session requires an updated authentication token.
    /// </summary>
    /// <param name="cookie">
    /// The callback cookie.
    /// </param>
    /// <param name="sender">
    /// The object that provides the updated authentication token.
    /// </param>
    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TokenRequestedDelegateNative(IntPtr cookie, IntPtr sender);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantIsMutedChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantIsSpeakingChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantDisplayNameChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantRoleChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RemoteParticipantVideoStreamStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallAgentCallsUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallAgentIncomingCallReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCallAgentCallsUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCallAgentIncomingCallReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DeviceManagerMicrophonesUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DeviceManagerSpeakersUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DeviceManagerCamerasUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void PreCallDiagnosticsCallClientFeaturePreCallDiagnosticsReadyEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void NetworkDiagnosticsNetworkUnavailableChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void NetworkDiagnosticsNetworkRelaysUnreachableChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void NetworkDiagnosticsNetworkReconnectionQualityChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void NetworkDiagnosticsNetworkReceiveQualityChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void NetworkDiagnosticsNetworkSendQualityChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsSpeakerNotFunctioningChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsSpeakerBusyChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsSpeakerMutedChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsSpeakerVolumeZeroChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsNoSpeakerDevicesAvailableChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsSpeakingWhileMicrophoneIsMutedChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsNoMicrophoneDevicesAvailableChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsMicrophoneBusyChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsCameraFrozenChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsCameraStartFailedChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsCameraStartTimedOutChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsMicrophoneNotFunctioningChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsMicrophoneMutedUnexpectedlyChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaDiagnosticsCameraPermissionDeniedChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void IncomingCallReceivedDelegateNative(IntPtr cookie, IntPtr args);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallLobbyLobbyParticipantsUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RecordingCallFeatureIsRecordingActiveChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RecordingCallFeatureRecordingUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TranscriptionCallFeatureIsTranscriptionActiveChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DominantSpeakersCallFeatureDominantSpeakersChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CaptionsCallFeatureActiveCaptionsTypeChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RaiseHandCallFeatureHandRaisedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RaiseHandCallFeatureHandLoweredEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DataChannelCallFeatureActiveChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DataChannelCallFeatureReceiverCreatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DataChannelReceiverMessageReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void DataChannelReceiverClosedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void MediaStatisticsCallFeatureReportReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void SpotlightChangedDelegateNative(IntPtr cookie, IntPtr args);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void ContentSharingCallFeatureContentSharingDetailsChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void ContentSharingCallFeatureStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommunicationCaptionsActiveSpokenLanguageChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommunicationCaptionsCaptionsEnabledChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommunicationCaptionsCaptionsReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCaptionsCaptionsEnabledChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCaptionsActiveSpokenLanguageChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCaptionsActiveCaptionLanguageChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsCaptionsCaptionsReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RawOutgoingVideoStreamFormatChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void LocalVideoEffectsFeatureVideoEffectEnabledEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void LocalVideoEffectsFeatureVideoEffectDisabledEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void LocalVideoEffectsFeatureVideoEffectErrorEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RawIncomingVideoStreamRawVideoFrameReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallAudioStreamStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RawIncomingAudioStreamMixedAudioBufferReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void RawIncomingAudioStreamUnmixedAudioBufferReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CallTokenRefreshOptionsTokenRefreshRequestedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void TeamsIncomingCallReceivedDelegateNative(IntPtr cookie, IntPtr args);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallIdChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallRoleChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallRemoteParticipantsUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallOutgoingAudioStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallMutedByOthersEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallIncomingAudioStateChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallTotalParticipantCountChangedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonIncomingCallCallEndedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonIncomingCallReceivedDelegateNative(IntPtr cookie, IntPtr args);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallAgentCommonCallsUpdatedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void CommonCallAgentCommonIncomingCallReceivedEventHandlerNative(IntPtr cookie, IntPtr e);

    [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
    internal delegate void ProjectedObjectCleanupNative(IntPtr handle);

    // Nullable type helpers.

    [StructLayout(LayoutKind.Sequential)]
    internal struct SingleNullable
    {
        [MarshalAs(UnmanagedType.U1)]
        public bool has_value;

        public float value;

        public float? Convert()
        {
            if (this.has_value)
            {
                return this.value;
            }

            return null;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct Int32Nullable
    {
        [MarshalAs(UnmanagedType.U1)]
        public bool has_value;

        public int value;

        public int? Convert()
        {
            if (this.has_value)
            {
                return this.value;
            }

            return null;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct BooleanNullable
    {
        [MarshalAs(UnmanagedType.U1)]
        public bool has_value;

        [MarshalAs(UnmanagedType.U1)]
        public bool value;

        public bool? Convert()
        {
            if (this.has_value)
            {
                return this.value;
            }

            return null;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct DiagnosticQualityNullable
    {
        [MarshalAs(UnmanagedType.U1)]
        public bool has_value;

        public Azure.Communication.Calling.UnityClient.DiagnosticQuality value;

        public Azure.Communication.Calling.UnityClient.DiagnosticQuality? Convert()
        {
            if (this.has_value)
            {
                return this.value;
            }

            return null;
        }
    }

    internal static partial class NativeLibrary
    {
        internal const string DllName = "__Internal";
        [DllImport(DllName, ExactSpelling = true, EntryPoint = "sam_promise_create", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        public extern static int PromiseCreate(ref PromiseCreateOptions options, out PromiseSafeHandle promiseHandle);
        [DllImport(DllName, ExactSpelling = true, EntryPoint = "sam_promise_cancel", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        public extern static int PromiseCancel(PromiseSafeHandle promiseHandle);
        [DllImport(DllName, ExactSpelling = true, EntryPoint = "sam_promise_destroy", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        public extern static int PromiseDestroy(IntPtr promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_accept_call_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_phone_number_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_phone_number_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_phone_number_options_get_alternate_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_phone_number_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_phone_number_options_set_alternate_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_teams_participant_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_teams_participant_options_create_string_thread_id([MarshalAs(UnmanagedType.LPStr)] string thread_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_teams_participant_options_get_thread_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_add_teams_participant_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_all_participants_result_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_all_participants_result_get_failure_count(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_all_participants_result_get_success_count(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_all_participants_result_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_participants_result_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_participants_result_get_failed_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_participants_result_get_success_count(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_admit_participants_result_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_get_device_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioDeviceType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_get_is_system_default(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_device_details_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_devices_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_devices_updated_event_args_get_added_audio_devices(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_devices_updated_event_args_get_removed_audio_devices(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_devices_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_stream_state_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_stream_state_changed_event_args_get_message(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_stream_state_changed_event_args_get_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_audio_stream_state_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_background_blur_effect_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_background_replacement_effect_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_add_participant_string_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string participant, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_add_participant_string_participant_add_phone_number_options_options(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string participant, IntPtr options, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_get_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_join_internal(IntPtr handle, IntPtr meeting_locator, IntPtr join_call_options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_get_display_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_get_emergency_call_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_get_push_notification_ttl(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_set_display_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_set_emergency_call_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_options_set_push_notification_ttl(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_set_calls_updated(IntPtr handle, IntPtr value, CallAgentCallsUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_set_incoming_call_received(IntPtr handle, IntPtr value, CallAgentIncomingCallReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_agent_start_call_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, IntPtr options, IntPtr meeting_locator, [MarshalAs(UnmanagedType.LPStr)] string call_id, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_get_direction(IntPtr handle, out Azure.Communication.Calling.UnityClient.StreamDirection result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_audio_stream_set_state_changed(IntPtr handle, IntPtr value, CallAudioStreamStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_get_active_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_get_captions_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CaptionsType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_get_is_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, EntryPoint = "sam_call_captions_get_supported_spoken_languages_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_get_supported_spoken_languages(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, EntryPoint = "sam_call_captions_get_supported_spoken_languages_internal_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_get_supported_spoken_languages_internal(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_set_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string language, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_start_captions(IntPtr handle, IntPtr options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_captions_stop_captions(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_create_call_agent_internal(IntPtr handle, IntPtr token_provider, IntPtr call_agent_options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_create_call_client_options_options(IntPtr options, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_create_teams_call_agent_internal(IntPtr handle, IntPtr token_provider, IntPtr teams_call_agent_options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_feature_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_feature_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_feature_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_features_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_features_get_pre_call_diagnostics_call_client_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_features_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_get_device_manager_internal(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_get_features(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_get_initialization_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_get_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_get_network(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_set_diagnostics(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_options_set_network(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_client_set_initialization_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_get_app_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_get_app_version(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, EntryPoint = "sam_call_diagnostics_options_get_tags_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_get_tags(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_set_app_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_set_app_version(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_diagnostics_options_set_tags(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2)] string[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_end_reason_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_end_reason_get_code(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_end_reason_get_subcode(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_end_reason_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_feature_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_feature_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_feature_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_captions(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_content_sharing(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_data_channel(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_dominant_speakers(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_local_user_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_media_statistics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_raised_hands(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_recording(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_spotlight(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_get_transcription(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_features_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_get_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_identifier_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_identifier_get_raw_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_identifier_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_admit_all(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_admit_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_get_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_reject_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string participant, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_lobby_set_lobby_participants_updated(IntPtr handle, IntPtr value, CallLobbyLobbyParticipantsUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_get_ice_servers(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_get_proxy_uri(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_set_ice_servers(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] IntPtr[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_network_options_set_proxy_uri(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_get_incoming_audio_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_get_incoming_video_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_get_outgoing_audio_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_get_outgoing_video_options(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_set_incoming_audio_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_set_incoming_video_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_set_outgoing_audio_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_options_set_outgoing_video_options(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_create_string_access_token_date_time_offset_expires_on([MarshalAs(UnmanagedType.LPStr)] string access_token, long expires_on, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_credential_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_credential_create_string_token([MarshalAs(UnmanagedType.LPStr)] string token, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_credential_create_string_token_call_token_refresh_options_options([MarshalAs(UnmanagedType.LPStr)] string token, IntPtr options, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_credential_get_token(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_credential_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_get_expires_on(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_get_token(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_options_create_boolean_refresh_proactively([MarshalAs(UnmanagedType.U1)] bool refresh_proactively, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_options_get_refresh_proactively(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_options_set_token_refresh_requested(IntPtr handle, IntPtr value, CallTokenRefreshOptionsTokenRefreshRequestedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_requested_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_requested_event_args_get_call_token(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_requested_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_refresh_requested_event_args_set_call_token(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_token_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_get_direction(IntPtr handle, out Azure.Communication.Calling.UnityClient.StreamDirection result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_get_id(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_get_source_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamSourceKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_on_binding_created(IntPtr handle, long binding_event_handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_on_binding_failed(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_on_binding_released(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_call_video_stream_set_state_changed(IntPtr handle, IntPtr value, CallVideoStreamStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_caller_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_caller_info_get_caller_identifier(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_caller_info_get_display_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_caller_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_calls_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_calls_updated_event_args_get_added_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_calls_updated_event_args_get_removed_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_calls_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_captions_call_feature_get_captions(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_captions_call_feature_set_active_captions_type_changed(IntPtr handle, IntPtr value, CaptionsCallFeatureActiveCaptionsTypeChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CommunicationCallKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_handle_push_notification(IntPtr handle, IntPtr notification, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_options_get_disable_internal_push_for_incoming_call(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_options_set_disable_internal_push_for_incoming_call(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_register_push_notification_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string device_token, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_set_common_calls_updated(IntPtr handle, IntPtr value, CommonCallAgentCommonCallsUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_set_common_incoming_call_received(IntPtr handle, IntPtr value, CommonCallAgentCommonIncomingCallReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_agent_unregister_push_notification(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_active_incoming_audio_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_active_outgoing_audio_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_call_end_reason(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_call_lobby(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_call_participant_role(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallParticipantRole result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_caller_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_captions_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_content_sharing_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_current_audio_stream(IntPtr handle, Azure.Communication.Calling.UnityClient.StreamDirection stream_direction, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_data_channel_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_direction(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallDirection result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_dominant_speakers_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_features(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_incoming_raw_video_frame_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.RawVideoFrameKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_is_incoming_audio_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_is_outgoing_audio_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_live_outgoing_audio_filters(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_local_identifier_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_local_user_diagnostics_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_media_statistics_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_outgoing_video_streams(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_raise_hand_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_recording_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_remote_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_spotlight_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_total_participant_count(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_transcription_call_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CommunicationCallKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_hang_up(IntPtr handle, IntPtr options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_hold(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_info_get_server_call_id(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_mute_all_remote_participants(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_mute_incoming_audio(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_mute_internal(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool mute, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_mute_outgoing_audio(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_mute_speaker_internal(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool mute, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_remove_participant(IntPtr handle, IntPtr participant, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_resume(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_send_dtmf(IntPtr handle, Azure.Communication.Calling.UnityClient.DtmfTone tone, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_id_changed(IntPtr handle, IntPtr value, CommonCallIdChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_incoming_audio_state_changed(IntPtr handle, IntPtr value, CommonCallIncomingAudioStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_muted_by_others(IntPtr handle, IntPtr value, CommonCallMutedByOthersEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_outgoing_audio_state_changed(IntPtr handle, IntPtr value, CommonCallOutgoingAudioStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_remote_participants_updated(IntPtr handle, IntPtr value, CommonCallRemoteParticipantsUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_role_changed(IntPtr handle, IntPtr value, CommonCallRoleChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_state_changed(IntPtr handle, IntPtr value, CommonCallStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_total_participant_count_changed(IntPtr handle, IntPtr value, CommonCallTotalParticipantCountChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_set_video_constraints(IntPtr handle, IntPtr constraints);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_start_audio(IntPtr handle, IntPtr stream, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_start_system_audio_sharing(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_start_video_internal(IntPtr handle, IntPtr stream, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_stop_audio(IntPtr handle, IntPtr stream, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_stop_system_audio_sharing(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_stop_video_internal(IntPtr handle, IntPtr stream, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_switch_incoming_raw_video_frame_kind(IntPtr handle, Azure.Communication.Calling.UnityClient.RawVideoFrameKind frame_kind);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_unmute_incoming_audio(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_call_unmute_outgoing_audio(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_calls_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_calls_updated_event_args_get_added_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_calls_updated_event_args_get_removed_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_calls_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_get_call_end_reason(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_get_caller_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_get_is_video_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CommunicationCallKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_received_event_args_get_incoming_call(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_reject(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_common_incoming_call_set_call_ended(IntPtr handle, IntPtr value, CommonIncomingCallCallEndedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_get_result_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CaptionsResultType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_get_speaker(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_get_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_get_spoken_text(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_get_timestamp(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_set_active_spoken_language_changed(IntPtr handle, IntPtr value, CommunicationCaptionsActiveSpokenLanguageChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_set_captions_enabled_changed(IntPtr handle, IntPtr value, CommunicationCaptionsCaptionsEnabledChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_communication_captions_set_captions_received(IntPtr handle, IntPtr value, CommunicationCaptionsCaptionsReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_call_feature_get_content_sharing_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_call_feature_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.ContentSharingState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_call_feature_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.ContentSharingType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_call_feature_set_content_sharing_details_changed(IntPtr handle, IntPtr value, ContentSharingCallFeatureContentSharingDetailsChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_call_feature_set_state_changed(IntPtr handle, IntPtr value, ContentSharingCallFeatureStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_content_sharing_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_call_feature_get_data_channel_sender(IntPtr handle, IntPtr options, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_call_feature_get_is_active(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_call_feature_set_active_changed(IntPtr handle, IntPtr value, DataChannelCallFeatureActiveChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_call_feature_set_receiver_created(IntPtr handle, IntPtr value, DataChannelCallFeatureReceiverCreatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_message_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_message_get_sequence_number(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_message_read_data(IntPtr handle, out System.IntPtr bytes, out int size);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_message_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_created_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_created_event_args_get_receiver(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_created_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_get_channel_id(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_get_sender_identifier_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_pop_message(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_set_closed(IntPtr handle, IntPtr value, DataChannelReceiverClosedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_receiver_set_message_received(IntPtr handle, IntPtr value, DataChannelReceiverMessageReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_close_sender(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_get_channel_id(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_get_max_message_size_in_bytes(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_get_bitrate_in_kbps(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_get_channel_id(IntPtr handle, out int result);
        [DllImport(DllName, EntryPoint = "sam_data_channel_sender_options_get_participants_internal_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_get_participants_internal(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_get_priority(IntPtr handle, out Azure.Communication.Calling.UnityClient.DataChannelPriority result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_get_reliability(IntPtr handle, out Azure.Communication.Calling.UnityClient.DataChannelReliability result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_set_bitrate_in_kbps(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_set_channel_id(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_set_participants_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2)] string[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_set_priority(IntPtr handle, Azure.Communication.Calling.UnityClient.DataChannelPriority value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_options_set_reliability(IntPtr handle, Azure.Communication.Calling.UnityClient.DataChannelReliability value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_send_message_async_data(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2), In] byte[] data, int data_count, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_send_message_async_int_ptr_data_int32_data_length(IntPtr handle, System.IntPtr data, int data_length, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_data_channel_sender_set_participants_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_get_cameras(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_get_microphone(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_get_microphones(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_get_speaker(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_get_speakers(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_cameras_updated(IntPtr handle, IntPtr value, DeviceManagerCamerasUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_device_orientation_internal(IntPtr handle, int angle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_microphone(IntPtr handle, IntPtr microphone_device);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_microphones_updated(IntPtr handle, IntPtr value, DeviceManagerMicrophonesUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_speaker(IntPtr handle, IntPtr speaker_device);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_device_manager_set_speakers_updated(IntPtr handle, IntPtr value, DeviceManagerSpeakersUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_flag_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_flag_changed_event_args_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_flag_changed_event_args_get_value(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_flag_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_quality_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_quality_changed_event_args_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_quality_changed_event_args_get_value(IntPtr handle, out Azure.Communication.Calling.UnityClient.DiagnosticQuality result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_diagnostic_quality_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_call_feature_get_dominant_speakers_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_call_feature_set_dominant_speakers_changed(IntPtr handle, IntPtr value, DominantSpeakersCallFeatureDominantSpeakersChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_info_get_last_updated_at(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_info_get_speakers_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_dominant_speakers_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_emergency_call_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_emergency_call_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_emergency_call_options_get_country_code(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_emergency_call_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_emergency_call_options_set_country_code(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_endpoint_details_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_endpoint_details_get_audio_stream_delegated_id(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_endpoint_details_get_is_audio_stream_delegated(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_endpoint_details_get_participant_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_endpoint_details_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_get_error_details(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result_message, [MarshalAs(UnmanagedType.LPStr)] out string result_requestCorrelationVector, [MarshalAs(UnmanagedType.LPStr)] out string result_responseCorrelationVector);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_get_handle_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.HandleType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_group_call_locator_create_guid_group_id(System.Guid group_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_group_call_locator_get_group_id(IntPtr handle, out System.Guid result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_group_chat_call_locator_create_string_thread_id([MarshalAs(UnmanagedType.LPStr)] string thread_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_group_chat_call_locator_get_thread_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_hang_up_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_hang_up_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_hang_up_options_get_for_everyone(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_hang_up_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_hang_up_options_set_for_everyone(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_password(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_realm(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_tcp_port(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_udp_port(IntPtr handle, out int result);
        [DllImport(DllName, EntryPoint = "sam_ice_server_get_urls_internal_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_urls_internal(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_get_username(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_password(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_realm(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_tcp_port(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_udp_port(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_urls_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2)] string[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_ice_server_set_username(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_get_is_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_get_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_set_is_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_options_set_stream(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_get_jitter_in_ms(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_get_packets_lost_per_second(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_audio_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_call_accept(IntPtr handle, IntPtr options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_call_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_call_received_event_args_get_incoming_call(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_call_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_data_channel_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_data_channel_statistics_get_jitter_in_ms(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_data_channel_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_data_channel_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_get_audio(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_get_data_channel(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_get_screen_share(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_get_video(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_media_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_mixed_audio_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_mixed_audio_event_args_get_audio_buffer(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_mixed_audio_event_args_get_stream_properties(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_mixed_audio_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_bitrate_in_bps(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_frame_height(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_frame_rate(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_frame_width(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_jitter_in_ms(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_packets_lost_per_second(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_participant_identifier_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_get_total_freeze_duration_in_ms(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_screen_share_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_get_audio_buffer(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, EntryPoint = "sam_incoming_unmixed_audio_event_args_get_remote_participant_ids_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_get_remote_participant_ids(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, EntryPoint = "sam_incoming_unmixed_audio_event_args_get_remote_participant_ids_internal_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_get_remote_participant_ids_internal(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_get_stream_properties(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_unmixed_audio_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_get_max_height(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_get_max_width(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_set_max_height(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_constraints_set_max_width(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_get_constraints(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_get_frame_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.RawVideoFrameKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_get_stream_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_set_constraints(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_set_frame_type(IntPtr handle, Azure.Communication.Calling.UnityClient.RawVideoFrameKind value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_options_set_stream_type(IntPtr handle, Azure.Communication.Calling.UnityClient.VideoStreamKind value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_bitrate_in_bps(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_frame_height(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_frame_rate(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_frame_width(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_jitter_in_ms(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_packets_lost_per_second(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_participant_identifier_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_get_total_freeze_duration_in_ms(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_incoming_video_stream_get_participant_source_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_get_data_path(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_get_is_encrypted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_get_log_file_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_get_stdout_logging(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_set_data_path(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_set_is_encrypted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_set_log_file_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_initialization_options_set_stdout_logging(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_check_token_scope(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_parse_token(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string token);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_set_error(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string error);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_set_on_token_requested(IntPtr handle, IntPtr value, Azure.Communication.Calling.UnityClient.TokenRequestedDelegateNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_internal_token_provider_set_token(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string token, [MarshalAs(UnmanagedType.LPStr)] string account_identity, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=4)] string[] scopes, int scopes_count, [MarshalAs(UnmanagedType.LPStr)] string display_name, [MarshalAs(UnmanagedType.LPStr)] string resource_id, [MarshalAs(UnmanagedType.LPStr)] string country_code);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_join_call_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_join_meeting_locator_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_join_meeting_locator_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_get_acoustic_echo_cancellation_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_get_music_mode_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_get_noise_suppression_mode(IntPtr handle, out Azure.Communication.Calling.UnityClient.NoiseSuppressionMode result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_set_acoustic_echo_cancellation_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_set_music_mode_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_live_outgoing_audio_filters_set_noise_suppression_mode(IntPtr handle, Azure.Communication.Calling.UnityClient.NoiseSuppressionMode value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_outgoing_audio_stream_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_user_diagnostics_call_feature_get_media_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_user_diagnostics_call_feature_get_network_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_disable_effect(IntPtr handle, IntPtr effect);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_enable_effect(IntPtr handle, IntPtr effect);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_is_effect_supported(IntPtr handle, IntPtr effect, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_set_video_effect_disabled(IntPtr handle, IntPtr value, LocalVideoEffectsFeatureVideoEffectDisabledEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_set_video_effect_enabled(IntPtr handle, IntPtr value, LocalVideoEffectsFeatureVideoEffectEnabledEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_effects_feature_set_video_effect_error(IntPtr handle, IntPtr value, LocalVideoEffectsFeatureVideoEffectErrorEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_create_video_device_info_camera(IntPtr camera, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_feature_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_feature_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_feature_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_features_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_features_get_video_effects(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_features_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_get_features(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_get_local_video_effects_feature(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_get_preview_id_internal(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_get_source(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_switch_source_internal(IntPtr handle, IntPtr video_device, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_local_video_stream_switch_video_device_info(IntPtr handle, IntPtr video_device_info);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_lowered_hand_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_lowered_hand_changed_event_args_get_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_lowered_hand_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_camera_frozen(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_camera_permission_denied(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_camera_start_failed(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_camera_start_timed_out(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_microphone_busy(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_microphone_muted_unexpectedly(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_microphone_not_functioning(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_no_microphone_devices_available(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_no_speaker_devices_available(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_speaker_busy(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_speaker_muted(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_speaker_not_functioning(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_speaker_volume_zero(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_is_speaking_while_microphone_is_muted(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_get_last_updated_at(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostic_values_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_get_latest_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_camera_frozen_changed(IntPtr handle, IntPtr value, MediaDiagnosticsCameraFrozenChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_camera_permission_denied_changed(IntPtr handle, IntPtr value, MediaDiagnosticsCameraPermissionDeniedChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_camera_start_failed_changed(IntPtr handle, IntPtr value, MediaDiagnosticsCameraStartFailedChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_camera_start_timed_out_changed(IntPtr handle, IntPtr value, MediaDiagnosticsCameraStartTimedOutChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_microphone_busy_changed(IntPtr handle, IntPtr value, MediaDiagnosticsMicrophoneBusyChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_microphone_muted_unexpectedly_changed(IntPtr handle, IntPtr value, MediaDiagnosticsMicrophoneMutedUnexpectedlyChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_microphone_not_functioning_changed(IntPtr handle, IntPtr value, MediaDiagnosticsMicrophoneNotFunctioningChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_no_microphone_devices_available_changed(IntPtr handle, IntPtr value, MediaDiagnosticsNoMicrophoneDevicesAvailableChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_no_speaker_devices_available_changed(IntPtr handle, IntPtr value, MediaDiagnosticsNoSpeakerDevicesAvailableChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_speaker_busy_changed(IntPtr handle, IntPtr value, MediaDiagnosticsSpeakerBusyChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_speaker_muted_changed(IntPtr handle, IntPtr value, MediaDiagnosticsSpeakerMutedChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_speaker_not_functioning_changed(IntPtr handle, IntPtr value, MediaDiagnosticsSpeakerNotFunctioningChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_speaker_volume_zero_changed(IntPtr handle, IntPtr value, MediaDiagnosticsSpeakerVolumeZeroChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_diagnostics_set_speaking_while_microphone_is_muted_changed(IntPtr handle, IntPtr value, MediaDiagnosticsSpeakingWhileMicrophoneIsMutedChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_call_feature_get_report_interval_in_seconds(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_call_feature_set_report_received(IntPtr handle, IntPtr value, MediaStatisticsCallFeatureReportReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_call_feature_update_report_interval_in_seconds(IntPtr handle, int report_interval_in_seconds);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_get_incoming_statistics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_get_last_updated_at(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_get_outgoing_statistics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_received_event_args_get_report(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_media_statistics_report_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_create_string_user_id([MarshalAs(UnmanagedType.LPStr)] string user_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_create_string_user_id_boolean_is_anonymous([MarshalAs(UnmanagedType.LPStr)] string user_id, [MarshalAs(UnmanagedType.U1)] bool is_anonymous, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_get_cloud_environment(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallCloudEnvironment result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_get_is_anonymous(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_get_user_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_microsoft_teams_user_call_identifier_set_cloud_environment(IntPtr handle, Azure.Communication.Calling.UnityClient.CallCloudEnvironment value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_create_int32_size(int size, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_get_data(IntPtr handle, out System.IntPtr bytes, out int size);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_get_length(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_write_data_int_ptr_source_array_int32_source_index_int32_destination_index_int32_length(IntPtr handle, System.IntPtr source_array, int source_index, int destination_index, int length);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_native_buffer_write_data_source_array_int32_source_index_int32_destination_index_int32_length(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] byte[] source_array, int source_array_count, int source_index, int destination_index, int length);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_is_network_relays_unreachable(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_is_network_unavailable(IntPtr handle, out BooleanNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_last_updated_at(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_network_receive_quality(IntPtr handle, out Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_network_reconnection_quality(IntPtr handle, out Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_get_network_send_quality(IntPtr handle, out Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostic_values_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_get_latest_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_set_network_receive_quality_changed(IntPtr handle, IntPtr value, NetworkDiagnosticsNetworkReceiveQualityChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_set_network_reconnection_quality_changed(IntPtr handle, IntPtr value, NetworkDiagnosticsNetworkReconnectionQualityChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_set_network_relays_unreachable_changed(IntPtr handle, IntPtr value, NetworkDiagnosticsNetworkRelaysUnreachableChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_set_network_send_quality_changed(IntPtr handle, IntPtr value, NetworkDiagnosticsNetworkSendQualityChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_network_diagnostics_set_network_unavailable_changed(IntPtr handle, IntPtr value, NetworkDiagnosticsNetworkUnavailableChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_get_acoustic_echo_cancellation_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_get_analog_automatic_gain_control_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_get_digital_automatic_gain_control_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_get_music_mode_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_get_noise_suppression_mode(IntPtr handle, out Azure.Communication.Calling.UnityClient.NoiseSuppressionMode result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_set_acoustic_echo_cancellation_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_set_analog_automatic_gain_control_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_set_digital_automatic_gain_control_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_set_music_mode_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_filters_set_noise_suppression_mode(IntPtr handle, Azure.Communication.Calling.UnityClient.NoiseSuppressionMode value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_get_filters(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_get_is_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_get_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_set_filters(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_set_is_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_options_set_stream(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_get_bitrate_in_bps(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_get_jitter_in_ms(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_audio_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_data_channel_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_data_channel_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_data_channel_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_get_audio(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_get_data_channel(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_get_screen_share(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_get_video(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_media_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_bitrate_in_bps(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_frame_height(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_frame_rate(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_frame_width(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_screen_share_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_get_max_frame_rate(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_get_max_height(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_get_max_width(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_set_max_frame_rate(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_set_max_height(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_constraints_set_max_width(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_get_constraints(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_get_streams(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_set_constraints(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_set_outgoing_video_streams_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2), In] IntPtr[] outgoing_video_streams, int outgoing_video_streams_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_options_set_streams(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] IntPtr[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_bitrate_in_bps(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_codec_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_frame_height(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_frame_rate(IntPtr handle, out SingleNullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_frame_width(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_packet_count(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_get_stream_id(IntPtr handle, out Int32Nullable result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_outgoing_video_statistics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_participants_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_participants_updated_event_args_get_added_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_participants_updated_event_args_get_removed_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_participants_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_phone_number_call_identifier_create_string_phone_number([MarshalAs(UnmanagedType.LPStr)] string phone_number, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_phone_number_call_identifier_get_phone_number(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_power_point_info_get_is_private_viewing_enabled(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_power_point_info_get_slide_index(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_call_client_feature_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_call_client_feature_get_device_permissions(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out int[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_call_client_feature_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_call_client_feature_run_diagnostics(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_call_client_feature_set_pre_call_diagnostics_ready(IntPtr handle, IntPtr value, PreCallDiagnosticsCallClientFeaturePreCallDiagnosticsReadyEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_get_media_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_get_media_statistics_report(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_get_network_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_ready_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_ready_event_args_get_diagnostics(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_ready_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_pre_call_diagnostics_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_property_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_property_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_call_id_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_event_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallPushNotificationEventKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_from_display_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_from_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_incoming_with_video(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_get_to_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_parse_internal([MarshalAs(UnmanagedType.LPStr)] string payload, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_push_notification_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_get_raised_hands(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_lower_all_hands(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_lower_hand(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_lower_hands_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_raise_hand(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_set_hand_lowered(IntPtr handle, IntPtr value, RaiseHandCallFeatureHandLoweredEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raise_hand_call_feature_set_hand_raised(IntPtr handle, IntPtr value, RaiseHandCallFeatureHandRaisedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_changed_event_args_get_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_get_order(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_get_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raised_hand_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_get_timestamp_in_ticks(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_get_unity_buffer(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_set_timestamp_in_ticks(IntPtr handle, long value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_buffer_set_unity_buffer(IntPtr handle, IntPtr buffer);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_get_channel_mode(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamChannelMode result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_get_format(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamFormat result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_get_sample_rate(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamSampleRate result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_set_channel_mode(IntPtr handle, Azure.Communication.Calling.UnityClient.AudioStreamChannelMode value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_set_format(IntPtr handle, Azure.Communication.Calling.UnityClient.AudioStreamFormat value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_audio_stream_properties_set_sample_rate(IntPtr handle, Azure.Communication.Calling.UnityClient.AudioStreamSampleRate value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_create_raw_incoming_audio_stream_options_options(IntPtr options, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_options_get_properties(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_options_get_receive_unmixed_audio(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_options_set_properties(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_options_set_receive_unmixed_audio(IntPtr handle, [MarshalAs(UnmanagedType.U1)] bool value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_properties_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_set_mixed_audio_buffer_received(IntPtr handle, IntPtr value, RawIncomingAudioStreamMixedAudioBufferReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_audio_stream_set_unmixed_audio_buffer_received(IntPtr handle, IntPtr value, RawIncomingAudioStreamUnmixedAudioBufferReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_video_stream_set_raw_video_frame_received(IntPtr handle, IntPtr value, RawIncomingVideoStreamRawVideoFrameReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_video_stream_start(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_incoming_video_stream_stop(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_create_raw_outgoing_audio_stream_options_options(IntPtr options, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_get_expected_buffer_size_in_bytes(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_get_properties(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_options_get_properties(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_options_set_properties(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_properties_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_properties_get_buffer_duration(IntPtr handle, out Azure.Communication.Calling.UnityClient.AudioStreamBufferDuration result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_properties_set_buffer_duration(IntPtr handle, Azure.Communication.Calling.UnityClient.AudioStreamBufferDuration value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_audio_stream_send_raw_audio_buffer(IntPtr handle, IntPtr raw_audio_buffer, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_get_format(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_get_timestamp_in_ticks(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_options_get_formats(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_options_set_formats(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] IntPtr[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_send_raw_video_frame(IntPtr handle, IntPtr raw_video_frame, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_outgoing_video_stream_set_format_changed(IntPtr handle, IntPtr value, RawOutgoingVideoStreamFormatChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_buffer_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_buffer_get_buffers_unity(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_buffer_set_buffers_unity(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] IntPtr[] value, int value_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_dispose(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_get_stream_format(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_get_timestamp_in_ticks(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_get_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.RawVideoFrameKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_received_event_args_get_frame(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_received_event_args_get_video_stream_id(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_set_stream_format(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_set_timestamp_in_ticks(IntPtr handle, long value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_texture_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_texture_get_texture(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_raw_video_frame_texture_set_texture(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_call_feature_get_is_recording_active(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_call_feature_get_recordings(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_call_feature_set_is_recording_active_changed(IntPtr handle, IntPtr value, RecordingCallFeatureIsRecordingActiveChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_call_feature_set_recording_updated(IntPtr handle, IntPtr value, RecordingCallFeatureRecordingUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_info_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.RecordingState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_updated_event_args_get_updated_recording(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_recording_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_incoming_audio_stream_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_call_end_reason(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_call_participant_role(IntPtr handle, out Azure.Communication.Calling.UnityClient.CallParticipantRole result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_display_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_endpoint_details(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_identifier_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_incoming_video_streams(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_is_muted(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_is_speaking(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_get_state(IntPtr handle, out Azure.Communication.Calling.UnityClient.ParticipantState result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_mute(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_display_name_changed(IntPtr handle, IntPtr value, RemoteParticipantDisplayNameChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_is_muted_changed(IntPtr handle, IntPtr value, RemoteParticipantIsMutedChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_is_speaking_changed(IntPtr handle, IntPtr value, RemoteParticipantIsSpeakingChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_role_changed(IntPtr handle, IntPtr value, RemoteParticipantRoleChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_state_changed(IntPtr handle, IntPtr value, RemoteParticipantStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_participant_set_video_stream_state_changed(IntPtr handle, IntPtr value, RemoteParticipantVideoStreamStateChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_video_stream_start_preview_windows(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_remote_video_stream_stop_preview_internal(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_room_call_locator_create_string_room_id([MarshalAs(UnmanagedType.LPStr)] string room_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_room_call_locator_get_room_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_screen_share_outgoing_video_stream_create_raw_outgoing_video_stream_options_video_stream_options(IntPtr video_stream_options, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_set_projected_object_cleanup(Azure.Communication.Calling.UnityClient.ProjectedObjectCleanupNative callback);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_cancel_all_spotlights(IntPtr handle, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_cancel_spotlight_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_get_max_spotlighted_participants(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_get_spotlighted_participants(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_set_on_spotlight_changed(IntPtr handle, IntPtr value, Azure.Communication.Calling.UnityClient.SpotlightChangedDelegateNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_call_feature_spotlight_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_changed_event_args_get_added(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_changed_event_args_get_removed(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlight_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlighted_participant_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlighted_participant_get_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_spotlighted_participant_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_call_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_call_options_get_alternate_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_call_options_set_alternate_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_captions_options_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_captions_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_captions_options_get_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_captions_options_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_captions_options_set_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_teams_call_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_teams_group_call_options_create_string_thread_id([MarshalAs(UnmanagedType.LPStr)] string thread_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_start_teams_group_call_options_get_thread_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_create_local_video_stream_local_stream(IntPtr local_stream, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_send_attempt(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_send_failure(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string reason);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_switch_source_telemetry_event_send_success(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_add_participant(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string participant, IntPtr options, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_get_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_join_internal(IntPtr handle, IntPtr meeting_locator, IntPtr join_call_options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_options_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_set_calls_updated(IntPtr handle, IntPtr value, TeamsCallAgentCallsUpdatedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_set_incoming_call_received(IntPtr handle, IntPtr value, TeamsCallAgentIncomingCallReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_start_call_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string participant, IntPtr options, [MarshalAs(UnmanagedType.LPStr)] string call_id, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_agent_start_group_call_internal(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, ArraySubType=UnmanagedType.LPStr, SizeParamIndex=2), In] string[] participants, int participants_count, IntPtr options, [MarshalAs(UnmanagedType.LPStr)] string call_id, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_get_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_call_info_get_thread_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_calls_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_calls_updated_event_args_get_added_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_calls_updated_event_args_get_removed_calls(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_calls_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_get_active_caption_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, EntryPoint = "sam_teams_captions_get_supported_caption_languages_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_get_supported_caption_languages(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, EntryPoint = "sam_teams_captions_get_supported_caption_languages_internal_flat", CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_get_supported_caption_languages_internal(IntPtr handle, out IntPtr result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_caption_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_caption_text(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_result_type(IntPtr handle, out Azure.Communication.Calling.UnityClient.CaptionsResultType result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_speaker(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_spoken_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_spoken_text(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_get_timestamp(IntPtr handle, out long result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_set_active_caption_language_changed(IntPtr handle, IntPtr value, TeamsCaptionsActiveCaptionLanguageChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_set_active_spoken_language_changed(IntPtr handle, IntPtr value, TeamsCaptionsActiveSpokenLanguageChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_set_caption_language(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string language, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_set_captions_enabled_changed(IntPtr handle, IntPtr value, TeamsCaptionsCaptionsEnabledChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_captions_set_captions_received(IntPtr handle, IntPtr value, TeamsCaptionsCaptionsReceivedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_incoming_call_accept(IntPtr handle, IntPtr options, Azure.Communication.Calling.UnityClient.PromiseSafeHandle promiseHandle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_incoming_call_get_call_info(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_incoming_call_received_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_incoming_call_received_event_args_get_incoming_call(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_incoming_call_received_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_coordinates_locator_create_string_thread_id_guid_organizer_id_guid_tenant_id_string_message_id([MarshalAs(UnmanagedType.LPStr)] string thread_id, System.Guid organizer_id, System.Guid tenant_id, [MarshalAs(UnmanagedType.LPStr)] string message_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_coordinates_locator_get_message_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_coordinates_locator_get_organizer_id(IntPtr handle, out System.Guid result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_coordinates_locator_get_tenant_id(IntPtr handle, out System.Guid result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_coordinates_locator_get_thread_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_link_locator_create_string_meeting_link([MarshalAs(UnmanagedType.LPStr)] string meeting_link, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_teams_meeting_link_locator_get_meeting_link_uri(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_transcription_call_feature_get_is_transcription_active(IntPtr handle, [MarshalAs(UnmanagedType.U1)] out bool result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_transcription_call_feature_set_is_transcription_active_changed(IntPtr handle, IntPtr value, TranscriptionCallFeatureIsTranscriptionActiveChangedEventHandlerNative value_fn);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_unknown_call_identifier_create_string_id([MarshalAs(UnmanagedType.LPStr)] string id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_unknown_call_identifier_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_user_call_identifier_create_string_id([MarshalAs(UnmanagedType.LPStr)] string id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_user_call_identifier_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_get_incoming_video_constraints(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_get_outgoing_video_constraints(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_set_incoming_video_constraints(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_constraints_set_outgoing_video_constraints(IntPtr handle, IntPtr value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_get_camera_facing(IntPtr handle, out Azure.Communication.Calling.UnityClient.CameraFacing result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_get_id(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_get_video_device_kind(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoDeviceKind result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_device_info_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_devices_updated_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_devices_updated_event_args_get_added_video_devices(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_devices_updated_event_args_get_removed_video_devices(IntPtr handle, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)] out IntPtr[] result, out int result_count);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_devices_updated_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_disabled_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_disabled_event_args_get_video_effect_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_disabled_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_enabled_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_enabled_event_args_get_video_effect_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_enabled_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_error_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_error_event_args_get_code(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_error_event_args_get_message(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_error_event_args_get_video_effect_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_error_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_get_name(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_effect_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_changed_event_args_get_format(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_create(out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_frames_per_second(IntPtr handle, out float result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_height(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_pixel_format(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamPixelFormat result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_resolution(IntPtr handle, out Azure.Communication.Calling.UnityClient.VideoStreamResolution result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_stride1(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_stride2(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_stride3(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_get_width(IntPtr handle, out int result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_frames_per_second(IntPtr handle, float value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_height(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_pixel_format(IntPtr handle, Azure.Communication.Calling.UnityClient.VideoStreamPixelFormat value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_resolution(IntPtr handle, Azure.Communication.Calling.UnityClient.VideoStreamResolution value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_stride1(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_stride2(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_stride3(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_format_set_width(IntPtr handle, int value);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_state_changed_event_args_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_state_changed_event_args_get_message(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] out string result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_state_changed_event_args_get_stream(IntPtr handle, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_video_stream_state_changed_event_args_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_addref(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_create_for_local_stream(System.Guid view_id, IntPtr local_stream, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_create_for_remote_stream(System.Guid view_id, IntPtr remote_stream, out IntPtr result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_create_guid_view_id(System.Guid view_id, out IntPtr instance);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_get_view_id(IntPtr handle, out System.Guid result);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_release(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_create_view_attempt(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_create_view_failed(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string reason);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_create_view_success(IntPtr handle, int width, int height);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_dispose_view_attempt(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_dispose_view_failed(IntPtr handle, [MarshalAs(UnmanagedType.LPStr)] string reason);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_view_lifecycle_telemetry_event_send_dispose_view_success(IntPtr handle);
        [DllImport(DllName, CallingConvention = CallingConvention.Cdecl)]
        [DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
        internal static extern Azure.Communication.Calling.UnityClient.Status sam_virtual_outgoing_video_stream_create_raw_outgoing_video_stream_options_video_stream_options(IntPtr video_stream_options, out IntPtr instance);
    }

    // CODE STARTS HERE

    abstract class BasePrivateDictionary<TKey, TValue> : IDictionary<TKey, TValue>
    {
        protected abstract int InternalGetCount();
        protected abstract TKey InternalGetKey(int index);
        protected abstract TValue InternalGetItem(TKey key);
        protected abstract void InternalSetItem(TKey key, TValue value);
        protected abstract void InternalRemoveKey(TKey key);

        public TValue this[TKey key] { get { return InternalGetItem(key); } set { InternalSetItem(key, value); } }

        public ICollection<TKey> Keys { get { return Enumerable.Range(0, InternalGetCount()).Select(n => InternalGetKey(n)).ToList().AsReadOnly(); } }

        public ICollection<TValue> Values { get { return Enumerable.Range(0, InternalGetCount()).Select(n => InternalGetKey(n)).Select(k => InternalGetItem(k)).ToList().AsReadOnly(); } }

        public int Count { get { return InternalGetCount(); } }

        public bool IsReadOnly { get { return false; } }

        public void Add(TKey key, TValue value)
        {
            try
            {
                InternalGetItem(key);
            }
            catch (KeyNotFoundException)
            {
                InternalSetItem(key, value);
                return;
            }
            throw new ArgumentException();
        }

        public void Add(KeyValuePair<TKey, TValue> item)
        {
            Add(item.Key, item.Value);
        }

        public void Clear()
        {
            while (InternalGetCount() > 0)
            {
                TKey key = InternalGetKey(0);
                InternalRemoveKey(key);
            }
        }

        public bool Contains(KeyValuePair<TKey, TValue> item)
        {
            try
            {
                TValue value = InternalGetItem(item.Key);
                if (Comparer<TValue>.Default.Compare(value, item.Value) == 0)
                {
                    return true;
                }
                return false;
            }
            catch (KeyNotFoundException)
            {
                return false;
            }
        }

        public bool ContainsKey(TKey key)
        {
            try
            {
                InternalGetItem(key);
            }
            catch (KeyNotFoundException)
            {
                return false;
            }
            return true;
        }

        public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
        {
            for (int i = 0; i < InternalGetCount(); ++i)
            {
                TKey key = InternalGetKey(i);
                array[arrayIndex + i] = new KeyValuePair<TKey, TValue>(key, InternalGetItem(key));
            }
        }

        public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
        {
            for (int i = 0; i < InternalGetCount(); ++i)
            {
                TKey key = InternalGetKey(i);
                yield return new KeyValuePair<TKey, TValue>(key, InternalGetItem(key));
            }
        }

        public bool Remove(TKey key)
        {
            try
            {
                InternalGetItem(key);
            }
            catch (KeyNotFoundException)
            {
                return false;
            }
            InternalRemoveKey(key);
            return true;
        }

        public bool Remove(KeyValuePair<TKey, TValue> item)
        {
            return Remove(item.Key);
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            try
            {
                value = InternalGetItem(key);
                return true;
            }
            catch (KeyNotFoundException)
            {
                value = default(TValue);
                return false;
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            for (int i = 0; i < InternalGetCount(); ++i)
            {
                TKey key = InternalGetKey(i);
                yield return new KeyValuePair<TKey, TValue>(key, InternalGetItem(key));
            }
        }
    }

    abstract class BasePrivateList<T> : IList<T>
    {
        protected abstract int InternalGetCount();
        protected abstract T InternalGetItem(int index);
        protected abstract void InternalSetItem(int index, T value);
        protected abstract void InternalRemoveItem(int index);

        public int Count { get { return InternalGetCount(); } }

        public bool IsReadOnly { get { return false; } }

        public T this[int index] { get { return InternalGetItem(index); } set { InternalSetItem(index, value); } }

        public int IndexOf(T item)
        {
            int count = InternalGetCount();
            for (int i = 0; i < count; i++)
            {
                if (Comparer<T>.Default.Compare(item, InternalGetItem(i)) == 0)
                {
                    return i;
                }
            }
            return -1;
        }

        public void Insert(int index, T item)
        {
            InternalSetItem(index, item);
        }

        public void RemoveAt(int index)
        {
            InternalRemoveItem(index);
        }

        public void Add(T item)
        {
            InternalSetItem(InternalGetCount(), item);
        }

        public void Clear()
        {
            while (InternalGetCount() > 0)
            {
                InternalRemoveItem(0);
            }
        }

        public bool Contains(T item)
        {
            return IndexOf(item) >= 0;
        }

        public void CopyTo(T[] array, int arrayIndex)
        {
            for (int i = 0; i < Count; ++i)
            {
                array[i + arrayIndex] = this[i];
            }
        }

        public bool Remove(T item)
        {
            int index = IndexOf(item);
            if (index < 0) return false;
            InternalRemoveItem(index);
            return true;
        }

        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            for (int i = 0; i < Count; ++i)
            {
                yield return this[i];
            }
        }
    }

    internal static class Factories
    {
        internal delegate Azure.Communication.Calling.UnityClient.CallOptions CallOptionsFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.JoinMeetingLocator JoinMeetingLocatorFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CommonCallAgentOptions CommonCallAgentOptionsFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CommonCallAgent CommonCallAgentFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CommonIncomingCall CommonIncomingCallFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CommonCallDetails CommonCallInfoFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CommonCommunicationCall CommonCallFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallFeature CallFeatureFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallCaptions CallCaptionsFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.RawVideoFrame RawVideoFrameFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallVideoStream CallVideoStreamFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.RawAudioStreamProperties RawAudioStreamPropertiesFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.RawAudioStreamOptions RawAudioStreamOptionsFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallAudioStream CallAudioStreamFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.VideoEffect VideoEffectFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature LocalVideoStreamFeatureFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallIdentifier CallIdentifierFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.ContentSharingInfo ContentSharingInfoFactoryDelegate(IntPtr handle, bool transfer);
        internal delegate Azure.Communication.Calling.UnityClient.CallClientFeature CallClientFeatureFactoryDelegate(IntPtr handle, bool transfer);

        internal static Azure.Communication.Calling.UnityClient.CallOptions DefaultCallOptionsFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallOptions result_object;
            switch (result)
            {
                case HandleType.JoinCallOptions:
                    result_object = Azure.Communication.Calling.UnityClient.JoinCallOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.AcceptCallOptions:
                    result_object = Azure.Communication.Calling.UnityClient.AcceptCallOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.StartCallOptions:
                    result_object = Azure.Communication.Calling.UnityClient.StartCallOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.StartTeamsCallOptions:
                    result_object = Azure.Communication.Calling.UnityClient.StartTeamsCallOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.StartTeamsGroupCallOptions:
                    result_object = Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.JoinMeetingLocator DefaultJoinMeetingLocatorFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.JoinMeetingLocator result_object;
            switch (result)
            {
                case HandleType.GroupChatCallLocator:
                    result_object = Azure.Communication.Calling.UnityClient.GroupChatCallLocator.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.GroupCallLocator:
                    result_object = Azure.Communication.Calling.UnityClient.GroupCallLocator.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsMeetingCoordinatesLocator:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsMeetingCoordinatesLocator.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsMeetingLinkLocator:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsMeetingLinkLocator.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RoomCallLocator:
                    result_object = Azure.Communication.Calling.UnityClient.RoomCallLocator.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommonCallAgentOptions DefaultCommonCallAgentOptionsFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CommonCallAgentOptions result_object;
            switch (result)
            {
                case HandleType.CallAgentOptions:
                    result_object = Azure.Communication.Calling.UnityClient.CallAgentOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsCallAgentOptions:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommonCallAgent DefaultCommonCallAgentFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CommonCallAgent result_object;
            switch (result)
            {
                case HandleType.CallAgent:
                    result_object = Azure.Communication.Calling.UnityClient.CallAgent.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsCallAgent:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsCallAgent.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommonIncomingCall DefaultCommonIncomingCallFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CommonIncomingCall result_object;
            switch (result)
            {
                case HandleType.IncomingCall:
                    result_object = Azure.Communication.Calling.UnityClient.IncomingCall.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsIncomingCall:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsIncomingCall.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommonCallDetails DefaultCommonCallInfoFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CommonCallDetails result_object;
            switch (result)
            {
                case HandleType.CallInfo:
                    result_object = Azure.Communication.Calling.UnityClient.CallDetails.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsCallInfo:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsCallDetails.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommonCommunicationCall DefaultCommonCallFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CommonCommunicationCall result_object;
            switch (result)
            {
                case HandleType.Call:
                    result_object = Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsCall:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallFeature DefaultCallFeatureFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallFeature result_object;
            switch (result)
            {
                case HandleType.RecordingCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.RecordingCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TranscriptionCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.TranscriptionCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.CaptionsCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.CaptionsCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.DominantSpeakersCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RaiseHandCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.RaiseHandCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.SpotlightCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.SpotlightCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.DataChannelCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.DataChannelCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.LocalUserDiagnosticsCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.MediaStatisticsCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.ContentSharingCallFeature:
                    result_object = Azure.Communication.Calling.UnityClient.ContentSharingCallFeature.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallCaptions DefaultCallCaptionsFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallCaptions result_object;
            switch (result)
            {
                case HandleType.CommunicationCaptions:
                    result_object = Azure.Communication.Calling.UnityClient.CommunicationCaptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.TeamsCaptions:
                    result_object = Azure.Communication.Calling.UnityClient.TeamsCaptions.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.RawVideoFrame DefaultRawVideoFrameFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.RawVideoFrame result_object;
            switch (result)
            {
                case HandleType.RawVideoFrameBuffer:
                    result_object = Azure.Communication.Calling.UnityClient.RawVideoFrameBuffer.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawVideoFrameTexture:
                    result_object = Azure.Communication.Calling.UnityClient.RawVideoFrameTexture.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallVideoStream DefaultCallVideoStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallVideoStream result_object;
            switch (result)
            {
                case HandleType.LocalVideoStream:
                    result_object = Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.ScreenShareOutgoingVideoStream:
                    result_object = Azure.Communication.Calling.UnityClient.ScreenShareOutgoingVideoStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.VirtualOutgoingVideoStream:
                    result_object = Azure.Communication.Calling.UnityClient.VirtualOutgoingVideoStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawIncomingVideoStream:
                    result_object = Azure.Communication.Calling.UnityClient.RawIncomingVideoStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RemoteVideoStream:
                    result_object = Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.RawAudioStreamProperties DefaultRawAudioStreamPropertiesFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.RawAudioStreamProperties result_object;
            switch (result)
            {
                case HandleType.RawIncomingAudioStreamProperties:
                    result_object = Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawOutgoingAudioStreamProperties:
                    result_object = Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.RawAudioStreamOptions DefaultRawAudioStreamOptionsFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.RawAudioStreamOptions result_object;
            switch (result)
            {
                case HandleType.RawOutgoingAudioStreamOptions:
                    result_object = Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawIncomingAudioStreamOptions:
                    result_object = Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallAudioStream DefaultCallAudioStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallAudioStream result_object;
            switch (result)
            {
                case HandleType.LocalOutgoingAudioStream:
                    result_object = Azure.Communication.Calling.UnityClient.LocalOutgoingAudioStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RemoteIncomingAudioStream:
                    result_object = Azure.Communication.Calling.UnityClient.RemoteIncomingAudioStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawIncomingAudioStream:
                    result_object = Azure.Communication.Calling.UnityClient.RawIncomingAudioStream.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.RawOutgoingAudioStream:
                    result_object = Azure.Communication.Calling.UnityClient.RawOutgoingAudioStream.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.VideoEffect DefaultVideoEffectFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.VideoEffect result_object;
            switch (result)
            {
                case HandleType.BackgroundBlurEffect:
                    result_object = Azure.Communication.Calling.UnityClient.BackgroundBlurEffect.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.BackgroundReplacementEffect:
                    result_object = Azure.Communication.Calling.UnityClient.BackgroundReplacementEffect.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature DefaultLocalVideoStreamFeatureFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature result_object;
            switch (result)
            {
                case HandleType.LocalVideoEffectsFeature:
                    result_object = Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallIdentifier DefaultCallIdentifierFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallIdentifier result_object;
            switch (result)
            {
                case HandleType.UserCallIdentifier:
                    result_object = Azure.Communication.Calling.UnityClient.UserCallIdentifier.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.MicrosoftTeamsUserCallIdentifier:
                    result_object = Azure.Communication.Calling.UnityClient.MicrosoftTeamsUserCallIdentifier.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.PhoneNumberCallIdentifier:
                    result_object = Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier.GetOrCreateInstance(handle, transfer);
                    break;
                case HandleType.UnknownCallIdentifier:
                    result_object = Azure.Communication.Calling.UnityClient.UnknownCallIdentifier.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.ContentSharingInfo DefaultContentSharingInfoFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.ContentSharingInfo result_object;
            switch (result)
            {
                case HandleType.PowerPointInfo:
                    result_object = Azure.Communication.Calling.UnityClient.PowerPointDetails.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CallClientFeature DefaultCallClientFeatureFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            HandleType result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_get_handle_type(handle, out result));
            Azure.Communication.Calling.UnityClient.CallClientFeature result_object;
            switch (result)
            {
                case HandleType.PreCallDiagnosticsCallClientFeature:
                    result_object = Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature.GetOrCreateInstance(handle, transfer);
                    break;
                default:
                    throw new ArgumentException();
            }
            return result_object;
        }


        internal static CallOptionsFactoryDelegate CallOptionsFactory = DefaultCallOptionsFactory;
        internal static JoinMeetingLocatorFactoryDelegate JoinMeetingLocatorFactory = DefaultJoinMeetingLocatorFactory;
        internal static CommonCallAgentOptionsFactoryDelegate CommonCallAgentOptionsFactory = DefaultCommonCallAgentOptionsFactory;
        internal static CommonCallAgentFactoryDelegate CommonCallAgentFactory = DefaultCommonCallAgentFactory;
        internal static CommonIncomingCallFactoryDelegate CommonIncomingCallFactory = DefaultCommonIncomingCallFactory;
        internal static CommonCallInfoFactoryDelegate CommonCallInfoFactory = DefaultCommonCallInfoFactory;
        internal static CommonCallFactoryDelegate CommonCallFactory = DefaultCommonCallFactory;
        internal static CallFeatureFactoryDelegate CallFeatureFactory = DefaultCallFeatureFactory;
        internal static CallCaptionsFactoryDelegate CallCaptionsFactory = DefaultCallCaptionsFactory;
        internal static RawVideoFrameFactoryDelegate RawVideoFrameFactory = DefaultRawVideoFrameFactory;
        internal static CallVideoStreamFactoryDelegate CallVideoStreamFactory = DefaultCallVideoStreamFactory;
        internal static RawAudioStreamPropertiesFactoryDelegate RawAudioStreamPropertiesFactory = DefaultRawAudioStreamPropertiesFactory;
        internal static RawAudioStreamOptionsFactoryDelegate RawAudioStreamOptionsFactory = DefaultRawAudioStreamOptionsFactory;
        internal static CallAudioStreamFactoryDelegate CallAudioStreamFactory = DefaultCallAudioStreamFactory;
        internal static VideoEffectFactoryDelegate VideoEffectFactory = DefaultVideoEffectFactory;
        internal static LocalVideoStreamFeatureFactoryDelegate LocalVideoStreamFeatureFactory = DefaultLocalVideoStreamFeatureFactory;
        internal static CallIdentifierFactoryDelegate CallIdentifierFactory = DefaultCallIdentifierFactory;
        internal static ContentSharingInfoFactoryDelegate ContentSharingInfoFactory = DefaultContentSharingInfoFactory;
        internal static CallClientFeatureFactoryDelegate CallClientFeatureFactory = DefaultCallClientFeatureFactory;

        internal static Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator JoinTeamsMeetingLocatorFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.JoinMeetingLocator result = JoinMeetingLocatorFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.OutgoingVideoStream OutgoingVideoStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallVideoStream result = CallVideoStreamFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.OutgoingVideoStream result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.RawOutgoingVideoStream RawOutgoingVideoStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallVideoStream result = CallVideoStreamFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.RawOutgoingVideoStream result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.IncomingVideoStream IncomingVideoStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallVideoStream result = CallVideoStreamFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.IncomingVideoStream result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.OutgoingAudioStream OutgoingAudioStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallAudioStream result = CallAudioStreamFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.OutgoingAudioStream result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.IncomingAudioStream IncomingAudioStreamFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallAudioStream result = CallAudioStreamFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.IncomingAudioStream result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

        internal static Azure.Communication.Calling.UnityClient.StartTeamsCallOptions StartTeamsCallOptionsFactory(IntPtr handle, bool transfer)
        {
            if (handle == IntPtr.Zero)
            {
                return null;
            }

            Azure.Communication.Calling.UnityClient.CallOptions result = CallOptionsFactory(handle, transfer);
            if (result is Azure.Communication.Calling.UnityClient.StartTeamsCallOptions result_object)
            {
                return result_object;
            }

            throw new ArgumentException();
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    internal struct MarshalArray
    {
        public IntPtr Data;
        public int Count;
    }

    /// <summary>
    /// Additional failed states for Azure Communication Services
    /// </summary>
    public enum CallingCommunicationErrors : int
    {
        /// <summary>
        /// No errors
        /// </summary>
        None = 0,
        /// <summary>
        /// No Audio permissions available.
        /// </summary>
        NoAudioPermission = 1,
        /// <summary>
        /// No Video permissions available.
        /// </summary>
        NoVideoPermission = 2,
        /// <summary>
        /// No Video and Audio permissions available.
        /// </summary>
        NoAudioAndVideoPermission = 3,
        /// <summary>
        /// Failed to process push notification payload.
        /// </summary>
        ReceivedInvalidPushNotificationPayload = 4,
        /// <summary>
        /// Received empty/invalid notification payload.
        /// </summary>
        FailedToProcessPushNotificationPayload = 8,
        /// <summary>
        /// Received invalid group Id.
        /// </summary>
        InvalidGuidGroupId = 16,
        /// <summary>
        /// Push notification device registration token is invalid.
        /// </summary>
        InvalidPushNotificationDeviceRegistrationToken = 32,
        /// <summary>
        /// Cannot create multiple renders for same device or stream.
        /// </summary>
        MultipleRenderersNotSupported = 64,
        /// <summary>
        /// Renderer doesn't support creating multiple views.
        /// </summary>
        MultipleViewsNotSupported = 128,
        /// <summary>
        /// The local video stream on the video options is invalid.
        /// </summary>
        InvalidLocalVideoStreamForVideoOptions = 256,
        /// <summary>
        /// No multiple connections with same identity per app is allowed.
        /// </summary>
        NoMultipleConnectionsWithSameIdentity = 512,
        /// <summary>
        /// Invalid server call Id because it's empty or has invalid values.
        /// </summary>
        InvalidServerCallId = 1024,
        /// <summary>
        /// Failure while switch source on a local video stream.
        /// </summary>
        LocalVideoStreamSwitchSourceFailure = 2048,
        /// <summary>
        /// Attempt to answer an incoming call that has been unplaced.
        /// </summary>
        IncomingCallAlreadyUnplaced = 4096,
        /// <summary>
        /// Invalid meeting link provided.
        /// </summary>
        InvalidMeetingLink = 16384,
        /// <summary>
        /// Attempt to add participant to a unconnected call.
        /// </summary>
        ParticipantAddedToUnconnectedCall = 32768,
        /// <summary>
        /// Participant already added to the call.
        /// </summary>
        ParticipantAlreadyAddedToCall = 65536,
        /// <summary>
        /// Call feature extension not found.
        /// </summary>
        CallFeatureExtensionNotFound = 131072,
        /// <summary>
        /// User display name is longer than the supported length.
        /// </summary>
        DisplayNameLengthLongerThanSupported = 8388608,
        /// <summary>
        /// Cannot hangup for everyone in a non-hostless call
        /// </summary>
        FailedToHangupForEveryone = 16777216,
        /// <summary>
        /// Attempted to added a participant with an invalid type to the call
        /// </summary>
        InvalidParticipantAddedToCall = 536870912,
        /// <summary>
        /// Feature extension not found.
        /// </summary>
        FeatureExtensionNotFound = 134217728,
        /// <summary>
        /// Video effect not supported by device
        /// </summary>
        VideoEffectNotSupported = 268435456,
        /// <summary>
        /// Sending Raw Audio Buffer Failed
        /// </summary>
        FailedToSendRawAudioBuffer = 5,
        /// <summary>
        /// Cannot mute virtual audio stream
        /// </summary>
        CannotMuteVirtualAudioStream = 6,
        /// <summary>
        /// Virtual tried to register an already registered device id.
        /// </summary>
        DuplicateDeviceId = 262144,
        /// <summary>
        /// App is expected to register a delegation to complete the operation.
        /// </summary>
        DelegateIsRequired = 524288,
        /// <summary>
        /// Virtual device is not started.
        /// </summary>
        VirtualDeviceNotStarted = 1048576,
        /// <summary>
        /// Invalid video stream combination provided.
        /// </summary>
        InvalidVideoStreamCombination = 4194304,
        /// <summary>
        /// No multiple connections with different cloud type per app is allowed.
        /// </summary>
        NoMultipleConnectionsWithDifferentClouds = 33554432,
        /// <summary>
        /// No active audio stream to stop.
        /// </summary>
        NoActiveAudioStreamToStop = 67108864,
        /// <summary>
        /// Invalid video format set
        /// </summary>
        InvalidVideoFormat = 257,
        /// <summary>
        /// The buffer does not match the video format set or does contain valid data
        /// </summary>
        InvalidBuffer = 258,
        /// <summary>
        /// There was a problem while sending the video frame
        /// </summary>
        RawVideoFrameNotSent = 259,
        /// <summary>
        /// The selected video resolution is not valid for the virtual video
        /// </summary>
        UnsupportedVideoStreamResolution = 260,
        /// <summary>
        /// Start captions failed
        /// </summary>
        CaptionsFailedToStart = 261,
        /// <summary>
        /// Start captions failed, captions is disabled by configurations
        /// </summary>
        CaptionsDisabledByConfigurations = 262,
        /// <summary>
        /// Start captions failed, captions policy is disabled
        /// </summary>
        CaptionsPolicyDisabled = 263,
        /// <summary>
        /// Captions are not active
        /// </summary>
        CaptionsNotActive = 264,
        /// <summary>
        /// The requested language is not supported
        /// </summary>
        CaptionsRequestedLanguageNotSupported = 265,
        /// <summary>
        /// Set caption language failed
        /// </summary>
        FailedToSetCaptionLanguage = 266,
        /// <summary>
        /// Set caption language is disabled
        /// </summary>
        SetCaptionLanguageDisabled = 267,
        /// <summary>
        /// Set caption language failed, teams premium license needed
        /// </summary>
        SetCaptionLanguageTeamsPremiumLicenseNeeded = 268,
        /// <summary>
        /// Failed to set spoken language
        /// </summary>
        CaptionsFailedToSetSpokenLanguage = 269,
        /// <summary>
        /// Set spoken language is disabled
        /// </summary>
        CaptionsSetSpokenLanguageDisabled = 270,
        /// <summary>
        /// Get captions failed, call should be connected
        /// </summary>
        GetCaptionsFailedCallStateNotConnected = 271,
        /// <summary>
        /// Get captions failed
        /// </summary>
        GetCaptionsFailed = 272,
        /// <summary>
        /// Spotlight failed, spotlight feature is disabled by configurations
        /// </summary>
        SpotlightDisabledByConfigurations = 273,
        /// <summary>
        /// Max supported spotlight reached
        /// </summary>
        MaxSpotlightReached = 274,
        /// <summary>
        /// Spotlight Input List empty
        /// </summary>
        SpotlightParticipantEmptyList = 275,
        /// <summary>
        /// Signaling Service Status Code
        /// </summary>
        SignalingOperationFailed = 276,
        /// <summary>
        /// Teams Interop is disabled while using proxy
        /// </summary>
        ProxyNotAvailableForTeams = 277,
        /// <summary>
        /// Forbidden to mute others
        /// </summary>
        MuteOthersForbidden = 278,
        /// <summary>
        /// Internal server error occurred when muting others
        /// </summary>
        MuteOthersInternalServerError = 279,
        /// <summary>
        /// Not found exception occurred when muting others
        /// </summary>
        MuteOthersNotFound = 280,
        /// <summary>
        /// Lobby is disabled by configurations
        /// </summary>
        LobbyDisabledByConfigurations = 281,
        /// <summary>
        /// Current conversation type does not support Lobby
        /// </summary>
        LobbyConversationTypeNotSupported = 282,
        /// <summary>
        /// Current meeting role does not have permission to admit/reject user from Lobby
        /// </summary>
        LobbyMeetingRoleNotAllowed = 283,
        /// <summary>
        /// Participant is not exist in the Lobby
        /// </summary>
        LobbyParticipantNotExist = 284,
        /// <summary>
        /// Remove participant operation failure
        /// </summary>
        RemoveParticipantOperationFailure = 285,
        /// <summary>
        /// Music mode not enabled
        /// </summary>
        MusicModeNotEnabled = 286,
        /// <summary>
        /// Survey Rating Scale Invalid Bounds
        /// </summary>
        SurveyRatingScaleOutOfBounds = 287,
        /// <summary>
        /// Survey Rating Scale Invalid Threshold
        /// </summary>
        SurveyRatingScaleInvalidThreshold = 288,
        /// <summary>
        /// Survey Score Out of Bounds
        /// </summary>
        SurveyScoreOutOfBounds = 289,
        /// <summary>
        /// Survey Double Submission Not Allowed
        /// </summary>
        SurveyDoubleSubmissionNotAllowed = 290,
        /// <summary>
        /// Admit/AdmitAll operation failure
        /// </summary>
        LobbyAdmitOperationFailure = 291,
        /// <summary>
        /// Set media proxy failed
        /// </summary>
        FailedToSetMediaProxy = 292,
        /// <summary>
        /// Invalid token provider given.
        /// </summary>
        InvalidTokenProvider = 293,
        /// <summary>
        /// Invalid report interval for Media Statistics Call Feature.
        /// </summary>
        MediaStatisticsInvalidReportInterval = 294,
        /// <summary>
        /// Start Data Channel Call Feature failed
        /// </summary>
        DataChannelFailedToStart = 295,
        /// <summary>
        /// Data Channel sender already closed
        /// </summary>
        DataChannelSenderClosed = 296,
        /// <summary>
        /// Random data channel id not available
        /// </summary>
        DataChannelRandomIdNotAvailable = 297,
        /// <summary>
        /// Data Channel message size over the limit
        /// </summary>
        DataChannelMessageSizeOverLimit = 298,
        /// <summary>
        /// Data Channel message failed to send due to bandwidth
        /// </summary>
        DataChannelMessageFailureForBandwidth = 299,
        /// <summary>
        /// Start Data Channel message failed to send due to traffic limit
        /// </summary>
        DataChannelMessageFailureForTrafficLimit = 300,
    }

    /// <summary>
    /// Type of outgoing video stream is being used on the call
    /// </summary>
    public enum VideoStreamKind : int
    {
        /// <summary>
        /// Remote
        /// </summary>
        RemoteIncoming = 1,
        /// <summary>
        /// Raw
        /// </summary>
        RawIncoming = 2,
        /// <summary>
        /// Local
        /// </summary>
        LocalOutgoing = 3,
        /// <summary>
        /// Video
        /// </summary>
        VirtualOutgoing = 4,
        /// <summary>
        /// Screen share
        /// </summary>
        ScreenShareOutgoing = 5,
    }

    /// <summary>
    /// Local and Remote Video Stream types
    /// </summary>
    public enum VideoStreamSourceKind : int
    {
        /// <summary>
        /// Video
        /// </summary>
        Video = 1,
        /// <summary>
        /// Screen share
        /// </summary>
        ScreenSharing = 2,
    }

    /// <summary>
    /// Defines possible running states for a video stream
    /// </summary>
    public enum VideoStreamState : int
    {
        /// <summary>
        /// Available
        /// </summary>
        Available = 0,
        /// <summary>
        /// Started
        /// </summary>
        Started = 1,
        /// <summary>
        /// Stopping
        /// </summary>
        Stopping = 2,
        /// <summary>
        /// Stopped
        /// </summary>
        Stopped = 3,
        /// <summary>
        /// NotAvailable
        /// </summary>
        NotAvailable = 4,
    }

    /// <summary>
    /// Defines direction of the CallAudioStream or CallVideoStream
    /// </summary>
    public enum StreamDirection : int
    {
        /// <summary>
        /// Incoming
        /// </summary>
        Incoming = 0,
        /// <summary>
        /// Outgoing
        /// </summary>
        Outgoing = 1,
    }

    /// <summary>
    /// Informs how media frames will be available for encoding or decoding.
    /// </summary>
    public enum RawVideoFrameKind : int
    {
        Buffer = 0,
        Texture = 1,
    }

    /// <summary>
    /// Specifies the noise suppression modes supported by outgoing audio filters
    /// </summary>
    public enum NoiseSuppressionMode : int
    {
        Off = 0,
        Auto = 1,
        Low = 2,
        High = 3,
    }

    /// <summary>
    /// Describes different types of Push notifications supported
    /// </summary>
    public enum CallPushNotificationEventKind : int
    {
        IncomingCall = 107,
        IncomingGroupCall = 109,
        IncomingPstnCall = 111,
        StopRinging = 110,
    }

    /// <summary>
    /// The role of an user in the Call.
    /// </summary>
    public enum CallParticipantRole : int
    {
        /// <summary>
        /// Uninitialized
        /// </summary>
        Uninitialized = 0,
        /// <summary>
        /// Attendee
        /// </summary>
        Attendee = 1,
        /// <summary>
        /// Consumer
        /// </summary>
        Consumer = 2,
        /// <summary>
        /// Presenter
        /// </summary>
        Presenter = 3,
        /// <summary>
        /// Organizer
        /// </summary>
        Organizer = 4,
        /// <summary>
        /// CoOrganizer
        /// </summary>
        CoOrganizer = 5,
    }

    /// <summary>
    /// State of a participant in the call
    /// </summary>
    public enum ParticipantState : int
    {
        /// <summary>
        /// Idle
        /// </summary>
        Idle = 0,
        /// <summary>
        /// Early Media
        /// </summary>
        EarlyMedia = 1,
        /// <summary>
        /// Connecting
        /// </summary>
        Connecting = 2,
        /// <summary>
        /// Connected
        /// </summary>
        Connected = 3,
        /// <summary>
        /// On Hold
        /// </summary>
        Hold = 4,
        /// <summary>
        /// In Lobby
        /// </summary>
        InLobby = 5,
        /// <summary>
        /// Disconnected
        /// </summary>
        Disconnected = 6,
        /// <summary>
        /// Ringing
        /// </summary>
        Ringing = 7,
    }

    /// <summary>
    /// Type of audio device
    /// </summary>
    public enum AudioDeviceType : int
    {
        /// <summary>
        /// Audio device is a microphone
        /// </summary>
        Microphone = 0,
        /// <summary>
        /// Audio device is a speaker
        /// </summary>
        Speaker = 1,
    }

    /// <summary>
    /// Direction of the camera
    /// </summary>
    public enum CameraFacing : int
    {
        /// <summary>
        /// Unknown
        /// </summary>
        Unknown = 0,
        /// <summary>
        /// External device
        /// </summary>
        External = 1,
        /// <summary>
        /// Front camera
        /// </summary>
        Front = 2,
        /// <summary>
        /// Back camera
        /// </summary>
        Back = 3,
        /// <summary>
        /// Panoramic camera
        /// </summary>
        Panoramic = 4,
        /// <summary>
        /// Left front camera
        /// </summary>
        LeftFront = 5,
        /// <summary>
        /// Right front camera
        /// </summary>
        RightFront = 6,
    }

    /// <summary>
    /// Describes the video device type
    /// </summary>
    public enum VideoDeviceKind : int
    {
        /// <summary>
        /// Unknown type of video device
        /// </summary>
        Unknown = 0,
        /// <summary>
        /// USB Camera Video Device
        /// </summary>
        UsbCamera = 1,
        /// <summary>
        /// Capture Adapter Video Device
        /// </summary>
        CaptureAdapter = 2,
        /// <summary>
        /// Virtual Video Device
        /// </summary>
        Virtual = 3,
    }

    /// <summary>
    /// Represents a diagnostic quality scale.
    /// </summary>
    public enum DiagnosticQuality : int
    {
        /// <summary>
        /// Unknown
        /// </summary>
        Unknown = 0,
        /// <summary>
        /// Good
        /// </summary>
        Good = 1,
        /// <summary>
        /// Poor
        /// </summary>
        Poor = 2,
        /// <summary>
        /// Bad
        /// </summary>
        Bad = 3,
    }

    /// <summary>
    /// Type of Communication
    /// </summary>
    public enum CommunicationCallKind : int
    {
        /// <summary>
        /// Call
        /// </summary>
        Call = 0,
        /// <summary>
        /// TeamsCall
        /// </summary>
        TeamsCall = 1,
    }

    /// <summary>
    /// State of a call
    /// </summary>
    public enum CallState : int
    {
        /// <summary>
        /// None - disposed or applicable very early in lifetime of a call
        /// </summary>
        None = 0,
        /// <summary>
        /// Early Media
        /// </summary>
        EarlyMedia = 1,
        /// <summary>
        /// Call is being connected
        /// </summary>
        Connecting = 3,
        /// <summary>
        /// Call is ringing
        /// </summary>
        Ringing = 4,
        /// <summary>
        /// Call is connected
        /// </summary>
        Connected = 5,
        /// <summary>
        /// Call held by local participant
        /// </summary>
        LocalHold = 6,
        /// <summary>
        /// Call is being disconnected
        /// </summary>
        Disconnecting = 7,
        /// <summary>
        /// Call is disconnected
        /// </summary>
        Disconnected = 8,
        /// <summary>
        /// In Lobby
        /// </summary>
        InLobby = 9,
        /// <summary>
        /// Call held by a remote participant
        /// </summary>
        RemoteHold = 10,
    }

    /// <summary>
    /// DTMF (Dual-Tone Multi-Frequency) tone for PSTN calls
    /// </summary>
    public enum DtmfTone : int
    {
        /// <summary>
        /// Zero
        /// </summary>
        Zero = 0,
        /// <summary>
        /// One
        /// </summary>
        One = 1,
        /// <summary>
        /// Two
        /// </summary>
        Two = 2,
        /// <summary>
        /// Three
        /// </summary>
        Three = 3,
        /// <summary>
        /// Four
        /// </summary>
        Four = 4,
        /// <summary>
        /// Five
        /// </summary>
        Five = 5,
        /// <summary>
        /// Six
        /// </summary>
        Six = 6,
        /// <summary>
        /// Seven
        /// </summary>
        Seven = 7,
        /// <summary>
        /// Eight
        /// </summary>
        Eight = 8,
        /// <summary>
        /// Nine
        /// </summary>
        Nine = 9,
        /// <summary>
        /// Star
        /// </summary>
        Star = 10,
        /// <summary>
        /// Pound
        /// </summary>
        Pound = 11,
        /// <summary>
        /// A
        /// </summary>
        A = 12,
        /// <summary>
        /// B
        /// </summary>
        B = 13,
        /// <summary>
        /// C
        /// </summary>
        C = 14,
        /// <summary>
        /// D
        /// </summary>
        D = 15,
        /// <summary>
        /// Flash
        /// </summary>
        Flash = 16,
    }

    /// <summary>
    /// Direction of a Call
    /// </summary>
    public enum CallDirection : int
    {
        /// <summary>
        /// Outgoing call
        /// </summary>
        Outgoing = 1,
        /// <summary>
        /// Incoming call
        /// </summary>
        Incoming = 2,
    }

    /// <summary>
    /// Indicates the state of recording
    /// </summary>
    public enum RecordingState : int
    {
        /// <summary>
        /// Recording started
        /// </summary>
        Started = 0,
        /// <summary>
        /// Recording paused
        /// </summary>
        Paused = 1,
        /// <summary>
        /// Recording stopped
        /// </summary>
        Ended = 2,
    }

    /// <summary>
    /// Indicates the active captions type
    /// </summary>
    public enum CaptionsType : int
    {
        /// <summary>
        /// Teams Captions.
        /// </summary>
        TeamsCaptions = 0,
        /// <summary>
        /// Communication Captions.
        /// </summary>
        CommunicationCaptions = 1,
    }

    /// <summary>
    /// Priority options for data channel.
    /// </summary>
    public enum DataChannelPriority : int
    {
        Normal = 0,
        High = 1,
    }

    /// <summary>
    /// Reliability options for data channel.
    /// </summary>
    public enum DataChannelReliability : int
    {
        Lossy = 0,
        Durable = 1,
    }

    /// <summary>
    /// Defines possible running states for content sharing
    /// </summary>
    public enum ContentSharingState : int
    {
        Started = 0,
        Stopped = 1,
    }

    public enum ContentSharingType : int
    {
        None = 0,
        Powerpoint = 1,
    }

    /// <summary>
    /// Indicates the captions result type
    /// </summary>
    public enum CaptionsResultType : int
    {
        /// <summary>
        /// Text contains partially spoken sentence.
        /// </summary>
        Partial = 0,
        /// <summary>
        /// Sentence has been completely transcribed.
        /// </summary>
        Final = 1,
    }

    /// <summary>
    /// Informs how the pixels of the video frame is encoded.
    /// </summary>
    public enum VideoStreamPixelFormat : int
    {
        /// <summary>
        /// Pixel format is encoded as single plane with 32 bits per pixels, 8 bits per channel, ordered as blue, followed by green, followed by red and discarding the last 8 bits.
        /// </summary>
        Bgrx = 0,
        /// <summary>
        /// Pixel format is encoded as single plane with 24 bits per pixels, 8 bits per channel, ordered as blue, followed by green, followed by red.
        /// </summary>
        Bgr24 = 1,
        /// <summary>
        /// Pixel format is encoded as single plane with 32 bits per pixels, 8 bits per channel, ordered as blue, followed by green, followed by red and discarding the last 8 bits.
        /// </summary>
        Rgbx = 2,
        /// <summary>
        /// Pixel format is encoded as single plane with 32 bits per pixels, 8 bits per channel, ordered as blue, followed by green, followed by red and alpha as 8 bits each. Alpha is discarded.
        /// </summary>
        Rgba = 3,
        /// <summary>
        /// Pixel format  is encoded as YUV 4:2:0 with a plane of 8 bit Y samples, followed by an interleaved U/V plane containing 8 bit 2x2 sub-sampled color difference samples.
        /// </summary>
        Nv12 = 4,
        /// <summary>
        /// Pixel format is encoded as YUV 4:2:0 with a plane of 8 bit ordered by Y, followed by a U plane, followed by a V plane.
        /// </summary>
        I420 = 5,
    }

    /// <summary>
    /// Represents the list of supported video resolution for VirtualOutgoingVideoStream
    /// </summary>
    public enum VideoStreamResolution : int
    {
        /// <summary>
        /// Represents unknown resolution
        /// </summary>
        Unknown = 0,
        /// <summary>
        /// Represents 1920x1080 resolution
        /// </summary>
        P1080 = 1,
        /// <summary>
        /// Represents 1280x720 resolution
        /// </summary>
        P720 = 2,
        /// <summary>
        /// Represents 960x540 resolution
        /// </summary>
        P540 = 3,
        /// <summary>
        /// Represents 858x480 resolution
        /// </summary>
        P480 = 4,
        /// <summary>
        /// Represents 640x360 resolution
        /// </summary>
        P360 = 5,
        /// <summary>
        /// Represents 480x270 resolution
        /// </summary>
        P270 = 6,
        /// <summary>
        /// Represents 352x240 resolution
        /// </summary>
        P240 = 7,
        /// <summary>
        /// Represents 320x180 resolution
        /// </summary>
        P180 = 8,
        /// <summary>
        /// Represents 1920x1080 resolution
        /// </summary>
        FullHd = 9,
        /// <summary>
        /// Represents 1280x720 resolution
        /// </summary>
        Hd = 10,
        /// <summary>
        /// Represents 640x480 resolution
        /// </summary>
        Vga = 11,
        /// <summary>
        /// Represents 320x240 resolution
        /// </summary>
        Qvga = 12,
    }

    /// <summary>
    /// Defines possible running states for an audio stream
    /// </summary>
    public enum AudioStreamState : int
    {
        /// <summary>
        /// Started
        /// </summary>
        Started = 0,
        /// <summary>
        /// Stopped
        /// </summary>
        Stopped = 1,
    }

    /// <summary>
    /// Specifies the sample rates supported by the RawAudioStreams entities
    /// </summary>
    public enum AudioStreamSampleRate : int
    {
        /// <summary>
        /// 16000 Hz
        /// </summary>
        Hz_16000 = 0,
        /// <summary>
        /// 22050 Hz
        /// </summary>
        Hz_22050 = 1,
        /// <summary>
        /// 24000 Hz
        /// </summary>
        Hz_24000 = 2,
        /// <summary>
        /// 32000 Hz
        /// </summary>
        Hz_32000 = 3,
        /// <summary>
        /// 44100 Hz
        /// </summary>
        Hz_44100 = 4,
        /// <summary>
        /// 48000 Hz
        /// </summary>
        Hz_48000 = 5,
    }

    /// <summary>
    /// Specifies the channel modes supported by the RawAudioStreams entities
    /// </summary>
    public enum AudioStreamChannelMode : int
    {
        /// <summary>
        /// Mono Channel Audio
        /// </summary>
        Mono = 0,
        /// <summary>
        /// Stereo Channel Audio
        /// </summary>
        Stereo = 1,
    }

    /// <summary>
    /// Specifies the audio formats supported by the RawAudioStreams entities
    /// </summary>
    public enum AudioStreamFormat : int
    {
        /// <summary>
        /// 16 BIT PCM bit-depth
        /// </summary>
        Pcm16Bit = 0,
    }

    /// <summary>
    /// Specifies the data per block in milliseconds for buffers supported by the RawOutgoingAudioStream entities
    /// </summary>
    public enum AudioStreamBufferDuration : int
    {
        /// <summary>
        /// 10 ms blocks
        /// </summary>
        Ms10 = 0,
        /// <summary>
        /// 20 ms blocks
        /// </summary>
        Ms20 = 1,
    }

    /// <summary>
    /// Type of outgoing audio stream is being used on the call
    /// </summary>
    public enum AudioStreamKind : int
    {
        /// <summary>
        /// Remote Incoming
        /// </summary>
        RemoteIncoming = 1,
        /// <summary>
        /// Raw Incoming
        /// </summary>
        RawIncoming = 2,
        /// <summary>
        /// Local Outgoing
        /// </summary>
        LocalOutgoing = 3,
        /// <summary>
        /// Virtual Outgoing
        /// </summary>
        VirtualOutgoing = 4,
    }

    public enum CallCloudEnvironment : int
    {
        Public = 0,
        Dod = 1,
        Gcch = 2,
    }

    /// <summary>
    /// List of used permissions to place a call
    /// </summary>
    public enum DevicePermissionKind : int
    {
        Camera = 0,
        Speaker = 1,
        Microphone = 2,
    }

    internal enum HandleType : int
    {
        Unknown = 0,
        JoinCallOptions = 1,
        AcceptCallOptions = 2,
        StartCallOptions = 3,
        GroupChatCallLocator = 4,
        GroupCallLocator = 5,
        TeamsMeetingCoordinatesLocator = 6,
        TeamsMeetingLinkLocator = 7,
        CallAgentOptions = 8,
        CallAgent = 9,
        IncomingCall = 10,
        CallInfo = 11,
        Call = 12,
        RecordingCallFeature = 13,
        TranscriptionCallFeature = 14,
        CommunicationCaptions = 15,
        TeamsCaptions = 16,
        CaptionsCallFeature = 17,
        DominantSpeakersCallFeature = 18,
        RaiseHandCallFeature = 19,
        SpotlightCallFeature = 20,
        RawVideoFrameBuffer = 21,
        RawVideoFrameTexture = 22,
        LocalVideoStream = 23,
        ScreenShareOutgoingVideoStream = 24,
        VirtualOutgoingVideoStream = 25,
        RawIncomingVideoStream = 26,
        RemoteVideoStream = 27,
        RoomCallLocator = 28,
        RawIncomingAudioStreamProperties = 29,
        RawOutgoingAudioStreamProperties = 30,
        RawOutgoingAudioStreamOptions = 31,
        RawIncomingAudioStreamOptions = 32,
        LocalOutgoingAudioStream = 33,
        RemoteIncomingAudioStream = 34,
        RawIncomingAudioStream = 35,
        RawOutgoingAudioStream = 36,
        BackgroundBlurEffect = 37,
        BackgroundReplacementEffect = 38,
        LocalVideoEffectsFeature = 39,
        DataChannelCallFeature = 40,
        UserCallIdentifier = 41,
        MicrosoftTeamsUserCallIdentifier = 42,
        PhoneNumberCallIdentifier = 43,
        UnknownCallIdentifier = 44,
        StartTeamsCallOptions = 45,
        StartTeamsGroupCallOptions = 46,
        TeamsCallAgentOptions = 47,
        TeamsCallAgent = 48,
        TeamsIncomingCall = 49,
        TeamsCallInfo = 50,
        TeamsCall = 51,
        LocalUserDiagnosticsCallFeature = 52,
        MediaStatisticsCallFeature = 53,
        ContentSharingCallFeature = 54,
        PowerPointInfo = 55,
        PreCallDiagnosticsCallClientFeature = 56,
    }

    internal delegate void CallVideoStreamStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs e);

    /// <summary>
    /// Informs the sdk that a session requires an updated authentication token.
    /// </summary>
    /// <param name="sender">
    /// The object that provides the updated authentication token.
    /// </param>
    internal delegate void TokenRequestedDelegate(Azure.Communication.Calling.UnityClient.InternalTokenProvider sender);

    internal delegate void RemoteParticipantStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RemoteParticipantIsMutedChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RemoteParticipantIsSpeakingChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RemoteParticipantDisplayNameChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RemoteParticipantRoleChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RemoteParticipantVideoStreamStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs e);

    internal delegate void CallAgentCallsUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs e);

    internal delegate void CallAgentIncomingCallReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs e);

    internal delegate void TeamsCallAgentCallsUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs e);

    internal delegate void TeamsCallAgentIncomingCallReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs e);

    internal delegate void DeviceManagerMicrophonesUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs e);

    internal delegate void DeviceManagerSpeakersUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs e);

    internal delegate void DeviceManagerCamerasUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs e);

    internal delegate void PreCallDiagnosticsCallClientFeaturePreCallDiagnosticsReadyEventHandler(object sender, Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs e);

    internal delegate void NetworkDiagnosticsNetworkUnavailableChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void NetworkDiagnosticsNetworkRelaysUnreachableChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void NetworkDiagnosticsNetworkReconnectionQualityChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs e);

    internal delegate void NetworkDiagnosticsNetworkReceiveQualityChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs e);

    internal delegate void NetworkDiagnosticsNetworkSendQualityChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs e);

    internal delegate void MediaDiagnosticsSpeakerNotFunctioningChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsSpeakerBusyChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsSpeakerMutedChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsSpeakerVolumeZeroChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsNoSpeakerDevicesAvailableChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsSpeakingWhileMicrophoneIsMutedChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsNoMicrophoneDevicesAvailableChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsMicrophoneBusyChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsCameraFrozenChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsCameraStartFailedChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsCameraStartTimedOutChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsMicrophoneNotFunctioningChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsMicrophoneMutedUnexpectedlyChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    internal delegate void MediaDiagnosticsCameraPermissionDeniedChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs e);

    public delegate void IncomingCallReceivedDelegate(object sender, Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs args);

    internal delegate void CallLobbyLobbyParticipantsUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs e);

    internal delegate void RecordingCallFeatureIsRecordingActiveChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RecordingCallFeatureRecordingUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs e);

    internal delegate void TranscriptionCallFeatureIsTranscriptionActiveChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void DominantSpeakersCallFeatureDominantSpeakersChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CaptionsCallFeatureActiveCaptionsTypeChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void RaiseHandCallFeatureHandRaisedEventHandler(object sender, Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs e);

    internal delegate void RaiseHandCallFeatureHandLoweredEventHandler(object sender, Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs e);

    internal delegate void DataChannelCallFeatureActiveChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void DataChannelCallFeatureReceiverCreatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs e);

    internal delegate void DataChannelReceiverMessageReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void DataChannelReceiverClosedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void MediaStatisticsCallFeatureReportReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs e);

    public delegate void SpotlightChangedDelegate(object sender, Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs args);

    internal delegate void ContentSharingCallFeatureContentSharingDetailsChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void ContentSharingCallFeatureStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommunicationCaptionsActiveSpokenLanguageChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommunicationCaptionsCaptionsEnabledChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommunicationCaptionsCaptionsReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs e);

    internal delegate void TeamsCaptionsCaptionsEnabledChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void TeamsCaptionsActiveSpokenLanguageChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void TeamsCaptionsActiveCaptionLanguageChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void TeamsCaptionsCaptionsReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs e);

    internal delegate void RawOutgoingVideoStreamFormatChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs e);

    internal delegate void LocalVideoEffectsFeatureVideoEffectEnabledEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs e);

    internal delegate void LocalVideoEffectsFeatureVideoEffectDisabledEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs e);

    internal delegate void LocalVideoEffectsFeatureVideoEffectErrorEventHandler(object sender, Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs e);

    internal delegate void RawIncomingVideoStreamRawVideoFrameReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs e);

    internal delegate void CallAudioStreamStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs e);

    internal delegate void RawIncomingAudioStreamMixedAudioBufferReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs e);

    internal delegate void RawIncomingAudioStreamUnmixedAudioBufferReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs e);

    internal delegate void CallTokenRefreshOptionsTokenRefreshRequestedEventHandler(object sender, Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs e);

    public delegate void TeamsIncomingCallReceivedDelegate(object sender, Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs args);

    internal delegate void CommonCallIdChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallRoleChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallRemoteParticipantsUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs e);

    internal delegate void CommonCallOutgoingAudioStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallMutedByOthersEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallIncomingAudioStateChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonCallTotalParticipantCountChangedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    internal delegate void CommonIncomingCallCallEndedEventHandler(object sender, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs e);

    public delegate void CommonIncomingCallReceivedDelegate(object sender, Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs args);

    internal delegate void CommonCallAgentCommonCallsUpdatedEventHandler(object sender, Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs e);

    internal delegate void CommonCallAgentCommonIncomingCallReceivedEventHandler(object sender, Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs e);

    /// <summary>
    /// General purpose Exception class to capture all exceptions thrown from the Azure Communication Services for Calling
    /// </summary>
    public class CallingCommunicationException : Exception
    {
        /// <summary>Creates a new instance of the <see cref='CallingCommunicationException'/> class.</summary>
        public CallingCommunicationException()
        {
            this.ErrorCode = default(CallingCommunicationErrors);
        }

        /// <summary>Creates a new instance of the <see cref='CallingCommunicationException'/> class.</summary>
        /// <param name='code'>Error code for this exception.</param>
        public CallingCommunicationException(CallingCommunicationErrors code)
        {
            this.ErrorCode = code;
        }

        /// <summary>Creates a new instance of the <see cref='CallingCommunicationException'/> class.</summary>
        /// <param name='code'>Error code for this exception.</param>
        /// <param name='message'>Plain text error message for this exception.</param>
        public CallingCommunicationException(CallingCommunicationErrors code, string message) : base(message)
        {
            this.ErrorCode = code;
        }

        /// <summary>Creates a new instance of the <see cref='CallingCommunicationException'/> class.</summary>
        /// <param name='code'>Error code for this exception.</param>
        /// <param name='message'>Plain text error message for this exception.</param>
        /// <param name='requestCorrelationVector'>Request correlation vector for this exception.</param>
        /// <param name='responseCorrelationVector'>Response correlation vector for this exception.</param>
        public CallingCommunicationException(CallingCommunicationErrors code, string message, string requestCorrelationVector, string responseCorrelationVector) : base(message)
        {
            this.ErrorCode = code;
            this.RequestCorrelationVector = requestCorrelationVector;
            this.ResponseCorrelationVector = responseCorrelationVector;
        }

        /// <summary>Creates a new instance of the <see cref='CallingCommunicationException'/> class.</summary>
        /// <param name='code'>Error code for this exception.</param>
        /// <param name='message'>Plain text error message for this exception.</param>
        /// <param name='requestCorrelationVector'>Request correlation vector for this exception.</param>
        /// <param name='responseCorrelationVector'>Response correlation vector for this exception.</param>
        /// <param name='inner'>Exception that caused this exception to be thrown.</param>
        public CallingCommunicationException(CallingCommunicationErrors code, string message, string requestCorrelationVector, string responseCorrelationVector, Exception inner) : base(message, inner)
        {
            this.ErrorCode = code;
            this.RequestCorrelationVector = requestCorrelationVector;
            this.ResponseCorrelationVector = responseCorrelationVector;
        }

        /// <summary>
        /// The error code associated with this exception instance.
        /// </summary>
        public CallingCommunicationErrors ErrorCode { get; }

        /// <summary>
        /// The request correlation-vector associated with this exception instance.
        /// </summary>
        public string RequestCorrelationVector { get; }

        /// <summary>
        /// The response correlation-vector associated with this exception instance.
        /// </summary>
        public string ResponseCorrelationVector { get; }

    }

    /// <summary>
    /// Options to be passed when accepting a call
    /// </summary>
    public partial class AcceptCallOptions : Azure.Communication.Calling.UnityClient.CallOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AcceptCallOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_accept_call_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public AcceptCallOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.AcceptCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AcceptCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AcceptCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AcceptCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options when making an outgoing PSTN call
    /// </summary>
    public partial class AddPhoneNumberOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AddPhoneNumberOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public AddPhoneNumberOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~AddPhoneNumberOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        private string AlternateId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_get_alternate_id(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_phone_number_options_set_alternate_id(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AddPhoneNumberOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AddPhoneNumberOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AddPhoneNumberOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AddPhoneNumberOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for AddPhoneNumberOptions.
        /// <summary>
        /// A phone number in E.164 format that will be used to represent callers identity. For example, using
        /// the alternateCallerId to add a participant using PSTN, this number will  be used as the caller id
        /// in the PSTN call.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier AlternateCallerId
        {
            get
            {
                return new Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier(AlternateId);
            }

            set
            {
                AlternateId = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToMri(value);
            }
        }
        // Class extension ends for AddPhoneNumberOptions.

    }

    /// <summary>
    /// Options to be passed when adding a new participant to a teams call
    /// </summary>
    public partial class AddTeamsParticipantOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AddTeamsParticipantOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance of AddTeamsParticipantOptions
        /// </summary>
        public AddTeamsParticipantOptions(string threadId)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_create_string_thread_id(threadId, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~AddTeamsParticipantOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Thread Id to pass when adding a new participant
        /// </summary>
        public string ThreadId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_add_teams_participant_options_get_thread_id(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Result for Lobby admitAll operation
    /// </summary>
    public partial class AdmitAllParticipantsResult : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AdmitAllParticipantsResult(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_addref(this.handle);
        }

        ~AdmitAllParticipantsResult()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The number of successfully admitted participants
        /// </summary>
        public int SuccessCount
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_get_success_count(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The number of participants that are failed during admitAll operation
        /// </summary>
        public int FailureCount
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_all_participants_result_get_failure_count(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Result for Lobby admit operation
    /// </summary>
    public partial class AdmitParticipantsResult : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AdmitParticipantsResult(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_addref(this.handle);
        }

        ~AdmitParticipantsResult()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The number of successfully admitted participants
        /// </summary>
        public int SuccessCount
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_get_success_count(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get a list of remote participants that are failed during admit operation
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> FailedParticipants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_admit_participants_result_get_failed_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AdmitParticipantsResult GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AdmitParticipantsResult result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AdmitParticipantsResult>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AdmitParticipantsResult(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about an audio device
    /// </summary>
    public partial class AudioDeviceDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AudioDeviceDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_addref(this.handle);
        }

        ~AudioDeviceDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get the name of this audio device.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_get_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get Id of this audio device.
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// True if device is a system default
        /// </summary>
        public bool IsSystemDefault
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_get_is_system_default(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get the type of this audio device.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioDeviceType DeviceType
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioDeviceType result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_device_details_get_device_type(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AudioDeviceDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AudioDeviceDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AudioDeviceDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AudioDeviceDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a AudioDevicesUpdated event data
    /// </summary>
    public partial class AudioDevicesUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AudioDevicesUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_addref(this.handle);
        }

        ~AudioDevicesUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// List of AudioDevices that were added
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> AddedAudioDevices
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_get_added_audio_devices(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.AudioDeviceDetails>();
                return result;
            }
        }

        /// <summary>
        /// List of AudioDevices that were removed
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> RemovedAudioDevices
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_devices_updated_event_args_get_removed_audio_devices(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.AudioDeviceDetails>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an CallAudioStreamStateChanged event when audio stream state has updated for an CallAudioStream
    /// </summary>
    public partial class AudioStreamStateChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected AudioStreamStateChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_addref(this.handle);
        }

        ~AudioStreamStateChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Audio Stream that has its state changed
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallAudioStream Stream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallAudioStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_get_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallAudioStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Contains message about Audio Stream
        /// </summary>
        public string Message
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_audio_stream_state_changed_event_args_get_message(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Video Effect for Background Blur
    /// </summary>
    public partial class BackgroundBlurEffect : Azure.Communication.Calling.UnityClient.VideoEffect, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BackgroundBlurEffect(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_background_blur_effect_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        public BackgroundBlurEffect() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.BackgroundBlurEffect GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.BackgroundBlurEffect result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.BackgroundBlurEffect>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.BackgroundBlurEffect(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Video Effect for Background Replacement
    /// </summary>
    public partial class BackgroundReplacementEffect : Azure.Communication.Calling.UnityClient.VideoEffect, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected BackgroundReplacementEffect(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_background_replacement_effect_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance of BackgroundReplacementEffect
        /// </summary>
        public BackgroundReplacementEffect() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.BackgroundReplacementEffect GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.BackgroundReplacementEffect result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.BackgroundReplacementEffect>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.BackgroundReplacementEffect(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call agent created by the CallClient factory method createCallAgent It bears the responsibility of managing calls on behalf of the authenticated user
    /// </summary>
    public partial class CallAgent : Azure.Communication.Calling.UnityClient.CommonCallAgent, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallAgent(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Returns the list of all active calls.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> Calls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_get_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.CommunicationCall>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallAgentCallsUpdatedEventHandlerNative))]
        private static void CallsUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs>>(
                    cookie,
                    nameof(CallsUpdated));

            Azure.Communication.Calling.UnityClient.CallAgent instance = Azure.Communication.Calling.UnityClient.CallAgent.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallAgentCallsUpdatedEventHandlerNative CallsUpdatedStaticHandlerDelegate = CallsUpdatedStaticHandler;

        /// <summary>
        /// CallsUpdated event. Occurs when a new call is created, in case of an incoming call or when an existing call is disconnected.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs> CallsUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_set_calls_updated(this.handle, ((ICachedObject)this).Cookie, CallsUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_set_calls_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallAgentIncomingCallReceivedEventHandlerNative))]
        private static void IncomingCallReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs>>(
                    cookie,
                    nameof(IncomingCallReceived));

            Azure.Communication.Calling.UnityClient.CallAgent instance = Azure.Communication.Calling.UnityClient.CallAgent.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallAgentIncomingCallReceivedEventHandlerNative IncomingCallReceivedStaticHandlerDelegate = IncomingCallReceivedStaticHandler;

        /// <summary>
        /// IncomingCallReceived event. Occurs when incoming call is recieved from PushNotification or Trouter.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs> IncomingCallReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_set_incoming_call_received(this.handle, ((ICachedObject)this).Cookie, IncomingCallReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_set_incoming_call_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> StartCallInternalAsync([In] string[] participants, Azure.Communication.Calling.UnityClient.StartCallOptions options, Azure.Communication.Calling.UnityClient.JoinMeetingLocator meetingLocator, string callId)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_start_call_internal(this.handle, participants, participants?.Length ?? 0, options != null ? options.handle : IntPtr.Zero, meetingLocator != null ? meetingLocator.handle : IntPtr.Zero, callId, promise_.Handle));
                return await promise_.Task;
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> JoinInternalAsync(Azure.Communication.Calling.UnityClient.JoinMeetingLocator meetingLocator, Azure.Communication.Calling.UnityClient.JoinCallOptions joinCallOptions)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_join_internal(this.handle, meetingLocator != null ? meetingLocator.handle : IntPtr.Zero, joinCallOptions != null ? joinCallOptions.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.CallAgent GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallAgent result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallAgent>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallAgent(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for CallAgent.

        /// <summary>
        /// Join a call.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> JoinAsync(
                Azure.Communication.Calling.UnityClient.JoinMeetingLocator meetingLocator, JoinCallOptions joinCallOptions)
        {
            return JoinInternalAsync(meetingLocator, joinCallOptions);
        }

        /// <summary>
        /// Join a call.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> JoinAsync(
                Azure.Communication.Calling.UnityClient.JoinMeetingLocator meetingLocator)
        {
            return JoinInternalAsync(meetingLocator, null);
        }

        /// <summary>
        /// Initiate a call to the participants provided.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> StartCallAsync(
                Azure.Communication.Calling.UnityClient.CallIdentifier[] identifiers, 
                Azure.Communication.Calling.UnityClient.StartCallOptions startCallOptions)
        {
            Guid guid = Guid.NewGuid();
            string callId = guid.ToString();
            string[] participants = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(identifiers);

            return StartCallInternalAsync(participants, startCallOptions, null, callId);
        }
        // Class extension ends for CallAgent.

    }

    public partial class CallAgentOptions : Azure.Communication.Calling.UnityClient.CommonCallAgentOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallAgentOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a default options
        /// </summary>
        public CallAgentOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Specify the display name of the local participant for all new calls
        /// </summary>
        public string DisplayName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_get_display_name(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_set_display_name(this.handle, value));
            }
        }

        /// <summary>
        /// Emergency call options when creating a call agent
        /// </summary>
        public Azure.Communication.Calling.UnityClient.EmergencyCallOptions EmergencyCallOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.EmergencyCallOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_get_emergency_call_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.EmergencyCallOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_set_emergency_call_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Specify the time-to-live duration for push notifications
        /// </summary>
        private int PushNotificationTtl
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_get_push_notification_ttl(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_agent_options_set_push_notification_ttl(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.CallAgentOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallAgentOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallAgentOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallAgentOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Base class for all Audio Stream objects
    /// </summary>
    public abstract partial class CallAudioStream : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallAudioStream(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~CallAudioStream()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Informs the kind of the Audio Stream.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Informs the state of the Audio Stream.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_get_state(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Informs if the audio is Incoming or Outgoing
        /// </summary>
        public Azure.Communication.Calling.UnityClient.StreamDirection Direction
        {
            get
            {
                Azure.Communication.Calling.UnityClient.StreamDirection result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_get_direction(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallAudioStreamStateChangedEventHandlerNative))]
        private static void StateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs>>(
                    cookie,
                    nameof(StateChanged));

            Azure.Communication.Calling.UnityClient.CallAudioStream instance = Factories.CallAudioStreamFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallAudioStreamStateChangedEventHandlerNative StateChangedStaticHandlerDelegate = StateChangedStaticHandler;

        /// <summary>
        /// Listener used to know the audio stream state
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.AudioStreamStateChangedEventArgs> StateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_set_state_changed(this.handle, ((ICachedObject)this).Cookie, StateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_audio_stream_set_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Call captions for managing common captions functionality.
    /// </summary>
    public abstract partial class CallCaptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallCaptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_addref(this.handle);
        }

        ~CallCaptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// List of supported spoken languages for Captions.
        /// </summary>
        private string[] SupportedSpokenLanguagesInternal
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_get_supported_spoken_languages_internal(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
        }

        /// <summary>
        /// List of supported spoken languages for Captions.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<string> SupportedSpokenLanguages
        {
            get
            {
                IntPtr result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_get_supported_spoken_languages(this.handle, out result_array, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result_array, result_length);
            }
        }

        /// <summary>
        /// Indicates if captions is enabled in current call.
        /// </summary>
        public bool IsEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_get_is_enabled(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get captions type.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CaptionsType CaptionsKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CaptionsType result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_get_captions_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get active spoken language.
        /// </summary>
        public string ActiveSpokenLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_get_active_spoken_language(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Starts the captions.
        /// </summary>
        public async System.Threading.Tasks.Task StartCaptionsAsync(Azure.Communication.Calling.UnityClient.StartCaptionsOptions options)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_start_captions(this.handle, options != null ? options.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Stop the captions.
        /// </summary>
        public async System.Threading.Tasks.Task StopCaptionsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_stop_captions(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Set the spoken language.
        /// </summary>
        public async System.Threading.Tasks.Task SetSpokenLanguageAsync(string language)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_captions_set_spoken_language(this.handle, language, promise_.Handle));
                await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Base class for call client features
    /// </summary>
    public abstract partial class CallClientFeature : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallClientFeature(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_feature_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_feature_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_feature_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~CallClientFeature()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_feature_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the feature
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_feature_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// List of available call client features
    /// </summary>
    public partial class CallClientFeatures : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallClientFeatures(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_features_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_features_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_features_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~CallClientFeatures()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_features_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Pre-call diagsnotic feature
        /// </summary>
        public Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature PreCallDiagnosticsCallClientFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_features_get_pre_call_diagnostics_call_client_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallClientFeatures GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallClientFeatures result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallClientFeatures>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallClientFeatures(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// This is the main class representing the entrypoint for the Calling SDK.
    /// </summary>
    public partial class CallClient : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallClient(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public CallClient()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
            // Method extension begins for CallClient.

            this.EnsureInitializationOptions();
            // Method extension ends for CallClient.
        }

        /// <summary>
        /// Creates a new instance with CallClientOptions
        /// </summary>
        public CallClient(Azure.Communication.Calling.UnityClient.CallClientOptions options)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_create_call_client_options_options(options != null ? options.handle : IntPtr.Zero, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
            // Method extension begins for CallClient.

            this.EnsureInitializationOptions();
            // Method extension ends for CallClient.
        }

        ~CallClient()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        private Azure.Communication.Calling.UnityClient.InitializationOptions InitializationOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.InitializationOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_get_initialization_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.InitializationOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_set_initialization_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// List of available call client features
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallClientFeatures Features
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallClientFeatures result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_get_features(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallClientFeatures.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Releases all the resources held by CallClient. CallClient should be destroyed/nullified after dispose.
        /// </summary>
        public void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_dispose(this.handle));
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CallAgent> CreateCallAgentInternalAsync(Azure.Communication.Calling.UnityClient.InternalTokenProvider tokenProvider, Azure.Communication.Calling.UnityClient.CallAgentOptions callAgentOptions)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.CallAgent.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_create_call_agent_internal(this.handle, tokenProvider != null ? tokenProvider.handle : IntPtr.Zero, callAgentOptions != null ? callAgentOptions.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCallAgent> CreateTeamsCallAgentInternalAsync(Azure.Communication.Calling.UnityClient.InternalTokenProvider tokenProvider, Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions teamsCallAgentOptions)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.TeamsCallAgent.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_create_teams_call_agent_internal(this.handle, tokenProvider != null ? tokenProvider.handle : IntPtr.Zero, teamsCallAgentOptions != null ? teamsCallAgentOptions.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        /// <summary>
        /// Gets a device manager object that can be used to enumerates audio and video devices available for calls.
        /// </summary>
        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.DeviceManager> GetDeviceManagerInternalAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.DeviceManager.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_get_device_manager_internal(this.handle, promise_.Handle));
                return await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallClient GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallClient result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallClient>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallClient(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for CallClient.

        /// <summary>
        /// Create an initialization options object, if one does not exist yet. Data path is then set to 
        /// Unity's persistent data path.
        /// </summary>
        private void EnsureInitializationOptions()
        {
            if (InitializationOptions == null)
            {
        #if !UNITY_EDITOR && UNITY_ANDROID
                using UnityEngine.AndroidJavaClass unityPlayerClass = new("com.unity3d.player.UnityPlayer");
                using UnityEngine.AndroidJavaObject androidActivity = unityPlayerClass.GetStatic<UnityEngine.AndroidJavaObject>("currentActivity");
                using UnityEngine.AndroidJavaObject androidFilesDir = androidActivity.Call<UnityEngine.AndroidJavaObject>("getFilesDir");
                string androidAbsolutePath = androidFilesDir.Call<string>("getAbsolutePath");
                var initializationOptions = new InitializationOptions()
                {
                    DataPath = androidAbsolutePath + "/dataPath",
                    LogFileName = androidAbsolutePath + "/acs_sdk.blog"
                };
        #else
                var initializationOptions = new InitializationOptions()
                {
                    DataPath = UnityEngine.Application.persistentDataPath,
                    LogFileName = UnityEngine.Application.persistentDataPath + "/acs_unity_sdk.blog"
                };
        #endif
                InitializationOptions = initializationOptions;
            }
        }

        /// <summary>
        /// Gets a device manager object that can be used to enumerates audio and video devices available for calls.
        /// </summary>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.DeviceManager> GetDeviceManager()
        {
            EnsureInitializationOptions();

            return await GetDeviceManagerInternalAsync();
        }

        private InternalTokenProvider InternalTokenProvider { get; set; }

        /// <summary>
        /// Create a CallAgent used to handle calls. 
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CallAgent> CreateCallAgentAsync(
                Azure.Communication.Calling.UnityClient.CallTokenCredential communicationTokenCredential,
                Azure.Communication.Calling.UnityClient.CallAgentOptions callAgentOptions)
        {
            InternalTokenProvider = new Azure.Communication.Calling.UnityClient.InternalTokenProvider();
            InternalTokenProvider.OnTokenRequested += (Azure.Communication.Calling.UnityClient.InternalTokenProvider sender) => {
                string jwtEncodedString = communicationTokenCredential.Token.Token;
                sender.ParseToken(jwtEncodedString);
            };
            EnsureInitializationOptions();

            return CreateCallAgentInternalAsync(InternalTokenProvider, callAgentOptions);
        }

        /// <summary>
        /// Create a TeamsCallAgent used to handle calls. 
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCallAgent> CreateTeamsCallAgentAsync(
                Azure.Communication.Calling.UnityClient.CallTokenCredential communicationTokenCredential, TeamsCallAgentOptions teamsCallAgentOptions)
        {
            InternalTokenProvider = new Azure.Communication.Calling.UnityClient.InternalTokenProvider();
            InternalTokenProvider.OnTokenRequested += (Azure.Communication.Calling.UnityClient.InternalTokenProvider sender) => {
                string jwtEncodedString = communicationTokenCredential.Token.Token;
                sender.ParseToken(jwtEncodedString);
            };
            EnsureInitializationOptions();

            return CreateTeamsCallAgentInternalAsync(InternalTokenProvider, teamsCallAgentOptions);
        }
        // Class extension ends for CallClient.

    }

    /// <summary>
    /// Options to be passed when creating a call client
    /// </summary>
    public partial class CallClientOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallClientOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration for the call client
        /// </summary>
        public CallClientOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallClientOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Call Diagnostics options when creating a call client
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions Diagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_get_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_set_diagnostics(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Call network options when creating a call client
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallNetworkOptions Network
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallNetworkOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_get_network(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallNetworkOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_client_options_set_network(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallClientOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallClientOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallClientOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallClientOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options for diagnostics of call client
    /// </summary>
    public partial class CallDiagnosticsOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallDiagnosticsOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration for the call diagnostics options
        /// </summary>
        public CallDiagnosticsOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallDiagnosticsOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// An Identifier to group together multiple appIds into small bundle, invariant of version.
        /// </summary>
        public string AppName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_get_app_name(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_set_app_name(this.handle, value));
            }
        }

        /// <summary>
        /// The application version.
        /// </summary>
        public string AppVersion
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_get_app_version(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_set_app_version(this.handle, value));
            }
        }

        /// <summary>
        /// Tags - additonal information.
        /// </summary>
        public string[] Tags
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_get_tags(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_diagnostics_options_set_tags(this.handle, value, value?.Length ?? 0));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallDiagnosticsOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes the reason for a call to end
    /// </summary>
    public partial class CallEndReason : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallEndReason(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_addref(this.handle);
        }

        ~CallEndReason()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The code
        /// </summary>
        public int Code
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_get_code(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The subcode
        /// </summary>
        public int Subcode
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_end_reason_get_subcode(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallEndReason GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallEndReason result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallEndReason>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallEndReason(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// CallFeature super type, features extensions for call.
    /// </summary>
    public abstract partial class CallFeature : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallFeature(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_feature_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_feature_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_feature_addref(this.handle);
        }

        ~CallFeature()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_feature_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the extended CallFeature.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_feature_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Lists all the available Call Features
    /// </summary>
    public partial class CallFeatures : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallFeatures(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_addref(this.handle);
        }

        ~CallFeatures()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.RecordingCallFeature Recording
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RecordingCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_recording(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RecordingCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.TranscriptionCallFeature Transcription
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.TranscriptionCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_transcription(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.TranscriptionCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature DominantSpeakers
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_dominant_speakers(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.CaptionsCallFeature Captions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CaptionsCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_captions(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CaptionsCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.RaiseHandCallFeature RaisedHands
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RaiseHandCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_raised_hands(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RaiseHandCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature LocalUserDiagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_local_user_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.DataChannelCallFeature DataChannel
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.DataChannelCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_data_channel(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DataChannelCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature MediaStatistics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_media_statistics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.SpotlightCallFeature Spotlight
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.SpotlightCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_spotlight(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.SpotlightCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.ContentSharingCallFeature ContentSharing
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.ContentSharingCallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_features_get_content_sharing(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.ContentSharingCallFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallFeatures GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallFeatures result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallFeatures>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallFeatures(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a call
    /// </summary>
    public partial class CommunicationCall : Azure.Communication.Calling.UnityClient.CommonCommunicationCall, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommunicationCall(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Information about the caller
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallDetails Details
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_get_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.RemoteParticipant AddParticipant(string participant)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.RemoteParticipant result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_add_participant_string_participant(this.handle, participant, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        private Azure.Communication.Calling.UnityClient.RemoteParticipant AddParticipant(string participant, Azure.Communication.Calling.UnityClient.AddPhoneNumberOptions options)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.RemoteParticipant result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_add_participant_string_participant_add_phone_number_options_options(this.handle, participant, options != null ? options.handle : IntPtr.Zero, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.CommunicationCall GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CommunicationCall result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CommunicationCall>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CommunicationCall(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for Call.
        /// <summary>
        /// Add a participant to a call.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RemoteParticipant AddParticipant(Azure.Communication.Calling.UnityClient.CallIdentifier participant)
        {
            return AddParticipant(participant.RawId);
        }
        // Class extension ends for Call.

    }

    /// <summary>
    /// Base class for various call identifiers.
    /// </summary>
    public abstract partial class CallIdentifier : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallIdentifier(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_identifier_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_identifier_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_identifier_addref(this.handle);
        }

        ~CallIdentifier()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_identifier_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public string RawId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_identifier_get_raw_id(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Describes a call's information
    /// </summary>
    public partial class CallDetails : Azure.Communication.Calling.UnityClient.CommonCallDetails, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallDetails(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static Azure.Communication.Calling.UnityClient.CallDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a Teams Meeting Lobby's information
    /// </summary>
    public partial class CallLobby : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallLobby(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_addref(this.handle);
        }

        ~CallLobby()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get a list of remote participants in the current Teams meeting lobby.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> Participants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_get_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallLobbyLobbyParticipantsUpdatedEventHandlerNative))]
        private static void LobbyParticipantsUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs>>(
                    cookie,
                    nameof(LobbyParticipantsUpdated));

            Azure.Communication.Calling.UnityClient.CallLobby instance = Azure.Communication.Calling.UnityClient.CallLobby.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallLobbyLobbyParticipantsUpdatedEventHandlerNative LobbyParticipantsUpdatedStaticHandlerDelegate = LobbyParticipantsUpdatedStaticHandler;

        /// <summary>
        /// LobbyParticipantsUpdated Event. Occurs when participants are added to or removed from a Teams meeting lobby.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs> LobbyParticipantsUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.LobbyParticipantsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_set_lobby_participants_updated(this.handle, ((ICachedObject)this).Cookie, LobbyParticipantsUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.LobbyParticipantsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_set_lobby_participants_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Admit participants from the Teams meeting lobby
        /// </summary>
        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.AdmitParticipantsResult> AdmitInternalAsync([In] string[] participants)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.AdmitParticipantsResult.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_admit_internal(this.handle, participants, participants?.Length ?? 0, promise_.Handle));
                return await promise_.Task;
            }
        }

        /// <summary>
        /// Reject a participant from the Teams meeting lobby
        /// </summary>
        private async System.Threading.Tasks.Task RejectInternalAsync(string participant)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_reject_internal(this.handle, participant, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Admit all participants from the Teams meeting lobby
        /// </summary>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult> AdmitAllAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.AdmitAllParticipantsResult.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_lobby_admit_all(this.handle, promise_.Handle));
                return await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallLobby GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallLobby result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallLobby>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallLobby(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for CallLobby.
        /// <summary>
        /// Admit a list of participants from the Teams meeting lobby
        /// </summary>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.AdmitParticipantsResult> AdmitAsync(Azure.Communication.Calling.UnityClient.CallIdentifier[] identifiers)
        {
            string[] participants = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(identifiers);
            return await AdmitInternalAsync(participants);
        }

        /// <summary>
        /// Reject a participant from the Teams meeting lobby
        /// </summary>
        public async System.Threading.Tasks.Task RejectAsync(Azure.Communication.Calling.UnityClient.CallIdentifier participant)
        {
            await RejectInternalAsync(participant.RawId);
        }
        // Class extension ends for CallLobby.

    }

    /// <summary>
    /// Network options for call client
    /// </summary>
    public partial class CallNetworkOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallNetworkOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default network options.
        /// </summary>
        public CallNetworkOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallNetworkOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Uri to be used for proxy.
        /// </summary>
        public System.Uri ProxyUri
        {
            get
            {
                string result_string;
                Uri result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_get_proxy_uri(this.handle, out result_string));
                result = new Uri(result_string, UriKind.RelativeOrAbsolute);
                return result;
            }
            set
            {
                string value_string;
                value_string = value.OriginalString;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_set_proxy_uri(this.handle, value_string));
            }
        }

        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IceServer> IceServers
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IceServer> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_get_ice_servers(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.IceServer.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IceServer>();
                return result;
            }
            set
            {
                IntPtr[] value_array = value?.Select(x => x?.handle ?? IntPtr.Zero).ToArray() ?? Array.Empty<IntPtr>();
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_network_options_set_ice_servers(this.handle, value_array, value_array.Length));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallNetworkOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallNetworkOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallNetworkOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallNetworkOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Holds options for video and audio
    /// </summary>
    public abstract partial class CallOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~CallOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Set or set the IncomingVideoOptions that should be taken in count once the call start
        /// </summary>
        public virtual Azure.Communication.Calling.UnityClient.IncomingVideoOptions IncomingVideoOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingVideoOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_get_incoming_video_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingVideoOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_set_incoming_video_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Set or set the OutgoingVideoOptions that should be taken in count once the call start
        /// </summary>
        public virtual Azure.Communication.Calling.UnityClient.OutgoingVideoOptions OutgoingVideoOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingVideoOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_get_outgoing_video_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingVideoOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_set_outgoing_video_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Incoming Audio options when joining or accepting a call
        /// </summary>
        public virtual Azure.Communication.Calling.UnityClient.IncomingAudioOptions IncomingAudioOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingAudioOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_get_incoming_audio_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingAudioOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_set_incoming_audio_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Outgoing Audio options when joining or accepting a call
        /// </summary>
        public virtual Azure.Communication.Calling.UnityClient.OutgoingAudioOptions OutgoingAudioOptions
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingAudioOptions result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_get_outgoing_audio_options(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingAudioOptions.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_options_set_outgoing_audio_options(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// The ACS CallToken credential.
    /// </summary>
    public partial class CallTokenCredential : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallTokenCredential(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_addref(this.handle);
        }

        /// <summary>
        /// Initializes a new instance of <see cref="CallTokenCredential"/>.
        /// </summary>
        /// <param name="token">
        /// User token acquired from toke provider.
        /// </param>
        public CallTokenCredential(string token)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_create_string_token(token, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Initializes a new instance of <see cref="CallTokenCredential"/> It automatically renews the token upon expiry or proactively prior to expiration to speed up the requests.
        /// </summary>
        /// <param name="token">
        /// User token acquired from token provider.
        /// </param>
        /// <param name="options">
        /// Options for how the token should be refreshed.
        /// </param>
        public CallTokenCredential(string token, Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions options)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_create_string_token_call_token_refresh_options_options(token, options != null ? options.handle : IntPtr.Zero, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallTokenCredential()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Gets an <see cref="CallToken"/> for the user.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallToken Token
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallToken result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_credential_get_token(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallToken.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallTokenCredential GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallTokenCredential result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallTokenCredential>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallTokenCredential(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents an Azure service bearer call access token with expiry information.
    /// </summary>
    public partial class CallToken : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallToken(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance of <see cref="CallToken"/> using the provided  and .
        /// </summary>
        /// <param name="accessToken">
        /// The bearer access token value.
        /// </param>
        /// <param name="expiresOn">
        /// The bearer access token expiry date.
        /// </param>
        public CallToken(string accessToken, DateTimeOffset expiresOn)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_create_string_access_token_date_time_offset_expires_on(accessToken, (expiresOn == DateTimeOffset.MaxValue) ? 0 : expiresOn.ToUnixTimeMilliseconds(), out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallToken()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Gets the access token value.
        /// </summary>
        public string Token
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_get_token(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Gets the time when the provided token expires.
        /// </summary>
        public DateTimeOffset ExpiresOn
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_get_expires_on(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallToken GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallToken result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallToken>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallToken(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// The CallToken refresh Options
    /// </summary>
    public partial class CallTokenRefreshOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallTokenRefreshOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_addref(this.handle);
        }

        /// <summary>
        /// Initializes a new instance of <see cref="CallTokenRefreshOptions"/>.
        /// </summary>
        /// <param name="refreshProactively">
        /// Refresh the token peroactively on an internal timer
        /// </param>
        public CallTokenRefreshOptions(bool refreshProactively)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_create_boolean_refresh_proactively(refreshProactively, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~CallTokenRefreshOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Gets whether the token option is configured to refresh proactively
        /// </summary>
        public bool RefreshProactively
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_get_refresh_proactively(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallTokenRefreshOptionsTokenRefreshRequestedEventHandlerNative))]
        private static void TokenRefreshRequestedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs>>(
                    cookie,
                    nameof(TokenRefreshRequested));

            Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions instance = Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallTokenRefreshOptionsTokenRefreshRequestedEventHandlerNative TokenRefreshRequestedStaticHandlerDelegate = TokenRefreshRequestedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs> TokenRefreshRequested
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.TokenRefreshRequested), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_set_token_refresh_requested(this.handle, ((ICachedObject)this).Cookie, TokenRefreshRequestedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.TokenRefreshRequested), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_options_set_token_refresh_requested(this.handle, IntPtr.Zero, null));
                }
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallTokenRefreshOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents a CallTokenRefreshRequested event data
    /// </summary>
    public partial class CallTokenRefreshRequestedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallTokenRefreshRequestedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_addref(this.handle);
        }

        ~CallTokenRefreshRequestedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.CallToken CallToken
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallToken result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_get_call_token(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallToken.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_token_refresh_requested_event_args_set_call_token(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallTokenRefreshRequestedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Base class for all Video streams which contains logic for rendering a Video and/or provide video frames
    /// </summary>
    public abstract partial class CallVideoStream : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallVideoStream(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~CallVideoStream()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get the type of the derived class
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get VideoStreamSourceType of the current CallVideoStream
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamSourceKind SourceKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamSourceKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_get_source_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Informs the current running state of this CallVideoStream. It might change during the call due network conditions or other events.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_get_state(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Informs if the video is Incoming or Outgoing
        /// </summary>
        public Azure.Communication.Calling.UnityClient.StreamDirection Direction
        {
            get
            {
                Azure.Communication.Calling.UnityClient.StreamDirection result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_get_direction(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Unique Identifier of the current remote video stream.
        /// </summary>
        public int Id
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CallVideoStreamStateChangedEventHandlerNative))]
        private static void StateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs>>(
                    cookie,
                    nameof(StateChanged));

            Azure.Communication.Calling.UnityClient.CallVideoStream instance = Factories.CallVideoStreamFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CallVideoStreamStateChangedEventHandlerNative StateChangedStaticHandlerDelegate = StateChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs> StateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_set_state_changed(this.handle, ((ICachedObject)this).Cookie, StateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_set_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Used to notifiy video stream when the derived class has created the bindind successfully
        /// </summary>
        /// <param name="bindingEventHandle">
        /// 
        /// </param>
        public void OnBindingCreated(long bindingEventHandle)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_on_binding_created(this.handle, bindingEventHandle));
        }

        /// <summary>
        /// Used to notifiy video stream when the derived class has released the bindind successfully
        /// </summary>
        /// <param name="bindingEventHandle">
        /// 
        /// </param>
        public void OnBindingReleased()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_on_binding_released(this.handle));
        }

        /// <summary>
        /// Used to notifiy video stream when the derived class failed to create the binding
        /// </summary>
        /// <param name="bindingEventHandle">
        /// 
        /// </param>
        public void OnBindingFailed()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_call_video_stream_on_binding_failed(this.handle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Describes the Caller Information
    /// </summary>
    public partial class CallerDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallerDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_addref(this.handle);
        }

        ~CallerDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The display name of the caller
        /// </summary>
        public string DisplayName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_get_display_name(this.handle, out result));
                return result;
            }
        }

        private string CallerIdentifier
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_caller_info_get_caller_identifier(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallerDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallerDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallerDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallerDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for CallerInfo.
        /// <summary>
        /// Identifier of the caller.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(CallerIdentifier);
            }
        }
        // Class extension ends for CallerInfo.

    }

    /// <summary>
    /// Describes a CallsUpdated event
    /// </summary>
    public partial class CallsUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallsUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_addref(this.handle);
        }

        ~CallsUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// New calls being tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> AddedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_get_added_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.CommunicationCall>();
                return result;
            }
        }

        /// <summary>
        /// Calls that are no longer tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> RemovedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommunicationCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_calls_updated_event_args_get_removed_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.CommunicationCall>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallsUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing captions for a call.
    /// </summary>
    public partial class CaptionsCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CaptionsCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CaptionsCallFeatureActiveCaptionsTypeChangedEventHandlerNative))]
        private static void ActiveCaptionsTypeChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ActiveCaptionsTypeChanged));

            Azure.Communication.Calling.UnityClient.CaptionsCallFeature instance = Azure.Communication.Calling.UnityClient.CaptionsCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CaptionsCallFeatureActiveCaptionsTypeChangedEventHandlerNative ActiveCaptionsTypeChangedStaticHandlerDelegate = ActiveCaptionsTypeChangedStaticHandler;

        /// <summary>
        /// ActiveCaptionsType Event. Occurs when captions type is changed for a call.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ActiveCaptionsTypeChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveCaptionsTypeChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_captions_call_feature_set_active_captions_type_changed(this.handle, ((ICachedObject)this).Cookie, ActiveCaptionsTypeChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveCaptionsTypeChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_captions_call_feature_set_active_captions_type_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Get captions for a connected call.
        /// </summary>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CallCaptions> GetCaptionsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Factories.CallCaptionsFactory(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_captions_call_feature_get_captions(this.handle, promise_.Handle));
                return await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.CaptionsCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CaptionsCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CaptionsCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CaptionsCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Common call agent base class to represent extended call agent classes created by the CallClient factory method createCallAgent It bears the responsibility of managing calls on behalf of the authenticated user
    /// </summary>
    public abstract partial class CommonCallAgent : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonCallAgent(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_addref(this.handle);
        }

        ~CommonCallAgent()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Informs how video frames will be available for encoding or decoding.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CommunicationCallKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CommunicationCallKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallAgentCommonCallsUpdatedEventHandlerNative))]
        private static void CommonCallsUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs>>(
                    cookie,
                    nameof(CommonCallsUpdated));

            Azure.Communication.Calling.UnityClient.CommonCallAgent instance = Factories.CommonCallAgentFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallAgentCommonCallsUpdatedEventHandlerNative CommonCallsUpdatedStaticHandlerDelegate = CommonCallsUpdatedStaticHandler;

        /// <summary>
        /// CallsUpdated event. Occurs when a new call is created, in case of an incoming call or when an existing call is disconnected.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs> CommonCallsUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CommonCallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_set_common_calls_updated(this.handle, ((ICachedObject)this).Cookie, CommonCallsUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CommonCallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_set_common_calls_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallAgentCommonIncomingCallReceivedEventHandlerNative))]
        private static void CommonIncomingCallReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs>>(
                    cookie,
                    nameof(CommonIncomingCallReceived));

            Azure.Communication.Calling.UnityClient.CommonCallAgent instance = Factories.CommonCallAgentFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallAgentCommonIncomingCallReceivedEventHandlerNative CommonIncomingCallReceivedStaticHandlerDelegate = CommonIncomingCallReceivedStaticHandler;

        /// <summary>
        /// IncomingCallReceived event. Occurs when incoming call is recieved from PushNotification or Trouter.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs> CommonIncomingCallReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CommonIncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_set_common_incoming_call_received(this.handle, ((ICachedObject)this).Cookie, CommonIncomingCallReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CommonIncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_set_common_incoming_call_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Releases all the resources held by Base CallAgent. Base CallAgent should be destroyed/nullified after dispose. Closes this resource. This gets projected to java.lang.AutoCloseable.close() in Java projection.
        /// </summary>
        public virtual void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_dispose(this.handle));
        }

        /// <summary>
        /// Register device for receiving incoming calls push notifications. token of device to be registered
        /// </summary>
        /// <param name="deviceToken">
        /// token of device to be registered
        /// </param>
        private async System.Threading.Tasks.Task RegisterPushNotificationInternalAsync(string deviceToken)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_register_push_notification_internal(this.handle, deviceToken, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Handle the push notification. If successful, will raise appropriate incoming call event.
        /// </summary>
        public async System.Threading.Tasks.Task HandlePushNotificationAsync(Azure.Communication.Calling.UnityClient.PushNotificationDetails notification)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_handle_push_notification(this.handle, notification != null ? notification.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Unregister all previously registered devices from receiving incoming calls push notifications.
        /// </summary>
        public async System.Threading.Tasks.Task UnregisterPushNotificationAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_unregister_push_notification(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Common Options for creating CallAgent
    /// </summary>
    public abstract partial class CommonCallAgentOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonCallAgentOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_addref(this.handle);
        }

        ~CommonCallAgentOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Enables only IncomingCall notification because of HandlePush and disables the internal delivery of push for IncomingCall.
        /// </summary>
        public bool DisableInternalPushForIncomingCall
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_get_disable_internal_push_for_incoming_call(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_agent_options_set_disable_internal_push_for_incoming_call(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Describes a common call
    /// </summary>
    public abstract partial class CommonCommunicationCall : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonCommunicationCall(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_addref(this.handle);
        }

        ~CommonCommunicationCall()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Informs how video frames will be available for encoding or decoding.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CommunicationCallKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CommunicationCallKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get a list of remote participants in the current call. In case of calls with participants of hundred or more, only media active participants are present in this collection.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> RemoteParticipants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_remote_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        /// <summary>
        /// Id of the call
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Current state of the call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_state(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Containing code/subcode indicating how a call has ended
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallEndReason CallEndReason
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallEndReason result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_call_end_reason(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallEndReason.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Outgoing or Incoming depending on the Call Direction
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallDirection Direction
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallDirection result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_direction(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Whether the local microphone is muted or not.
        /// </summary>
        public bool IsOutgoingAudioMuted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_is_outgoing_audio_muted(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Whether the local speaker is muted or not.
        /// </summary>
        public bool IsIncomingAudioMuted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_is_incoming_audio_muted(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The identity of the caller
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallerDetails CallerDetails
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallerDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_caller_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallerDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Get the Teams meeting lobby.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallLobby CallLobby
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallLobby result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_call_lobby(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallLobby.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private string LocalIdentifierInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_local_identifier_internal(this.handle, out result));
                return result;
            }
        }

        public Azure.Communication.Calling.UnityClient.IncomingAudioStream ActiveIncomingAudioStream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingAudioStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_active_incoming_audio_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.IncomingAudioStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.OutgoingAudioStream ActiveOutgoingAudioStream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingAudioStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_active_outgoing_audio_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.OutgoingAudioStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Participant role in the call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallParticipantRole CallParticipantRole
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallParticipantRole result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_call_participant_role(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get a list of outgoing streams in the current call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStream> OutgoingVideoStreams
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStream> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_outgoing_video_streams(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Factories.OutgoingVideoStreamFactory(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingVideoStream>();
                return result;
            }
        }

        /// <summary>
        /// Total number of participants active in the current call
        /// </summary>
        public int TotalParticipantCount
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_total_participant_count(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// if true ACS SDK will provide gpu textures whenever possible
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawVideoFrameKind IncomingRawVideoFrameKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.RawVideoFrameKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_incoming_raw_video_frame_type(this.handle, out result));
                return result;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature RecordingCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_recording_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature TranscriptionCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_transcription_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature DominantSpeakersCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_dominant_speakers_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature CaptionsCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_captions_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature RaiseHandCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_raise_hand_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature LocalUserDiagnosticsCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_local_user_diagnostics_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature DataChannelCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_data_channel_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature MediaStatisticsCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_media_statistics_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature SpotlightCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_spotlight_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.CallFeature ContentSharingCallFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_content_sharing_call_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        public Azure.Communication.Calling.UnityClient.CallFeatures Features
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallFeatures result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_features(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallFeatures.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Get the current configurable outgoing audio filters
        /// </summary>
        public Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters LiveOutgoingAudioFilters
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_live_outgoing_audio_filters(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallIdChangedEventHandlerNative))]
        private static void IdChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IdChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallIdChangedEventHandlerNative IdChangedStaticHandlerDelegate = IdChangedStaticHandler;

        /// <summary>
        /// CallIdChanged Event. Occurs when the call id changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IdChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IdChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_id_changed(this.handle, ((ICachedObject)this).Cookie, IdChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IdChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_id_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallStateChangedEventHandlerNative))]
        private static void StateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(StateChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallStateChangedEventHandlerNative StateChangedStaticHandlerDelegate = StateChangedStaticHandler;

        /// <summary>
        /// StateChanged Event. Occurs when the call state changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> StateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_state_changed(this.handle, ((ICachedObject)this).Cookie, StateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallRoleChangedEventHandlerNative))]
        private static void RoleChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(RoleChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallRoleChangedEventHandlerNative RoleChangedStaticHandlerDelegate = RoleChangedStaticHandler;

        /// <summary>
        /// RoleChanged Event. Occurs when the call role changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> RoleChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.RoleChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_role_changed(this.handle, ((ICachedObject)this).Cookie, RoleChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.RoleChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_role_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallRemoteParticipantsUpdatedEventHandlerNative))]
        private static void RemoteParticipantsUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs>>(
                    cookie,
                    nameof(RemoteParticipantsUpdated));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallRemoteParticipantsUpdatedEventHandlerNative RemoteParticipantsUpdatedStaticHandlerDelegate = RemoteParticipantsUpdatedStaticHandler;

        /// <summary>
        /// ParticipantsUpdated Event. Occurs when participants are added to or removed from a call
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs> RemoteParticipantsUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.RemoteParticipantsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_remote_participants_updated(this.handle, ((ICachedObject)this).Cookie, RemoteParticipantsUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.RemoteParticipantsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_remote_participants_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallOutgoingAudioStateChangedEventHandlerNative))]
        private static void OutgoingAudioStateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(OutgoingAudioStateChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallOutgoingAudioStateChangedEventHandlerNative OutgoingAudioStateChangedStaticHandlerDelegate = OutgoingAudioStateChangedStaticHandler;

        /// <summary>
        /// OnOutgoingAudioStateChanged Event. Occurs when outgoing audio state is changed.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> OutgoingAudioStateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.OutgoingAudioStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_outgoing_audio_state_changed(this.handle, ((ICachedObject)this).Cookie, OutgoingAudioStateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.OutgoingAudioStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_outgoing_audio_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallMutedByOthersEventHandlerNative))]
        private static void MutedByOthersStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(MutedByOthers));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallMutedByOthersEventHandlerNative MutedByOthersStaticHandlerDelegate = MutedByOthersStaticHandler;

        /// <summary>
        /// OnMutedByOthers Event. Occurs when the another participant in the call has muted the current participant.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> MutedByOthers
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MutedByOthers), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_muted_by_others(this.handle, ((ICachedObject)this).Cookie, MutedByOthersStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MutedByOthers), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_muted_by_others(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallIncomingAudioStateChangedEventHandlerNative))]
        private static void IncomingAudioStateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IncomingAudioStateChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallIncomingAudioStateChangedEventHandlerNative IncomingAudioStateChangedStaticHandlerDelegate = IncomingAudioStateChangedStaticHandler;

        /// <summary>
        /// This event is raised when incoming audio state is changed.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IncomingAudioStateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingAudioStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_incoming_audio_state_changed(this.handle, ((ICachedObject)this).Cookie, IncomingAudioStateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingAudioStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_incoming_audio_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonCallTotalParticipantCountChangedEventHandlerNative))]
        private static void TotalParticipantCountChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(TotalParticipantCountChanged));

            Azure.Communication.Calling.UnityClient.CommonCommunicationCall instance = Factories.CommonCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonCallTotalParticipantCountChangedEventHandlerNative TotalParticipantCountChangedStaticHandlerDelegate = TotalParticipantCountChangedStaticHandler;

        /// <summary>
        /// TotalParticipantCountChanged Event. Occurs when the participant count changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> TotalParticipantCountChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.TotalParticipantCountChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_total_participant_count_changed(this.handle, ((ICachedObject)this).Cookie, TotalParticipantCountChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.TotalParticipantCountChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_total_participant_count_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Releases all the resources held by Call object. Call should be destroyed/nullified after dispose. Closes this resource. This gets projected to java.lang.AutoCloseable.close() in Java projection.
        /// </summary>
        public void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_dispose(this.handle));
        }

        private Azure.Communication.Calling.UnityClient.CallAudioStream GetCurrentAudioStream(Azure.Communication.Calling.UnityClient.StreamDirection StreamDirection)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.CallAudioStream result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_get_current_audio_stream(this.handle, StreamDirection, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Factories.CallAudioStreamFactory(result_handle, transfer: true) : null;
            return result_object;
        }

        /// <summary>
        /// Start audio stream
        /// </summary>
        public async System.Threading.Tasks.Task StartAudioAsync(Azure.Communication.Calling.UnityClient.CallAudioStream stream)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_start_audio(this.handle, stream != null ? stream.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Stop audio stream
        /// </summary>
        public async System.Threading.Tasks.Task StopAudioAsync(Azure.Communication.Calling.UnityClient.CallAudioStream stream)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_stop_audio(this.handle, stream != null ? stream.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Mute all remote participants audio
        /// </summary>
        public async System.Threading.Tasks.Task MuteAllRemoteParticipantsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_mute_all_remote_participants(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Mute speaker.
        /// </summary>
        public async System.Threading.Tasks.Task MuteIncomingAudioAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_mute_incoming_audio(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// UnMute speaker.
        /// </summary>
        public async System.Threading.Tasks.Task UnmuteIncomingAudioAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_unmute_incoming_audio(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// UnMute microphone.
        /// </summary>
        public async System.Threading.Tasks.Task UnmuteOutgoingAudioAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_unmute_outgoing_audio(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Mute microphone.
        /// </summary>
        public async System.Threading.Tasks.Task MuteOutgoingAudioAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_mute_outgoing_audio(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Mute local microphone internal.
        /// </summary>
        private async System.Threading.Tasks.Task MuteInternalAsync(bool mute)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_mute_internal(this.handle, mute, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Mute local speaker internal.
        /// </summary>
        private async System.Threading.Tasks.Task MuteSpeakerInternalAsync(bool mute)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_mute_speaker_internal(this.handle, mute, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send DTMF tone
        /// </summary>
        public async System.Threading.Tasks.Task SendDtmfAsync(Azure.Communication.Calling.UnityClient.DtmfTone tone)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_send_dtmf(this.handle, tone, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Start sharing video stream to the call
        /// </summary>
        /// <param name="stream">
        /// OutgoingVideoStream to be shared
        /// </param>
        private async System.Threading.Tasks.Task StartVideoInternalAsync(Azure.Communication.Calling.UnityClient.OutgoingVideoStream stream)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_start_video_internal(this.handle, stream != null ? stream.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Stop sharing video stream to the call
        /// </summary>
        /// <param name="stream">
        /// OutgoingVideoStream to stop sharing
        /// </param>
        private async System.Threading.Tasks.Task StopVideoInternalAsync(Azure.Communication.Calling.UnityClient.OutgoingVideoStream stream)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_stop_video_internal(this.handle, stream != null ? stream.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// HangUp a call
        /// </summary>
        /// <param name="options">
        /// Options for call hangUp
        /// </param>
        public async System.Threading.Tasks.Task HangUpAsync(Azure.Communication.Calling.UnityClient.HangUpOptions options)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_hang_up(this.handle, options != null ? options.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Remove a participant from a call
        /// </summary>
        /// <param name="options">
        /// Options for call hangUp
        /// </param>
        public async System.Threading.Tasks.Task RemoveParticipantAsync(Azure.Communication.Calling.UnityClient.RemoteParticipant participant)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_remove_participant(this.handle, participant != null ? participant.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Hold this call
        /// </summary>
        public async System.Threading.Tasks.Task HoldAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_hold(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Resume this call
        /// </summary>
        public async System.Threading.Tasks.Task ResumeAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_resume(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Sets the desired RawVideoFrameKind when receiving video frames
        /// </summary>
        public void SwitchIncomingRawVideoFrameKind(Azure.Communication.Calling.UnityClient.RawVideoFrameKind frameKind)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_switch_incoming_raw_video_frame_kind(this.handle, frameKind));
        }

        /// <summary>
        /// Start sharing system audio
        /// </summary>
        public async System.Threading.Tasks.Task StartSystemAudioSharingAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_start_system_audio_sharing(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Stop sharing system audio
        /// </summary>
        public async System.Threading.Tasks.Task StopSystemAudioSharingAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_stop_system_audio_sharing(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Set the constraints for outgoing and incoming video streams
        /// </summary>
        public void SetVideoConstraints(Azure.Communication.Calling.UnityClient.VideoConstraints constraints)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_set_video_constraints(this.handle, constraints != null ? constraints.handle : IntPtr.Zero));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        // Class extension begins for CommonCall.
        /// <summary>
        /// Mute local microphone.
        /// </summary>
        public async System.Threading.Tasks.Task MuteAsync()
        {
            await MuteInternalAsync(true);
        }

        /// <summary>
        /// Unmute local microphone.
        /// </summary>
        public async System.Threading.Tasks.Task UnmuteAsync()
        {
            await MuteInternalAsync(false);
        }

        /// <summary>
        /// Start sharing video stream to the call.
        /// </summary>
        public async System.Threading.Tasks.Task StartVideoAsync(Azure.Communication.Calling.UnityClient.OutgoingVideoStream stream)
        {
            await StartVideoInternalAsync(stream);
        }

        /// <summary>
        /// Stop sharing video stream to the call.
        /// </summary>
        public async System.Threading.Tasks.Task StopVideoAsync(Azure.Communication.Calling.UnityClient.OutgoingVideoStream stream)
        {
            await StopVideoInternalAsync(stream);
        }

        /// <summary>
        /// Get the identity of the local participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier LocalIdentifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(LocalIdentifierInternal);
            }
        }
        // Class extension ends for CommonCall.

    }

    /// <summary>
    /// Describes a common call's information
    /// </summary>
    public abstract partial class CommonCallDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonCallDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_info_addref(this.handle);
        }

        ~CommonCallDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get the server call ID
        /// </summary>
        public async System.Threading.Tasks.Task<string> GetServerCallIdAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => Azure.Communication.Calling.UnityClient.PackedValue.UnpackString(pv_), System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_call_info_get_server_call_id(this.handle, promise_.Handle));
                return await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Describes a CommonCallsUpdated event
    /// </summary>
    public partial class CommonCallsUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonCallsUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_addref(this.handle);
        }

        ~CommonCallsUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// New calls being tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommonCommunicationCall> AddedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommonCommunicationCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_get_added_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Factories.CommonCallFactory(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.CommonCommunicationCall>();
                return result;
            }
        }

        /// <summary>
        /// Calls that are no longer tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommonCommunicationCall> RemovedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CommonCommunicationCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_calls_updated_event_args_get_removed_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Factories.CommonCallFactory(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.CommonCommunicationCall>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CommonCallsUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an common incoming call
    /// </summary>
    public abstract partial class CommonIncomingCall : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonIncomingCall(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_addref(this.handle);
        }

        ~CommonIncomingCall()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Informs how video frames will be available for encoding or decoding.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CommunicationCallKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CommunicationCallKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Describe the reason why a call has ended
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallEndReason CallEndReason
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallEndReason result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_get_call_end_reason(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallEndReason.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Information about the caller
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallerDetails CallerDetails
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallerDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_get_caller_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallerDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Id of the call
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Is incoming video enabled
        /// </summary>
        public bool IsVideoEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_get_is_video_enabled(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommonIncomingCallCallEndedEventHandlerNative))]
        private static void CallEndedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(CallEnded));

            Azure.Communication.Calling.UnityClient.CommonIncomingCall instance = Factories.CommonIncomingCallFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommonIncomingCallCallEndedEventHandlerNative CallEndedStaticHandlerDelegate = CallEndedStaticHandler;

        /// <summary>
        /// CallEnded Event. Occurs when recording incoming call was not answered and call ended.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> CallEnded
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CallEnded), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_set_call_ended(this.handle, ((ICachedObject)this).Cookie, CallEndedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CallEnded), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_set_call_ended(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Reject this incoming call
        /// </summary>
        public async System.Threading.Tasks.Task RejectAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_reject(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// EventArgs for BaseIncomingCallReceived event.
    /// </summary>
    public partial class CommonIncomingCallReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommonIncomingCallReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_received_event_args_addref(this.handle);
        }

        ~CommonIncomingCallReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.CommonIncomingCall IncomingCall
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CommonIncomingCall result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_common_incoming_call_received_event_args_get_incoming_call(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CommonIncomingCallFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CommonIncomingCallReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Captions for managing captions for a group call.
    /// </summary>
    public partial class CommunicationCaptions : Azure.Communication.Calling.UnityClient.CallCaptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommunicationCaptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommunicationCaptionsActiveSpokenLanguageChangedEventHandlerNative))]
        private static void ActiveSpokenLanguageChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ActiveSpokenLanguageChanged));

            Azure.Communication.Calling.UnityClient.CommunicationCaptions instance = Azure.Communication.Calling.UnityClient.CommunicationCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommunicationCaptionsActiveSpokenLanguageChangedEventHandlerNative ActiveSpokenLanguageChangedStaticHandlerDelegate = ActiveSpokenLanguageChangedStaticHandler;

        /// <summary>
        /// ActiveSpokenLanguage Event. Occurs when spoken language is changed.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ActiveSpokenLanguageChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveSpokenLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_active_spoken_language_changed(this.handle, ((ICachedObject)this).Cookie, ActiveSpokenLanguageChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveSpokenLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_active_spoken_language_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommunicationCaptionsCaptionsEnabledChangedEventHandlerNative))]
        private static void CaptionsEnabledChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(CaptionsEnabledChanged));

            Azure.Communication.Calling.UnityClient.CommunicationCaptions instance = Azure.Communication.Calling.UnityClient.CommunicationCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommunicationCaptionsCaptionsEnabledChangedEventHandlerNative CaptionsEnabledChangedStaticHandlerDelegate = CaptionsEnabledChangedStaticHandler;

        /// <summary>
        /// isEnabled Event. Occurs when captions is started or stopped.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> CaptionsEnabledChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsEnabledChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_captions_enabled_changed(this.handle, ((ICachedObject)this).Cookie, CaptionsEnabledChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsEnabledChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_captions_enabled_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.CommunicationCaptionsCaptionsReceivedEventHandlerNative))]
        private static void CaptionsReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs>>(
                    cookie,
                    nameof(CaptionsReceived));

            Azure.Communication.Calling.UnityClient.CommunicationCaptions instance = Azure.Communication.Calling.UnityClient.CommunicationCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.CommunicationCaptionsCaptionsReceivedEventHandlerNative CaptionsReceivedStaticHandlerDelegate = CaptionsReceivedStaticHandler;

        /// <summary>
        /// CaptionsReceived Event. Occurs when captions is received for a call.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs> CaptionsReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_captions_received(this.handle, ((ICachedObject)this).Cookie, CaptionsReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_set_captions_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.CommunicationCaptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CommunicationCaptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CommunicationCaptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CommunicationCaptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an CaptionsReceived event for when new captions data comes in
    /// </summary>
    public partial class CommunicationCaptionsReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CommunicationCaptionsReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_addref(this.handle);
        }

        ~CommunicationCaptionsReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the speaker in this caption.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallerDetails Speaker
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallerDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_get_speaker(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallerDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// CaptionsResultType is Partial if text contains partially spoken sentence. It is set to Final once the sentence has been completely transcribed.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CaptionsResultType ResultType
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CaptionsResultType result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_get_result_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Timestamp denoting the time when the corresponding speech was made. timestamp is received from call recorder in C# ticks since 1/1/1900 (NTP Epoch) timestamp is converted to ms since 1/1/1970 (UNIX Epoch) 10000 C# ticks / 1 ms
        /// </summary>
        public DateTimeOffset Timestamp
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_get_timestamp(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        /// <summary>
        /// The transcribed text.
        /// </summary>
        public string SpokenText
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_get_spoken_text(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// language identifier for the speaker. Ex: en-US.
        /// </summary>
        public string SpokenLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_communication_captions_received_event_args_get_spoken_language(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CommunicationCaptionsReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing the Content Sharing of the Call
    /// </summary>
    public partial class ContentSharingCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ContentSharingCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        public Azure.Communication.Calling.UnityClient.ContentSharingState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.ContentSharingState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_get_state(this.handle, out result));
                return result;
            }
        }

        public Azure.Communication.Calling.UnityClient.ContentSharingType Type
        {
            get
            {
                Azure.Communication.Calling.UnityClient.ContentSharingType result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Information about the content sharing session of the call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.ContentSharingInfo ContentSharingDetails
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.ContentSharingInfo result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_get_content_sharing_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.ContentSharingInfoFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.ContentSharingCallFeatureContentSharingDetailsChangedEventHandlerNative))]
        private static void ContentSharingDetailsChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ContentSharingDetailsChanged));

            Azure.Communication.Calling.UnityClient.ContentSharingCallFeature instance = Azure.Communication.Calling.UnityClient.ContentSharingCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.ContentSharingCallFeatureContentSharingDetailsChangedEventHandlerNative ContentSharingDetailsChangedStaticHandlerDelegate = ContentSharingDetailsChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ContentSharingDetailsChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ContentSharingDetailsChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_set_content_sharing_details_changed(this.handle, ((ICachedObject)this).Cookie, ContentSharingDetailsChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ContentSharingDetailsChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_set_content_sharing_details_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.ContentSharingCallFeatureStateChangedEventHandlerNative))]
        private static void StateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(StateChanged));

            Azure.Communication.Calling.UnityClient.ContentSharingCallFeature instance = Azure.Communication.Calling.UnityClient.ContentSharingCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.ContentSharingCallFeatureStateChangedEventHandlerNative StateChangedStaticHandlerDelegate = StateChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> StateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_set_state_changed(this.handle, ((ICachedObject)this).Cookie, StateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_call_feature_set_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.ContentSharingCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.ContentSharingCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.ContentSharingCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.ContentSharingCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public abstract partial class ContentSharingInfo : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ContentSharingInfo(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_info_addref(this.handle);
        }

        ~ContentSharingInfo()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_content_sharing_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// A call feature to use data channel
    /// </summary>
    public partial class DataChannelCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Is the data channel active
        /// </summary>
        public bool IsActive
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_get_is_active(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DataChannelCallFeatureActiveChangedEventHandlerNative))]
        private static void ActiveChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ActiveChanged));

            Azure.Communication.Calling.UnityClient.DataChannelCallFeature instance = Azure.Communication.Calling.UnityClient.DataChannelCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DataChannelCallFeatureActiveChangedEventHandlerNative ActiveChangedStaticHandlerDelegate = ActiveChangedStaticHandler;

        /// <summary>
        /// Occurs when a data channel is opened
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ActiveChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_set_active_changed(this.handle, ((ICachedObject)this).Cookie, ActiveChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_set_active_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DataChannelCallFeatureReceiverCreatedEventHandlerNative))]
        private static void ReceiverCreatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs>>(
                    cookie,
                    nameof(ReceiverCreated));

            Azure.Communication.Calling.UnityClient.DataChannelCallFeature instance = Azure.Communication.Calling.UnityClient.DataChannelCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DataChannelCallFeatureReceiverCreatedEventHandlerNative ReceiverCreatedStaticHandlerDelegate = ReceiverCreatedStaticHandler;

        /// <summary>
        /// Occurs when a data channel is opened
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs> ReceiverCreated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ReceiverCreated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_set_receiver_created(this.handle, ((ICachedObject)this).Cookie, ReceiverCreatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ReceiverCreated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_set_receiver_created(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Creates a new data channel sender with user-specified options
        /// </summary>
        /// <param name="options">
        /// The object that specifies the options used to create a data channel.
        /// </param>
        public Azure.Communication.Calling.UnityClient.DataChannelSender GetDataChannelSender(Azure.Communication.Calling.UnityClient.DataChannelSenderOptions options)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.DataChannelSender result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_call_feature_get_data_channel_sender(this.handle, options != null ? options.handle : IntPtr.Zero, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DataChannelSender.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.DataChannelCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes the message received including a sequence number and user-provided data
    /// </summary>
    public partial class DataChannelMessage : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelMessage(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~DataChannelMessage()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Sequence number indicating the order of the message
        /// </summary>
        public long SequenceNumber
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_get_sequence_number(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Reads the data that was provided in this message.
        /// </summary>
        public void ReadData(out System.IntPtr bytes, out int size)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_message_read_data(this.handle, out bytes, out size));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DataChannelMessage GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelMessage result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelMessage>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelMessage(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a data channel receiver created event data
    /// </summary>
    public partial class DataChannelReceiverCreatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelReceiverCreatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_created_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_created_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_created_event_args_addref(this.handle);
        }

        ~DataChannelReceiverCreatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_created_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The receiver created with the event
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DataChannelReceiver Receiver
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.DataChannelReceiver result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_created_event_args_get_receiver(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DataChannelReceiver.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelReceiverCreatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes the data channel as a receiver to process the incoming data messages
    /// </summary>
    public partial class DataChannelReceiver : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelReceiver(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~DataChannelReceiver()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Data channel id
        /// </summary>
        public int ChannelId
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_get_channel_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Participant identifier of the sender
        /// </summary>
        private string SenderIdentifierInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_get_sender_identifier_internal(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DataChannelReceiverMessageReceivedEventHandlerNative))]
        private static void MessageReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(MessageReceived));

            Azure.Communication.Calling.UnityClient.DataChannelReceiver instance = Azure.Communication.Calling.UnityClient.DataChannelReceiver.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DataChannelReceiverMessageReceivedEventHandlerNative MessageReceivedStaticHandlerDelegate = MessageReceivedStaticHandler;

        /// <summary>
        /// Occurs when a data channel message is received
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> MessageReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MessageReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_set_message_received(this.handle, ((ICachedObject)this).Cookie, MessageReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MessageReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_set_message_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DataChannelReceiverClosedEventHandlerNative))]
        private static void ClosedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(Closed));

            Azure.Communication.Calling.UnityClient.DataChannelReceiver instance = Azure.Communication.Calling.UnityClient.DataChannelReceiver.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DataChannelReceiverClosedEventHandlerNative ClosedStaticHandlerDelegate = ClosedStaticHandler;

        /// <summary>
        /// Occurs when a data channel is notified to close
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> Closed
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.Closed), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_set_closed(this.handle, ((ICachedObject)this).Cookie, ClosedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.Closed), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_set_closed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Fetch data message from the data channel
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DataChannelMessage PopMessage()
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.DataChannelMessage result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_receiver_pop_message(this.handle, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DataChannelMessage.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DataChannelReceiver GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelReceiver result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelReceiver>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelReceiver(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for DataChannelReceiver.
        public Azure.Communication.Calling.UnityClient.CallIdentifier SenderIdentifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(SenderIdentifierInternal);
            }
        }
        // Class extension ends for DataChannelReceiver.

    }

    /// <summary>
    /// Describes a data channel as the sender to send messages to one or more participants
    /// </summary>
    public partial class DataChannelSender : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelSender(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~DataChannelSender()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Data channel id
        /// </summary>
        public int ChannelId
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_get_channel_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Gets the max size allowed for a message
        /// </summary>
        public int MaxMessageSizeInBytes
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_get_max_message_size_in_bytes(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Updates the participants of this data channel
        /// </summary>
        /// <param name="participants">
        /// The list of updated participant identifiers.
        /// </param>
        private void SetParticipantsInternal([In] string[] participants)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_set_participants_internal(this.handle, participants, participants?.Length ?? 0));
        }

        public async System.Threading.Tasks.Task SendMessageAsync([In] byte[] data)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_send_message_async_data(this.handle, data, data?.Length ?? 0, promise_.Handle));
                await promise_.Task;
            }
        }

        private async System.Threading.Tasks.Task SendMessageAsync(System.IntPtr data, int dataLength)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_send_message_async_int_ptr_data_int32_data_length(this.handle, data, dataLength, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Close the data channel
        /// </summary>
        public void CloseSender()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_close_sender(this.handle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DataChannelSender GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelSender result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelSender>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelSender(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for DataChannelSender.
        public void SetParticipants(Azure.Communication.Calling.UnityClient.CallIdentifier[] participants)
        {
            SetParticipantsInternal(Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(participants));
        }

        public async Task SendMessageAsync(ReadOnlyMemory<byte> data)
        {
            using(var memoryHandle = data.Pin())
            {
                IntPtr dataAddress;
                unsafe { dataAddress = new IntPtr(memoryHandle.Pointer); }
                await SendMessageAsync(dataAddress, data.Length);
            }
        }
        // Class extension ends for DataChannelSender.

    }

    /// <summary>
    /// Describes the options used to create a data channel sender
    /// </summary>
    public partial class DataChannelSenderOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DataChannelSenderOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public DataChannelSenderOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~DataChannelSenderOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Data channel id
        /// </summary>
        public int ChannelId
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_get_channel_id(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_set_channel_id(this.handle, value));
            }
        }

        /// <summary>
        /// Data channel bitrate in kbps
        /// </summary>
        public int BitrateInKbps
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_get_bitrate_in_kbps(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_set_bitrate_in_kbps(this.handle, value));
            }
        }

        /// <summary>
        /// Data channel priority
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DataChannelPriority Priority
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DataChannelPriority result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_get_priority(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_set_priority(this.handle, value));
            }
        }

        /// <summary>
        /// Data channel reliability
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DataChannelReliability Reliability
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DataChannelReliability result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_get_reliability(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_set_reliability(this.handle, value));
            }
        }

        /// <summary>
        /// Identifiers for the data channel participants
        /// </summary>
        private string[] ParticipantsInternal
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_get_participants_internal(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_data_channel_sender_options_set_participants_internal(this.handle, value, value?.Length ?? 0));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DataChannelSenderOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DataChannelSenderOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DataChannelSenderOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DataChannelSenderOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for DataChannelSenderOptions.
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CallIdentifier> Participants
        {
            get
            {
                CallIdentifier[] identifiers = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertMrisToIdentifiers(ParticipantsInternal);
                return identifiers?.ToList().AsReadOnly();
            }
            set
            {
                ParticipantsInternal = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(value.ToArray());
            }
        }
        // Class extension ends for DataChannelSenderOptions.

    }

    /// <summary>
    /// Device manager
    /// </summary>
    public partial class DeviceManager : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DeviceManager(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_addref(this.handle);
        }

        ~DeviceManager()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Gets the currently selected microphone
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioDeviceDetails Microphone
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.AudioDeviceDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_get_microphone(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Gets the currently selected speaker
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioDeviceDetails Speaker
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.AudioDeviceDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_get_speaker(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Get the list of currently connected video devices
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> Cameras
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_get_cameras(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.VideoDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.VideoDeviceDetails>();
                return result;
            }
        }

        /// <summary>
        /// Get the list of currently connected microphones
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> Microphones
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_get_microphones(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.AudioDeviceDetails>();
                return result;
            }
        }

        /// <summary>
        /// Get the list of currently connected speakers
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> Speakers
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.AudioDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_get_speakers(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.AudioDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.AudioDeviceDetails>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DeviceManagerMicrophonesUpdatedEventHandlerNative))]
        private static void MicrophonesUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs>>(
                    cookie,
                    nameof(MicrophonesUpdated));

            Azure.Communication.Calling.UnityClient.DeviceManager instance = Azure.Communication.Calling.UnityClient.DeviceManager.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DeviceManagerMicrophonesUpdatedEventHandlerNative MicrophonesUpdatedStaticHandlerDelegate = MicrophonesUpdatedStaticHandler;

        /// <summary>
        /// MicrophonesUpdated Event. Occurs when the audio devices are added or removed on the current DeviceManager
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs> MicrophonesUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophonesUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_microphones_updated(this.handle, ((ICachedObject)this).Cookie, MicrophonesUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophonesUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_microphones_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DeviceManagerSpeakersUpdatedEventHandlerNative))]
        private static void SpeakersUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs>>(
                    cookie,
                    nameof(SpeakersUpdated));

            Azure.Communication.Calling.UnityClient.DeviceManager instance = Azure.Communication.Calling.UnityClient.DeviceManager.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DeviceManagerSpeakersUpdatedEventHandlerNative SpeakersUpdatedStaticHandlerDelegate = SpeakersUpdatedStaticHandler;

        /// <summary>
        /// SpeakersUpdated Event. Occurs when the audio devices are added or removed on the current DeviceManager
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.AudioDevicesUpdatedEventArgs> SpeakersUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakersUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_speakers_updated(this.handle, ((ICachedObject)this).Cookie, SpeakersUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakersUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_speakers_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DeviceManagerCamerasUpdatedEventHandlerNative))]
        private static void CamerasUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs>>(
                    cookie,
                    nameof(CamerasUpdated));

            Azure.Communication.Calling.UnityClient.DeviceManager instance = Azure.Communication.Calling.UnityClient.DeviceManager.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DeviceManagerCamerasUpdatedEventHandlerNative CamerasUpdatedStaticHandlerDelegate = CamerasUpdatedStaticHandler;

        /// <summary>
        /// CamerasUpdated Event. Occurs when the video devices are added or removed on the current DeviceManager
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs> CamerasUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CamerasUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_cameras_updated(this.handle, ((ICachedObject)this).Cookie, CamerasUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CamerasUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_cameras_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Set the microphone to be used for all active calls
        /// </summary>
        /// <param name="microphoneDevice">
        /// 
        /// </param>
        public void SetMicrophone(Azure.Communication.Calling.UnityClient.AudioDeviceDetails microphoneDevice)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_microphone(this.handle, microphoneDevice != null ? microphoneDevice.handle : IntPtr.Zero));
        }

        /// <summary>
        /// Set the speakers to be used for all active calls
        /// </summary>
        /// <param name="speakerDevice">
        /// 
        /// </param>
        public void SetSpeaker(Azure.Communication.Calling.UnityClient.AudioDeviceDetails speakerDevice)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_speaker(this.handle, speakerDevice != null ? speakerDevice.handle : IntPtr.Zero));
        }

        private void SetDeviceOrientationInternal(int angle)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_device_manager_set_device_orientation_internal(this.handle, angle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DeviceManager GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DeviceManager result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DeviceManager>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DeviceManager(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Event payload containing information of a boolean diagnostic change event.
    /// </summary>
    public partial class DiagnosticFlagChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DiagnosticFlagChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_addref(this.handle);
        }

        ~DiagnosticFlagChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The new diagnostic value.
        /// </summary>
        public bool Value
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_get_value(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The name of the diagnostic that changed.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_flag_changed_event_args_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Event payload containing information of a quality diagnostic change event.
    /// </summary>
    public partial class DiagnosticQualityChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DiagnosticQualityChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_addref(this.handle);
        }

        ~DiagnosticQualityChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The new diagnostic quality value.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DiagnosticQuality Value
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DiagnosticQuality result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_get_value(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The name of the diagnostic that changed.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_diagnostic_quality_changed_event_args_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing the dominant speakers of a call
    /// </summary>
    public partial class DominantSpeakersCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DominantSpeakersCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Information about the dominant speakers of the call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DominantSpeakersDetails DominantSpeakersDetails
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.DominantSpeakersDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_call_feature_get_dominant_speakers_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.DominantSpeakersDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeatureDominantSpeakersChangedEventHandlerNative))]
        private static void DominantSpeakersChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(DominantSpeakersChanged));

            Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature instance = Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeatureDominantSpeakersChangedEventHandlerNative DominantSpeakersChangedStaticHandlerDelegate = DominantSpeakersChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> DominantSpeakersChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.DominantSpeakersChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_call_feature_set_dominant_speakers_changed(this.handle, ((ICachedObject)this).Cookie, DominantSpeakersChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.DominantSpeakersChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_call_feature_set_dominant_speakers_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DominantSpeakersCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about the dominant speakers of a call
    /// </summary>
    public partial class DominantSpeakersDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected DominantSpeakersDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_addref(this.handle);
        }

        ~DominantSpeakersDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// List of the current dominant speakers
        /// </summary>
        private System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> SpeakersInternal
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_get_speakers_internal(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        /// <summary>
        /// Last updated time of the current dominant speakers list
        /// </summary>
        public DateTimeOffset LastUpdatedAt
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_dominant_speakers_info_get_last_updated_at(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.DominantSpeakersDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.DominantSpeakersDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.DominantSpeakersDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.DominantSpeakersDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for DominantSpeakersInfo.
        /// <summary>
        /// Get a list of identifiers for the dominant speakers.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.CallIdentifier> Speakers
        {
            get
            {
                var speakersInternal = SpeakersInternal;
                if (speakersInternal == null)
                {
                    return null;
                }

                var speakers = new List<Azure.Communication.Calling.UnityClient.CallIdentifier>(speakersInternal.Count);
                for (int i = 0; i < speakersInternal.Count; i++)
                {
                    var remoteParticipant = speakersInternal[i];
                    speakers.Add(remoteParticipant.Identifier);
                }

                return speakers;
            }
        }
        // Class extension ends for DominantSpeakersInfo.

    }

    /// <summary>
    /// Options for emergency call of call agent
    /// </summary>
    public partial class EmergencyCallOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EmergencyCallOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration for emergency call options
        /// </summary>
        public EmergencyCallOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~EmergencyCallOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Specify the ISO 3166-1 alpha-2 emergency country code of the local participant for emergency calls
        /// </summary>
        public string CountryCode
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_get_country_code(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_emergency_call_options_set_country_code(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.EmergencyCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.EmergencyCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.EmergencyCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.EmergencyCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public partial class EndpointDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected EndpointDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_addref(this.handle);
        }

        ~EndpointDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public string ParticipantId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_get_participant_id(this.handle, out result));
                return result;
            }
        }

        public bool IsAudioStreamDelegated
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_get_is_audio_stream_delegated(this.handle, out result));
                return result;
            }
        }

        public int AudioStreamDelegatedId
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_endpoint_details_get_audio_stream_delegated_id(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.EndpointDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.EndpointDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.EndpointDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.EndpointDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options for joining a group call
    /// </summary>
    public partial class GroupCallLocator : Azure.Communication.Calling.UnityClient.JoinMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GroupCallLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(System.Guid groupId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_group_call_locator_create_guid_group_id(groupId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a group id
        /// </summary>
        /// <param name="groupId">
        /// A Guid representing the group to join.
        /// </param>
        public GroupCallLocator(System.Guid groupId) : base(Create(groupId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// The unique identifier for the group conversation
        /// </summary>
        public System.Guid GroupId
        {
            get
            {
                System.Guid result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_group_call_locator_get_group_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.GroupCallLocator GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.GroupCallLocator result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.GroupCallLocator>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.GroupCallLocator(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Locator used to joining group chat call
    /// </summary>
    public partial class GroupChatCallLocator : Azure.Communication.Calling.UnityClient.JoinMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected GroupChatCallLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string threadId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_group_chat_call_locator_create_string_thread_id(threadId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a thread id
        /// </summary>
        /// <param name="threadId">
        /// A string representing the thread id of a group to join.
        /// </param>
        public GroupChatCallLocator(string threadId) : base(Create(threadId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// The unique thread identifier for the group conversation
        /// </summary>
        public string ChatThreadId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_group_chat_call_locator_get_thread_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.GroupChatCallLocator GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.GroupChatCallLocator result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.GroupChatCallLocator>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.GroupChatCallLocator(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Property bag class for hanging up a call
    /// </summary>
    public partial class HangUpOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected HangUpOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public HangUpOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~HangUpOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Use to determine whether the current call should be terminated for all participant on the call or not
        /// </summary>
        public bool ForEveryone
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_get_for_everyone(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_hang_up_options_set_for_everyone(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.HangUpOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.HangUpOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.HangUpOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.HangUpOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an ICE Server
    /// </summary>
    public partial class IceServer : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IceServer(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration.
        /// </summary>
        public IceServer()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~IceServer()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Urls for the ICE servers
        /// </summary>
        private string[] UrlsInternal
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_urls_internal(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_urls_internal(this.handle, value, value?.Length ?? 0));
            }
        }

        /// <summary>
        /// Realm for the ICE servers
        /// </summary>
        public string Realm
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_realm(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_realm(this.handle, value));
            }
        }

        /// <summary>
        /// TCP port for the ICE servers
        /// </summary>
        public int TcpPort
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_tcp_port(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_tcp_port(this.handle, value));
            }
        }

        /// <summary>
        /// UDP port for the ICE servers
        /// </summary>
        public int UdpPort
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_udp_port(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_udp_port(this.handle, value));
            }
        }

        /// <summary>
        /// Username for the ICE servers if credential infomation is needed for the server
        /// </summary>
        public string Username
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_username(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_username(this.handle, value));
            }
        }

        /// <summary>
        /// Password for the ICE servers if credential infomation is needed for the server
        /// </summary>
        public string Password
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_get_password(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_ice_server_set_password(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IceServer GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IceServer result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IceServer>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IceServer(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for IceServer.
        public System.Collections.Generic.IReadOnlyList<System.Uri> Uris
        {
            set
            {
                UrlsInternal = value.Select(uri => uri.ToString()).ToArray();
            }

            get
            {
                return UrlsInternal.Select(url => new System.Uri(url)).ToList().AsReadOnly();
            }
        }
        // Class extension ends for IceServer.

    }

    /// <summary>
    /// Property bag class for Incoming Audio Options. Use this class to set audio settings required during a call (start/join)
    /// </summary>
    public partial class IncomingAudioOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingAudioOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public IncomingAudioOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~IncomingAudioOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Start an outgoing or accept incoming call with speaker muted (true) or un-muted(false).
        /// </summary>
        public bool IsMuted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_get_is_muted(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_set_is_muted(this.handle, value));
            }
        }

        /// <summary>
        /// Incoming Audio Stream that will be started when the call connects.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.IncomingAudioStream Stream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingAudioStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_get_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.IncomingAudioStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_options_set_stream(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingAudioOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingAudioOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingAudioOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingAudioOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the incoming audio Media Statistics for a call.
    /// </summary>
    public partial class IncomingAudioStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingAudioStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~IncomingAudioStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name.
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Average packet jitter in milliseconds.
        /// </summary>
        public float? JitterInMs
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_get_jitter_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets received.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Packet Loss Rate (packets/second).
        /// </summary>
        public int? PacketsLostPerSecond
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_get_packets_lost_per_second(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction.
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_audio_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingAudioStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingAudioStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingAudioStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingAudioStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Base Class for all Incoming Audio Stream objects
    /// </summary>
    public abstract partial class IncomingAudioStream : Azure.Communication.Calling.UnityClient.CallAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

    }

    /// <summary>
    /// Describes an incoming call
    /// </summary>
    public partial class IncomingCall : Azure.Communication.Calling.UnityClient.CommonIncomingCall, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingCall(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Accept an incoming call
        /// </summary>
        /// <param name="options">
        /// Options for call Accepting the call
        /// </param>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.CommunicationCall> AcceptAsync(Azure.Communication.Calling.UnityClient.AcceptCallOptions options)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.CommunicationCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_accept(this.handle, options != null ? options.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.IncomingCall GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingCall result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingCall>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingCall(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// EventArgs for IncomingCallReceived event.
    /// </summary>
    public partial class IncomingCallReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingCallReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_received_event_args_addref(this.handle);
        }

        ~IncomingCallReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.IncomingCall IncomingCall
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingCall result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_call_received_event_args_get_incoming_call(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingCall.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingCallReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the incoming data channel Media Statistics for a call.
    /// </summary>
    public partial class IncomingDataChannelStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingDataChannelStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~IncomingDataChannelStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Average packet jitter in milliseconds.
        /// </summary>
        public float? JitterInMs
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_get_jitter_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets received.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_data_channel_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Aggregate for all incoming Media Statistics information.
    /// </summary>
    public partial class IncomingMediaStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingMediaStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~IncomingMediaStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The list of the audio statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingAudioStatistics> Audio
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingAudioStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_get_audio(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.IncomingAudioStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IncomingAudioStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the video statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingVideoStatistics> Video
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingVideoStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_get_video(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.IncomingVideoStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IncomingVideoStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the screen share statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics> ScreenShare
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_get_screen_share(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the data channel statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics> DataChannel
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_media_statistics_get_data_channel(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IncomingDataChannelStatistics>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingMediaStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingMediaStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingMediaStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingMediaStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an IncomingMixedAudio event for when new audio data comes in
    /// </summary>
    public partial class IncomingMixedAudioEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingMixedAudioEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_addref(this.handle);
        }

        ~IncomingMixedAudioEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Properties of the Raw Incoming Audio Buffer
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties StreamProperties
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_get_stream_properties(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Audio Buffer that was received
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawAudioBuffer AudioBuffer
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawAudioBuffer result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_mixed_audio_event_args_get_audio_buffer(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawAudioBuffer.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the incoming screen share Media Statistics for a call.
    /// </summary>
    public partial class IncomingScreenShareStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingScreenShareStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~IncomingScreenShareStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name.
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Bitrate in bits per second.
        /// </summary>
        public int? BitrateInBps
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_bitrate_in_bps(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Average packet jitter in milliseconds.
        /// </summary>
        public float? JitterInMs
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_jitter_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets received.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Packet Loss Rate (packets/second).
        /// </summary>
        public int? PacketsLostPerSecond
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_packets_lost_per_second(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame rate received on the RTP stream (frames/sec).
        /// </summary>
        public float? FrameRate
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_frame_rate(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame width of the decoded frame (pixels).
        /// </summary>
        public int? FrameWidth
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_frame_width(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame height of the decoded frame (pixels).
        /// </summary>
        public int? FrameHeight
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_frame_height(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Total freeze duration (milliseconds).
        /// </summary>
        public int? TotalFreezeDurationInMs
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_total_freeze_duration_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Remote Participant identifier for the owner of the video stream
        /// </summary>
        private string ParticipantIdentifierInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_screen_share_statistics_get_participant_identifier_internal(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingScreenShareStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an IncomingUnmixedAudio event for when new audio data comes in
    /// </summary>
    public partial class IncomingUnmixedAudioEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingUnmixedAudioEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_addref(this.handle);
        }

        ~IncomingUnmixedAudioEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RawAudioBuffer> AudioBuffer
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RawAudioBuffer> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_get_audio_buffer(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RawAudioBuffer.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RawAudioBuffer>();
                return result;
            }
        }

        private string[] RemoteParticipantIdsInternal
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_get_remote_participant_ids_internal(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
        }

        public System.Collections.Generic.IReadOnlyList<string> RemoteParticipantIds
        {
            get
            {
                IntPtr result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_get_remote_participant_ids(this.handle, out result_array, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result_array, result_length);
            }
        }

        public Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties StreamProperties
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_unmixed_audio_event_args_get_stream_properties(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold properties that configure IncomingVideoConstraints
    /// </summary>
    public partial class IncomingVideoConstraints : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingVideoConstraints(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public IncomingVideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~IncomingVideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Resolution preference: height
        /// </summary>
        public int MaxHeight
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_get_max_height(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_set_max_height(this.handle, value));
            }
        }

        /// <summary>
        /// Resolution preference: width
        /// </summary>
        public int MaxWidth
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_get_max_width(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_constraints_set_max_width(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingVideoConstraints GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingVideoConstraints result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingVideoConstraints>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingVideoConstraints(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold properties that configure IncomingVideoStreams
    /// </summary>
    public partial class IncomingVideoOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingVideoOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public IncomingVideoOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~IncomingVideoOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get or set the Incoming Video Stream that should be provided
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamKind StreamKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_get_stream_type(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_set_stream_type(this.handle, value));
            }
        }

        /// <summary>
        /// Get or set the RawVideoFrameKind that should be provided
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawVideoFrameKind FrameKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.RawVideoFrameKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_get_frame_type(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_set_frame_type(this.handle, value));
            }
        }

        public Azure.Communication.Calling.UnityClient.IncomingVideoConstraints Constraints
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingVideoConstraints result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_get_constraints(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingVideoConstraints.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_options_set_constraints(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingVideoOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingVideoOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingVideoOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingVideoOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the incoming video Media Statistics for a call.
    /// </summary>
    public partial class IncomingVideoStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingVideoStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~IncomingVideoStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name.
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Bitrate in bits per second.
        /// </summary>
        public int? BitrateInBps
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_bitrate_in_bps(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Average packet jitter in milliseconds.
        /// </summary>
        public float? JitterInMs
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_jitter_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets received.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Packet Loss Rate (packets/second).
        /// </summary>
        public int? PacketsLostPerSecond
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_packets_lost_per_second(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction.
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame rate received on the RTP stream (frames/sec).
        /// </summary>
        public float? FrameRate
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_frame_rate(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame width of the decoded frame (pixels).
        /// </summary>
        public int? FrameWidth
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_frame_width(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame height of the decoded frame (pixels).
        /// </summary>
        public int? FrameHeight
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_frame_height(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Total freeze duration (milliseconds).
        /// </summary>
        public int? TotalFreezeDurationInMs
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_total_freeze_duration_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Remote Participant identifier for the owner of the video stream
        /// </summary>
        private string ParticipantIdentifierInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_statistics_get_participant_identifier_internal(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.IncomingVideoStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.IncomingVideoStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.IncomingVideoStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.IncomingVideoStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains information about common properties between the different types of incoming video streams
    /// </summary>
    public abstract partial class IncomingVideoStream : Azure.Communication.Calling.UnityClient.CallVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected IncomingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Return the remote participant endpoint id that owns this incoming video streams Same user logged in from different devices will have different ParticipantSourceId Note: This field is not the same as CommunicationIdentifier.
        /// </summary>
        public string ParticipantSourceId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_incoming_video_stream_get_participant_source_id(this.handle, out result));
                return result;
            }
        }

    }

    /// <summary>
    /// Property bag class as container for SDK initialization options.
    /// </summary>
    internal partial class InitializationOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InitializationOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public InitializationOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~InitializationOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Path where logs should be saved on the disk
        /// </summary>
        public string DataPath
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_get_data_path(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_set_data_path(this.handle, value));
            }
        }

        /// <summary>
        /// Name of the log file
        /// </summary>
        public string LogFileName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_get_log_file_name(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_set_log_file_name(this.handle, value));
            }
        }

        /// <summary>
        /// Private Preview Only: Enable log encryption
        /// </summary>
        public bool IsEncrypted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_get_is_encrypted(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_set_is_encrypted(this.handle, value));
            }
        }

        /// <summary>
        /// Private Preview Only: Enable STDOUT logging. Disabled by default.
        /// </summary>
        public bool StdoutLogging
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_get_stdout_logging(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_initialization_options_set_stdout_logging(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.InitializationOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.InitializationOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.InitializationOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.InitializationOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Internal Use Only. Should not be used publicly. Will be removed in the future.
    /// </summary>
    internal partial class InternalTokenProvider : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected InternalTokenProvider(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_addref(this.handle);
        }

        /// <summary>
        /// Exclusively for Internal. Do not use publicly. Will be removed in the future.
        /// </summary>
        public InternalTokenProvider()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~InternalTokenProvider()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(TokenRequestedDelegateNative))]
        private static void OnTokenRequestedStaticHandler(IntPtr cookie, IntPtr sender)
        {
            Azure.Communication.Calling.UnityClient.TokenRequestedDelegate handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<Azure.Communication.Calling.UnityClient.TokenRequestedDelegate>(
                    cookie,
                    nameof(OnTokenRequested));

            handler?.Invoke(Azure.Communication.Calling.UnityClient.InternalTokenProvider.GetOrCreateInstance(sender, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TokenRequestedDelegateNative OnTokenRequestedStaticHandlerDelegate = OnTokenRequestedStaticHandler;

        /// <summary>
        /// TokenRequested event. Occurs when a new authentication token is needed on the current call.
        /// </summary>
        public event Azure.Communication.Calling.UnityClient.TokenRequestedDelegate OnTokenRequested
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.OnTokenRequested), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_set_on_token_requested(this.handle, ((ICachedObject)this).Cookie, OnTokenRequestedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.OnTokenRequested), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_set_on_token_requested(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Exclusively for Internal. Do not use publicly. Will be removed in the future.
        /// </summary>
        /// <param name="token">
        /// The authentication token.
        /// </param>
        /// <param name="accountIdentity">
        /// The account identity used for internal communication.
        /// </param>
        /// <param name="scopes">
        /// The token scopes.
        /// </param>
        /// <param name="displayName">
        /// The display name of the call participant.
        /// </param>
        /// <param name="resourceId">
        /// The ACS resource Id of the token.
        /// </param>
        /// <param name="countryCode">
        /// The country code associated with the token.
        /// </param>
        public void SetToken(string token, string accountIdentity, string[] scopes, string displayName, string resourceId, string countryCode)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_set_token(this.handle, token, accountIdentity, scopes, scopes?.Length ?? 0, displayName, resourceId, countryCode));
        }

        /// <summary>
        /// Exclusively for Internal. Do not use publicly. Will be removed in the future.
        /// </summary>
        public bool CheckTokenScope()
        {
            bool result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_check_token_scope(this.handle, out result));
            return result;
        }

        /// <summary>
        /// Exclusively for Internal. Do not use publicly. Will be removed in the future.
        /// </summary>
        /// <param name="token">
        /// The authentication token.
        /// </param>
        public void ParseToken(string token)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_parse_token(this.handle, token));
        }

        /// <summary>
        /// Exclusively for Internal. Do not use publicly. Will be removed in the future.
        /// </summary>
        /// <param name="error">
        /// The error message resulting as a failure of authentication token retrieval attempt.
        /// </param>
        public void SetError(string error)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_internal_token_provider_set_error(this.handle, error));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.InternalTokenProvider GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.InternalTokenProvider result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.InternalTokenProvider>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.InternalTokenProvider(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Holds options for video an audio
    /// </summary>
    public partial class JoinCallOptions : Azure.Communication.Calling.UnityClient.CallOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JoinCallOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_join_call_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public JoinCallOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.JoinCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.JoinCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.JoinCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.JoinCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// JoinMeetingLocator super type, locator for joining meetings
    /// </summary>
    public abstract partial class JoinMeetingLocator : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JoinMeetingLocator(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_join_meeting_locator_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_join_meeting_locator_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_join_meeting_locator_addref(this.handle);
        }

        ~JoinMeetingLocator()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_join_meeting_locator_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// JoinTeamsMeetingLocator super type, locator for joining teams meetings
    /// </summary>
    public abstract partial class JoinTeamsMeetingLocator : Azure.Communication.Calling.UnityClient.JoinMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected JoinTeamsMeetingLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

    }

    /// <summary>
    /// Holds properties that configure outgoing audio preprocessing during call
    /// </summary>
    public partial class LiveOutgoingAudioFilters : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LiveOutgoingAudioFilters(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~LiveOutgoingAudioFilters()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Changes mode/type of Noise Suppression
        /// </summary>
        public Azure.Communication.Calling.UnityClient.NoiseSuppressionMode NoiseSuppressionMode
        {
            get
            {
                Azure.Communication.Calling.UnityClient.NoiseSuppressionMode result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_get_noise_suppression_mode(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_set_noise_suppression_mode(this.handle, value));
            }
        }

        /// <summary>
        /// Toggles Music Mode
        /// </summary>
        public bool MusicModeEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_get_music_mode_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_set_music_mode_enabled(this.handle, value));
            }
        }

        /// <summary>
        /// Toggles Echo Cancellation. Requires Music Mode to be on.
        /// </summary>
        public bool AcousticEchoCancellationEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_get_acoustic_echo_cancellation_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_live_outgoing_audio_filters_set_acoustic_echo_cancellation_enabled(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LiveOutgoingAudioFilters(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Local (Physical device) Audio Stream
    /// </summary>
    public partial class LocalOutgoingAudioStream : Azure.Communication.Calling.UnityClient.OutgoingAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalOutgoingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_outgoing_audio_stream_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public LocalOutgoingAudioStream() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.LocalOutgoingAudioStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LocalOutgoingAudioStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LocalOutgoingAudioStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LocalOutgoingAudioStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Wraps the user facing diagnostics feature in the call context.
    /// </summary>
    public partial class LocalUserDiagnosticsCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalUserDiagnosticsCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Source for all network diagnostics.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics NetworkDiagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_user_diagnostics_call_feature_get_network_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Source for all media diagnostics.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallMediaDiagnostics MediaDiagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallMediaDiagnostics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_user_diagnostics_call_feature_get_media_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LocalUserDiagnosticsCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// LocalVideoStream Feature for managing video effects.
    /// </summary>
    public partial class LocalVideoEffectsFeature : Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalVideoEffectsFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectEnabledEventHandlerNative))]
        private static void VideoEffectEnabledStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs>>(
                    cookie,
                    nameof(VideoEffectEnabled));

            Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature instance = Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectEnabledEventHandlerNative VideoEffectEnabledStaticHandlerDelegate = VideoEffectEnabledStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs> VideoEffectEnabled
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectEnabled), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_enabled(this.handle, ((ICachedObject)this).Cookie, VideoEffectEnabledStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectEnabled), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_enabled(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectDisabledEventHandlerNative))]
        private static void VideoEffectDisabledStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs>>(
                    cookie,
                    nameof(VideoEffectDisabled));

            Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature instance = Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectDisabledEventHandlerNative VideoEffectDisabledStaticHandlerDelegate = VideoEffectDisabledStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs> VideoEffectDisabled
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectDisabled), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_disabled(this.handle, ((ICachedObject)this).Cookie, VideoEffectDisabledStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectDisabled), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_disabled(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectErrorEventHandlerNative))]
        private static void VideoEffectErrorStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs>>(
                    cookie,
                    nameof(VideoEffectError));

            Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature instance = Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeatureVideoEffectErrorEventHandlerNative VideoEffectErrorStaticHandlerDelegate = VideoEffectErrorStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs> VideoEffectError
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectError), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_error(this.handle, ((ICachedObject)this).Cookie, VideoEffectErrorStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.VideoEffectError), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_set_video_effect_error(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Checks if a video effect is supported on the device. Video effect to check if supported
        /// </summary>
        /// <param name="effect">
        /// Video effect to check if supported
        /// </param>
        public bool IsEffectSupported(Azure.Communication.Calling.UnityClient.VideoEffect effect)
        {
            bool result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_is_effect_supported(this.handle, effect != null ? effect.handle : IntPtr.Zero, out result));
            return result;
        }

        /// <summary>
        /// Enables a video effect. Video effect to start
        /// </summary>
        /// <param name="effect">
        /// Video effect to start
        /// </param>
        public void EnableEffect(Azure.Communication.Calling.UnityClient.VideoEffect effect)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_enable_effect(this.handle, effect != null ? effect.handle : IntPtr.Zero));
        }

        /// <summary>
        /// Disable an enabled video effect.
        /// </summary>
        public void DisableEffect(Azure.Communication.Calling.UnityClient.VideoEffect effect)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_effects_feature_disable_effect(this.handle, effect != null ? effect.handle : IntPtr.Zero));
        }

        internal static Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// LocalVideoStreamFeature base type, features extensions for local video stream.
    /// </summary>
    public abstract partial class LocalVideoStreamFeature : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalVideoStreamFeature(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_feature_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_feature_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_feature_addref(this.handle);
        }

        ~LocalVideoStreamFeature()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_feature_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the extended LocalVideoStreamFeature.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_feature_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Lists all the available Local Video Stream Features
    /// </summary>
    public partial class LocalVideoStreamFeatures : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalVideoStreamFeatures(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_features_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_features_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_features_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~LocalVideoStreamFeatures()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_features_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature VideoEffects
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_features_get_video_effects(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.LocalVideoEffectsFeature.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Local video stream information
    /// </summary>
    public partial class LocalOutgoingVideoStream : Azure.Communication.Calling.UnityClient.OutgoingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LocalOutgoingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(Azure.Communication.Calling.UnityClient.VideoDeviceDetails camera)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_create_video_device_info_camera(camera != null ? camera.handle : IntPtr.Zero, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a camera device parameter
        /// </summary>
        /// <param name="camera">
        /// Camera device to use for the local video stream
        /// </param>
        public LocalOutgoingVideoStream(Azure.Communication.Calling.UnityClient.VideoDeviceDetails camera) : base(Create(camera), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Video device to use as source for local video.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoDeviceDetails Source
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.VideoDeviceDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_get_source(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.VideoDeviceDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Unique Identifier of the current local preview video.
        /// </summary>
        private int PreviewIdInternal
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_get_preview_id_internal(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Entry point for features not commonly used
        /// </summary>
        private Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature LocalVideoEffectsFeature
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.LocalVideoStreamFeature result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_get_local_video_effects_feature(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.LocalVideoStreamFeatureFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Entry point for features not commonly used
        /// </summary>
        public Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures Features
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_get_features(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.LocalVideoStreamFeatures.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Set a new video source
        /// </summary>
        /// <param name="videoDevice">
        /// 
        /// </param>
        private void SwitchVideoDeviceInfo(Azure.Communication.Calling.UnityClient.VideoDeviceDetails videoDeviceInfo)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_switch_video_device_info(this.handle, videoDeviceInfo != null ? videoDeviceInfo.handle : IntPtr.Zero));
        }

        /// <summary>
        /// Calls SwitchVideoDeviceInfo and RestartVideo while release the current video binding and creates a new one
        /// </summary>
        /// <param name="videoDevice">
        /// 
        /// </param>
        private async System.Threading.Tasks.Task SwitchSourceInternalAsync(Azure.Communication.Calling.UnityClient.VideoDeviceDetails videoDevice)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_local_video_stream_switch_source_internal(this.handle, videoDevice != null ? videoDevice.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Lowered hand event information.
    /// </summary>
    public partial class LoweredHandChangedEventArgs : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected LoweredHandChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_lowered_hand_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_lowered_hand_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_lowered_hand_changed_event_args_addref(this.handle);
        }

        ~LoweredHandChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_lowered_hand_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the event participant.
        /// </summary>
        private string Participant
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_lowered_hand_changed_event_args_get_participant(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for LoweredHandChangedEventArgs.
        /// <summary>
        /// Get the identity of the participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(Participant);
            }
        }
        // Class extension ends for LoweredHandChangedEventArgs.

    }

    /// <summary>
    /// Represents an object where all the latest diagnostics values for media diagnostic.
    /// </summary>
    public partial class MediaDiagnosticValues : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MediaDiagnosticValues(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_addref(this.handle);
        }

        ~MediaDiagnosticValues()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Last updated time of any diagnostic property.
        /// </summary>
        public DateTimeOffset LastUpdatedAt
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_last_updated_at(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        /// <summary>
        /// Value for `SpeakerNotFunctioning` diagnostic.
        /// </summary>
        public bool? IsSpeakerNotFunctioning
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_speaker_not_functioning(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `SpeakerNotFunctioningDeviceInUse` diagnostic.
        /// </summary>
        public bool? IsSpeakerBusy
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_speaker_busy(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `SpeakerMuted` diagnostic.
        /// </summary>
        public bool? IsSpeakerMuted
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_speaker_muted(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `SpeakerVolumeZero` diagnostic.
        /// </summary>
        public bool? IsSpeakerVolumeZero
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_speaker_volume_zero(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NoSpeakerDevicesEnumerated` diagnostic.
        /// </summary>
        public bool? AreNoSpeakerDevicesAvailable
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_no_speaker_devices_available(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `SpeakingWhileMicrophoneIsMuted` diagnostic.
        /// </summary>
        public bool? IsSpeakingWhileMicrophoneIsMuted
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_speaking_while_microphone_is_muted(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NoMicrophoneDevicesEnumerated` diagnostic.
        /// </summary>
        public bool? AreNoMicrophoneDevicesAvailable
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_no_microphone_devices_available(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `MicrophoneNotFunctioningDeviceInUse` diagnostic.
        /// </summary>
        public bool? IsMicrophoneBusy
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_microphone_busy(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `CameraFrozen` diagnostic.
        /// </summary>
        public bool? IsCameraFrozen
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_camera_frozen(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `CameraStartFailed` diagnostic.
        /// </summary>
        public bool? IsCameraStartFailed
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_camera_start_failed(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `CameraStartTimedOut` diagnostic.
        /// </summary>
        public bool? IsCameraStartTimedOut
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_camera_start_timed_out(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `MicrophoneNotFunctioning` diagnostic.
        /// </summary>
        public bool? IsMicrophoneNotFunctioning
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_microphone_not_functioning(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `MicrophoneMutedUnexpectedly` diagnostic.
        /// </summary>
        public bool? IsMicrophoneMutedUnexpectedly
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_microphone_muted_unexpectedly(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `CameraPermissionDenied` diagnostic.
        /// </summary>
        public bool? IsCameraPermissionDenied
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostic_values_get_is_camera_permission_denied(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.MediaDiagnosticValues GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.MediaDiagnosticValues result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.MediaDiagnosticValues>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.MediaDiagnosticValues(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents an object where media diagnostics are accessed.
    /// </summary>
    public partial class CallMediaDiagnostics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallMediaDiagnostics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_addref(this.handle);
        }

        ~CallMediaDiagnostics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerNotFunctioningChangedEventHandlerNative))]
        private static void SpeakerNotFunctioningChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(SpeakerNotFunctioningChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerNotFunctioningChangedEventHandlerNative SpeakerNotFunctioningChangedStaticHandlerDelegate = SpeakerNotFunctioningChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> SpeakerNotFunctioningChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerNotFunctioningChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_not_functioning_changed(this.handle, ((ICachedObject)this).Cookie, SpeakerNotFunctioningChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerNotFunctioningChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_not_functioning_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerBusyChangedEventHandlerNative))]
        private static void SpeakerBusyChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(SpeakerBusyChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerBusyChangedEventHandlerNative SpeakerBusyChangedStaticHandlerDelegate = SpeakerBusyChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> SpeakerBusyChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerBusyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_busy_changed(this.handle, ((ICachedObject)this).Cookie, SpeakerBusyChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerBusyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_busy_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerMutedChangedEventHandlerNative))]
        private static void SpeakerMutedChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(SpeakerMutedChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerMutedChangedEventHandlerNative SpeakerMutedChangedStaticHandlerDelegate = SpeakerMutedChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> SpeakerMutedChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_muted_changed(this.handle, ((ICachedObject)this).Cookie, SpeakerMutedChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_muted_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerVolumeZeroChangedEventHandlerNative))]
        private static void SpeakerVolumeZeroChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(SpeakerVolumeZeroChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakerVolumeZeroChangedEventHandlerNative SpeakerVolumeZeroChangedStaticHandlerDelegate = SpeakerVolumeZeroChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> SpeakerVolumeZeroChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerVolumeZeroChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_volume_zero_changed(this.handle, ((ICachedObject)this).Cookie, SpeakerVolumeZeroChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakerVolumeZeroChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaker_volume_zero_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsNoSpeakerDevicesAvailableChangedEventHandlerNative))]
        private static void NoSpeakerDevicesAvailableChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(NoSpeakerDevicesAvailableChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsNoSpeakerDevicesAvailableChangedEventHandlerNative NoSpeakerDevicesAvailableChangedStaticHandlerDelegate = NoSpeakerDevicesAvailableChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> NoSpeakerDevicesAvailableChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NoSpeakerDevicesAvailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_no_speaker_devices_available_changed(this.handle, ((ICachedObject)this).Cookie, NoSpeakerDevicesAvailableChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NoSpeakerDevicesAvailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_no_speaker_devices_available_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakingWhileMicrophoneIsMutedChangedEventHandlerNative))]
        private static void SpeakingWhileMicrophoneIsMutedChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(SpeakingWhileMicrophoneIsMutedChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsSpeakingWhileMicrophoneIsMutedChangedEventHandlerNative SpeakingWhileMicrophoneIsMutedChangedStaticHandlerDelegate = SpeakingWhileMicrophoneIsMutedChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> SpeakingWhileMicrophoneIsMutedChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakingWhileMicrophoneIsMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaking_while_microphone_is_muted_changed(this.handle, ((ICachedObject)this).Cookie, SpeakingWhileMicrophoneIsMutedChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpeakingWhileMicrophoneIsMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_speaking_while_microphone_is_muted_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsNoMicrophoneDevicesAvailableChangedEventHandlerNative))]
        private static void NoMicrophoneDevicesAvailableChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(NoMicrophoneDevicesAvailableChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsNoMicrophoneDevicesAvailableChangedEventHandlerNative NoMicrophoneDevicesAvailableChangedStaticHandlerDelegate = NoMicrophoneDevicesAvailableChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> NoMicrophoneDevicesAvailableChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NoMicrophoneDevicesAvailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_no_microphone_devices_available_changed(this.handle, ((ICachedObject)this).Cookie, NoMicrophoneDevicesAvailableChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NoMicrophoneDevicesAvailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_no_microphone_devices_available_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneBusyChangedEventHandlerNative))]
        private static void MicrophoneBusyChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(MicrophoneBusyChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneBusyChangedEventHandlerNative MicrophoneBusyChangedStaticHandlerDelegate = MicrophoneBusyChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> MicrophoneBusyChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneBusyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_busy_changed(this.handle, ((ICachedObject)this).Cookie, MicrophoneBusyChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneBusyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_busy_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraFrozenChangedEventHandlerNative))]
        private static void CameraFrozenChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(CameraFrozenChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraFrozenChangedEventHandlerNative CameraFrozenChangedStaticHandlerDelegate = CameraFrozenChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> CameraFrozenChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CameraFrozenChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_frozen_changed(this.handle, ((ICachedObject)this).Cookie, CameraFrozenChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CameraFrozenChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_frozen_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraStartFailedChangedEventHandlerNative))]
        private static void CameraStartFailedChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(CameraStartFailedChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraStartFailedChangedEventHandlerNative CameraStartFailedChangedStaticHandlerDelegate = CameraStartFailedChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> CameraStartFailedChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CameraStartFailedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_start_failed_changed(this.handle, ((ICachedObject)this).Cookie, CameraStartFailedChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CameraStartFailedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_start_failed_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraStartTimedOutChangedEventHandlerNative))]
        private static void CameraStartTimedOutChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(CameraStartTimedOutChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraStartTimedOutChangedEventHandlerNative CameraStartTimedOutChangedStaticHandlerDelegate = CameraStartTimedOutChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> CameraStartTimedOutChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CameraStartTimedOutChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_start_timed_out_changed(this.handle, ((ICachedObject)this).Cookie, CameraStartTimedOutChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CameraStartTimedOutChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_start_timed_out_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneNotFunctioningChangedEventHandlerNative))]
        private static void MicrophoneNotFunctioningChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(MicrophoneNotFunctioningChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneNotFunctioningChangedEventHandlerNative MicrophoneNotFunctioningChangedStaticHandlerDelegate = MicrophoneNotFunctioningChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> MicrophoneNotFunctioningChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneNotFunctioningChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_not_functioning_changed(this.handle, ((ICachedObject)this).Cookie, MicrophoneNotFunctioningChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneNotFunctioningChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_not_functioning_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneMutedUnexpectedlyChangedEventHandlerNative))]
        private static void MicrophoneMutedUnexpectedlyChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(MicrophoneMutedUnexpectedlyChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsMicrophoneMutedUnexpectedlyChangedEventHandlerNative MicrophoneMutedUnexpectedlyChangedStaticHandlerDelegate = MicrophoneMutedUnexpectedlyChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> MicrophoneMutedUnexpectedlyChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneMutedUnexpectedlyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_muted_unexpectedly_changed(this.handle, ((ICachedObject)this).Cookie, MicrophoneMutedUnexpectedlyChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MicrophoneMutedUnexpectedlyChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_microphone_muted_unexpectedly_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraPermissionDeniedChangedEventHandlerNative))]
        private static void CameraPermissionDeniedChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(CameraPermissionDeniedChanged));

            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics instance = Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaDiagnosticsCameraPermissionDeniedChangedEventHandlerNative CameraPermissionDeniedChangedStaticHandlerDelegate = CameraPermissionDeniedChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> CameraPermissionDeniedChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CameraPermissionDeniedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_permission_denied_changed(this.handle, ((ICachedObject)this).Cookie, CameraPermissionDeniedChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CameraPermissionDeniedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_set_camera_permission_denied_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Stored latest values for all known media diagnostics.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.MediaDiagnosticValues GetLatestDiagnostics()
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.MediaDiagnosticValues result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_diagnostics_get_latest_diagnostics(this.handle, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.MediaDiagnosticValues.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallMediaDiagnostics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallMediaDiagnostics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallMediaDiagnostics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallMediaDiagnostics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Media Statistics Call Feature. Track Media information for a call.
    /// </summary>
    public partial class MediaStatisticsCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MediaStatisticsCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Define how often Media Statistics information reports are informed to the callback (min 10 seconds and max 3600 seconds)
        /// </summary>
        public int ReportIntervalInSeconds
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_call_feature_get_report_interval_in_seconds(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeatureReportReceivedEventHandlerNative))]
        private static void ReportReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs>>(
                    cookie,
                    nameof(ReportReceived));

            Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature instance = Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeatureReportReceivedEventHandlerNative ReportReceivedStaticHandlerDelegate = ReportReceivedStaticHandler;

        /// <summary>
        /// Event for reporting Media Statistics measurements
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs> ReportReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ReportReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_call_feature_set_report_received(this.handle, ((ICachedObject)this).Cookie, ReportReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ReportReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_call_feature_set_report_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Updates how often Media Statistics information reports are informed to the callback (min 10 seconds and max 3600 seconds)
        /// </summary>
        public void UpdateReportIntervalInSeconds(int reportIntervalInSeconds)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_call_feature_update_report_interval_in_seconds(this.handle, reportIntervalInSeconds));
        }

        internal static Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.MediaStatisticsCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Report for all Media Statistics available in a given instant.
    /// </summary>
    public partial class MediaStatisticsReport : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MediaStatisticsReport(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~MediaStatisticsReport()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Outgoing Media Statistics from the local participant
        /// </summary>
        public Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics OutgoingStatistics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_get_outgoing_statistics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Incoming Media Statistics from the remote participants
        /// </summary>
        public Azure.Communication.Calling.UnityClient.IncomingMediaStatistics IncomingStatistics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingMediaStatistics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_get_incoming_statistics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingMediaStatistics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Timestamp in unix epoch for when the report was generated.
        /// </summary>
        public DateTimeOffset LastUpdatedAt
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_get_last_updated_at(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.MediaStatisticsReport GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.MediaStatisticsReport result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.MediaStatisticsReport>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.MediaStatisticsReport(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a Media Statistics Report Received event.
    /// </summary>
    public partial class MediaStatisticsReportReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MediaStatisticsReportReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_received_event_args_addref(this.handle);
        }

        ~MediaStatisticsReportReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Report with the Media Statistics information.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.MediaStatisticsReport Report
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.MediaStatisticsReport result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_media_statistics_report_received_event_args_get_report(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.MediaStatisticsReport.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.MediaStatisticsReportReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call identifier for Communication Services Users.
    /// </summary>
    public partial class MicrosoftTeamsUserCallIdentifier : Azure.Communication.Calling.UnityClient.CallIdentifier, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected MicrosoftTeamsUserCallIdentifier(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string userId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_create_string_user_id(userId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates an instance of <see cref="MicrosoftTeamsUserCallIdentifier"/>
        /// </summary>
        /// <param name="userId">
        /// Id of the Microsoft Teams user. If the user isn't anonymous, the id is the AAD object id of the user.
        /// </param>
        public MicrosoftTeamsUserCallIdentifier(string userId) : base(Create(userId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static IntPtr Create(string userId, bool isAnonymous)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_create_string_user_id_boolean_is_anonymous(userId, isAnonymous, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a MicrosoftTeamsUserCallIdentifier object
        /// </summary>
        /// <param name="userId">
        /// Id of the Microsoft Teams user. If the user isn't anonymous, the id is the AAD object id of the user.
        /// </param>
        /// <param name="isAnonymous">
        /// set this to true if the user is anonymous, for example when joining a meeting with a share
        /// </param>
        public MicrosoftTeamsUserCallIdentifier(string userId, bool isAnonymous) : base(Create(userId, isAnonymous), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Gets Teams User Id
        /// </summary>
        public string UserId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_get_user_id(this.handle, out result));
                return result;
            }
        }

        public bool IsAnonymous
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_get_is_anonymous(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Property informing cloud environment of the Teams user identifier
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallCloudEnvironment CloudEnvironment
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallCloudEnvironment result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_get_cloud_environment(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_microsoft_teams_user_call_identifier_set_cloud_environment(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.MicrosoftTeamsUserCallIdentifier GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.MicrosoftTeamsUserCallIdentifier result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.MicrosoftTeamsUserCallIdentifier>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.MicrosoftTeamsUserCallIdentifier(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public partial class NativeBuffer : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NativeBuffer(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_addref(this.handle);
        }

        /// <summary>
        /// Create a new NativeBuffer with an unmanaged byte array of a particular size.
        /// </summary>
        public NativeBuffer(int size)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_create_int32_size(size, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~NativeBuffer()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get the size of the native buffer.
        /// </summary>
        public int Length
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_get_length(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get the unmanaged memory pointer for the byte array backing this NativeBuffer object.
        /// </summary>
        public void GetData(out System.IntPtr bytes, out int size)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_get_data(this.handle, out bytes, out size));
        }

        /// <summary>
        /// Copies byte data from an array to this NativeBuffer object.
        /// </summary>
        public void WriteData(byte[] sourceArray, int sourceIndex, int destinationIndex, int length)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_write_data_source_array_int32_source_index_int32_destination_index_int32_length(this.handle, sourceArray, sourceArray?.Length ?? 0, sourceIndex, destinationIndex, length));
        }

        /// <summary>
        /// Copies byte data from an unmanaged memory pointer to this NativeBuffer object.
        /// </summary>
        public void WriteData(System.IntPtr sourceArray, int sourceIndex, int destinationIndex, int length)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_write_data_int_ptr_source_array_int32_source_index_int32_destination_index_int32_length(this.handle, sourceArray, sourceIndex, destinationIndex, length));
        }

        /// <summary>
        /// Dispose method for cleaning up resources
        /// </summary>
        public void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_native_buffer_dispose(this.handle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.NativeBuffer GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.NativeBuffer result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.NativeBuffer>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.NativeBuffer(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for NativeBuffer.
        /// <summary>
        /// Copy the native memory into a new byte array.
        /// </summary>
        public byte[] ToByteArray()
        {
            int size = 0;
            IntPtr bytes = IntPtr.Zero;
            GetData(out bytes, out size);

            int resultSize = (int)size;
            if (resultSize < 0)
            {
                throw new IndexOutOfRangeException();
            }

            byte[] result = new byte[resultSize];
            Marshal.Copy(bytes, result, 0, resultSize);

            return result;
        }

        public short[] ToShortArray()
        {
            int size = 0;
            IntPtr bytes = IntPtr.Zero;
            GetData(out bytes, out size);

            int resultSize = size / 2;
            if (resultSize < 0)
            {
                throw new IndexOutOfRangeException();
            }

            short[] result = new short[resultSize];
            Marshal.Copy(bytes, result, 0, resultSize);

            return result;
        }
        // Class extension ends for NativeBuffer.

    }

    /// <summary>
    /// Represents an object where all the latest diagnostics values for network diagnostic.
    /// </summary>
    public partial class NetworkDiagnosticValues : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected NetworkDiagnosticValues(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_addref(this.handle);
        }

        ~NetworkDiagnosticValues()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Last updated time of any diagnostic property.
        /// </summary>
        public DateTimeOffset LastUpdatedAt
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_last_updated_at(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        /// <summary>
        /// Value for `NetworkReconnect` diagnostic.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DiagnosticQuality? NetworkReconnectionQuality
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_network_reconnection_quality(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NetworkReceiveQuality` diagnostic.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DiagnosticQuality? NetworkReceiveQuality
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_network_receive_quality(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NetworkSendQuality` diagnostic.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.DiagnosticQuality? NetworkSendQuality
        {
            get
            {
                Azure.Communication.Calling.UnityClient.DiagnosticQualityNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_network_send_quality(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NoNetwork` diagnostic.
        /// </summary>
        public bool? IsNetworkUnavailable
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_is_network_unavailable(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Value for `NetworkRelaysNotReachable` diagnostic.
        /// </summary>
        public bool? AreNetworkRelaysUnreachable
        {
            get
            {
                BooleanNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostic_values_get_is_network_relays_unreachable(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents an object where network diagnostics are accessed.
    /// </summary>
    public partial class CallNetworkDiagnostics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected CallNetworkDiagnostics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_addref(this.handle);
        }

        ~CallNetworkDiagnostics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkUnavailableChangedEventHandlerNative))]
        private static void NetworkUnavailableChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(NetworkUnavailableChanged));

            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics instance = Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkUnavailableChangedEventHandlerNative NetworkUnavailableChangedStaticHandlerDelegate = NetworkUnavailableChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> NetworkUnavailableChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkUnavailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_unavailable_changed(this.handle, ((ICachedObject)this).Cookie, NetworkUnavailableChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkUnavailableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_unavailable_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkRelaysUnreachableChangedEventHandlerNative))]
        private static void NetworkRelaysUnreachableChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs>>(
                    cookie,
                    nameof(NetworkRelaysUnreachableChanged));

            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics instance = Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkRelaysUnreachableChangedEventHandlerNative NetworkRelaysUnreachableChangedStaticHandlerDelegate = NetworkRelaysUnreachableChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticFlagChangedEventArgs> NetworkRelaysUnreachableChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkRelaysUnreachableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_relays_unreachable_changed(this.handle, ((ICachedObject)this).Cookie, NetworkRelaysUnreachableChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkRelaysUnreachableChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_relays_unreachable_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkReconnectionQualityChangedEventHandlerNative))]
        private static void NetworkReconnectionQualityChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs>>(
                    cookie,
                    nameof(NetworkReconnectionQualityChanged));

            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics instance = Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkReconnectionQualityChangedEventHandlerNative NetworkReconnectionQualityChangedStaticHandlerDelegate = NetworkReconnectionQualityChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> NetworkReconnectionQualityChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkReconnectionQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_reconnection_quality_changed(this.handle, ((ICachedObject)this).Cookie, NetworkReconnectionQualityChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkReconnectionQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_reconnection_quality_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkReceiveQualityChangedEventHandlerNative))]
        private static void NetworkReceiveQualityChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs>>(
                    cookie,
                    nameof(NetworkReceiveQualityChanged));

            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics instance = Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkReceiveQualityChangedEventHandlerNative NetworkReceiveQualityChangedStaticHandlerDelegate = NetworkReceiveQualityChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> NetworkReceiveQualityChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkReceiveQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_receive_quality_changed(this.handle, ((ICachedObject)this).Cookie, NetworkReceiveQualityChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkReceiveQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_receive_quality_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkSendQualityChangedEventHandlerNative))]
        private static void NetworkSendQualityChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs>>(
                    cookie,
                    nameof(NetworkSendQualityChanged));

            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics instance = Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.NetworkDiagnosticsNetworkSendQualityChangedEventHandlerNative NetworkSendQualityChangedStaticHandlerDelegate = NetworkSendQualityChangedStaticHandler;

        public event System.EventHandler<Azure.Communication.Calling.UnityClient.DiagnosticQualityChangedEventArgs> NetworkSendQualityChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkSendQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_send_quality_changed(this.handle, ((ICachedObject)this).Cookie, NetworkSendQualityChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.NetworkSendQualityChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_set_network_send_quality_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Stored latest values for all known network diagnostics.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues GetLatestDiagnostics()
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_network_diagnostics_get_latest_diagnostics(this.handle, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.NetworkDiagnosticValues.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Holds properties that configure outgoing audio preprocessing before call start
    /// </summary>
    public partial class OutgoingAudioFilters : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingAudioFilters(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public OutgoingAudioFilters()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~OutgoingAudioFilters()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Enables Analog Automatic Gain Control
        /// </summary>
        public bool AnalogAutomaticGainControlEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_get_analog_automatic_gain_control_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_set_analog_automatic_gain_control_enabled(this.handle, value));
            }
        }

        /// <summary>
        /// Enables Digital Automatic Gain Control
        /// </summary>
        public bool DigitalAutomaticGainControlEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_get_digital_automatic_gain_control_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_set_digital_automatic_gain_control_enabled(this.handle, value));
            }
        }

        /// <summary>
        /// Changes mode/type of Noise Suppression
        /// </summary>
        public Azure.Communication.Calling.UnityClient.NoiseSuppressionMode NoiseSuppressionMode
        {
            get
            {
                Azure.Communication.Calling.UnityClient.NoiseSuppressionMode result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_get_noise_suppression_mode(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_set_noise_suppression_mode(this.handle, value));
            }
        }

        /// <summary>
        /// Toggles Music Mode
        /// </summary>
        public bool MusicModeEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_get_music_mode_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_set_music_mode_enabled(this.handle, value));
            }
        }

        /// <summary>
        /// Toggles Echo Cancellation. Requires Music Mode to be on.
        /// </summary>
        public bool AcousticEchoCancellationEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_get_acoustic_echo_cancellation_enabled(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_filters_set_acoustic_echo_cancellation_enabled(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingAudioFilters GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingAudioFilters result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingAudioFilters>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingAudioFilters(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Property bag class for Outgoing Audio Options. Use this class to set audio settings required during a call (start/join)
    /// </summary>
    public partial class OutgoingAudioOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingAudioOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_addref(this.handle);
        }

        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public OutgoingAudioOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~OutgoingAudioOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Start an outgoing or accept incoming call with microphone muted (true) or un-muted(false)
        /// </summary>
        public bool IsMuted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_get_is_muted(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_set_is_muted(this.handle, value));
            }
        }

        /// <summary>
        /// Start an outgoing or accept incoming call with outgoing audio filter features
        /// </summary>
        public Azure.Communication.Calling.UnityClient.OutgoingAudioFilters Filters
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingAudioFilters result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_get_filters(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingAudioFilters.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_set_filters(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Outgoing Audio Stream that will be started when the call connects.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.OutgoingAudioStream Stream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingAudioStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_get_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.OutgoingAudioStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_options_set_stream(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingAudioOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingAudioOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingAudioOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingAudioOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the outgoing audio Media Statistics for a call.
    /// </summary>
    public partial class OutgoingAudioStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingAudioStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~OutgoingAudioStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Bitrate in bits per second.
        /// </summary>
        public int? BitrateInBps
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_get_bitrate_in_bps(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Average packet jitter in milliseconds.
        /// </summary>
        public float? JitterInMs
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_get_jitter_in_ms(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets sent.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction.
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_audio_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Base Class for all Outgoing Audio Stream objects
    /// </summary>
    public abstract partial class OutgoingAudioStream : Azure.Communication.Calling.UnityClient.CallAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

    }

    /// <summary>
    /// Represents the outgoing data channel Media Statistics for a call.
    /// </summary>
    public partial class OutgoingDataChannelStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingDataChannelStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_data_channel_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_data_channel_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_data_channel_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~OutgoingDataChannelStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_data_channel_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The total number of packets sent.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_data_channel_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Aggregate for all outgoing Media Statistics information.
    /// </summary>
    public partial class OutgoingMediaStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingMediaStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~OutgoingMediaStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The list of the audio statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics> Audio
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_get_audio(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingAudioStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the video statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics> Video
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_get_video(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the screen share statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics> ScreenShare
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_get_screen_share(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics>();
                return result;
            }
        }

        /// <summary>
        /// The list of the data channel statistics for the call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics> DataChannel
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_media_statistics_get_data_channel(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingDataChannelStatistics>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingMediaStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the outgoing screen share Media Statistics for a call.
    /// </summary>
    public partial class OutgoingScreenShareStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingScreenShareStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default constructor.
        /// </summary>
        ~OutgoingScreenShareStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name.
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Bitrate in bits per second.
        /// </summary>
        public int? BitrateInBps
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_bitrate_in_bps(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets sent.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction.
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame rate sent on the RTP stream (frames/sec).
        /// </summary>
        public float? FrameRate
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_frame_rate(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame width of the encoded frame (pixel).
        /// </summary>
        public int? FrameWidth
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_frame_width(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame height of the encoded frame (pixel).
        /// </summary>
        public int? FrameHeight
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_screen_share_statistics_get_frame_height(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingScreenShareStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold properties that configure OutgoingVideoConstraints
    /// </summary>
    public partial class OutgoingVideoConstraints : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingVideoConstraints(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public OutgoingVideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~OutgoingVideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Set a constraint on height
        /// </summary>
        public int MaxHeight
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_get_max_height(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_set_max_height(this.handle, value));
            }
        }

        /// <summary>
        /// Set a constraint on width
        /// </summary>
        public int MaxWidth
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_get_max_width(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_set_max_width(this.handle, value));
            }
        }

        /// <summary>
        /// Set a constriant on frame rate
        /// </summary>
        public int MaxFrameRate
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_get_max_frame_rate(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_constraints_set_max_frame_rate(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold properties that configure OutgoingVideoStreams
    /// </summary>
    public partial class OutgoingVideoOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingVideoOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public OutgoingVideoOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~OutgoingVideoOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get or set the OutgoingVideoStreams should start once the call start
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStream> Streams
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.OutgoingVideoStream> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_get_streams(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Factories.OutgoingVideoStreamFactory(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.OutgoingVideoStream>();
                return result;
            }
            set
            {
                IntPtr[] value_array = value?.Select(x => x?.handle ?? IntPtr.Zero).ToArray() ?? Array.Empty<IntPtr>();
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_set_streams(this.handle, value_array, value_array.Length));
            }
        }

        /// <summary>
        /// Get or set the OutgoingVideoConstraints
        /// </summary>
        public Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints Constraints
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_get_constraints(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_set_constraints(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Get or set the OutgoingVideoStreams should start once the call start
        /// </summary>
        /// <param name="outgoingVideoStreams">
        /// 
        /// </param>
        private void SetOutgoingVideoStreamsInternal([In] Azure.Communication.Calling.UnityClient.OutgoingVideoStream[] outgoingVideoStreams)
        {
            IntPtr[] outgoingVideoStreams_array = outgoingVideoStreams?.Select(x => x?.handle ?? IntPtr.Zero).ToArray() ?? Array.Empty<IntPtr>();
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_options_set_outgoing_video_streams_internal(this.handle, outgoingVideoStreams_array, outgoingVideoStreams?.Length ?? 0));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingVideoOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingVideoOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingVideoOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingVideoOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Represents the outgoing video Media Statistics for a call.
    /// </summary>
    public partial class OutgoingVideoStatistics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingVideoStatistics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor.
        /// </summary>
        ~OutgoingVideoStatistics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Codec Name.
        /// </summary>
        public string CodecName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_codec_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Bitrate in bits per second.
        /// </summary>
        public int? BitrateInBps
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_bitrate_in_bps(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// The total number of packets sent.
        /// </summary>
        public int? PacketCount
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_packet_count(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Identifier used to distinguish when there are multiple streams with same media type/direction.
        /// </summary>
        public int? StreamId
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_stream_id(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame rate sent on the RTP stream (frames/sec).
        /// </summary>
        public float? FrameRate
        {
            get
            {
                SingleNullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_frame_rate(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame width of the encoded frame (pixel).
        /// </summary>
        public int? FrameWidth
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_frame_width(this.handle, out result));
                return result.Convert();
            }
        }

        /// <summary>
        /// Frame height of the encoded frame (pixel).
        /// </summary>
        public int? FrameHeight
        {
            get
            {
                Int32Nullable result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_outgoing_video_statistics_get_frame_height(this.handle, out result));
                return result.Convert();
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.OutgoingVideoStatistics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains information about common properties between different types of outgoing video streams
    /// </summary>
    public abstract partial class OutgoingVideoStream : Azure.Communication.Calling.UnityClient.CallVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected OutgoingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

    }

    /// <summary>
    /// Describes a ParticipantsUpdated event data
    /// </summary>
    public partial class ParticipantsUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ParticipantsUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_addref(this.handle);
        }

        ~ParticipantsUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// List of Participants that were added
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> AddedParticipants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_get_added_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        /// <summary>
        /// List of Participants that were removed
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> RemovedParticipants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RemoteParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_participants_updated_event_args_get_removed_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RemoteParticipant>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.ParticipantsUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call identifier for phone number based call
    /// </summary>
    public partial class PhoneNumberCallIdentifier : Azure.Communication.Calling.UnityClient.CallIdentifier, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PhoneNumberCallIdentifier(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string phoneNumber)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_phone_number_call_identifier_create_string_phone_number(phoneNumber, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates an instance of of <see cref="PhoneNumberCallIdentifier"/>
        /// </summary>
        /// <param name="phoneNumber">
        /// The string identifier representing the PhoneNumber in E.164 format. E.164 is a phone number formatted as +[CountryCode][AreaCode][LocalNumber] eg. "+18005555555"
        /// </param>
        public PhoneNumberCallIdentifier(string phoneNumber) : base(Create(phoneNumber), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Gets the phone number.
        /// </summary>
        public string PhoneNumber
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_phone_number_call_identifier_get_phone_number(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public partial class PowerPointDetails : Azure.Communication.Calling.UnityClient.ContentSharingInfo, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PowerPointDetails(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        public int SlideIndex
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_power_point_info_get_slide_index(this.handle, out result));
                return result;
            }
        }

        public bool IsPrivateViewingEnabled
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_power_point_info_get_is_private_viewing_enabled(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.PowerPointDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PowerPointDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PowerPointDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PowerPointDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Feature used for pre-call diagnostics
    /// </summary>
    public partial class PreCallDiagnosticsCallClientFeature : Azure.Communication.Calling.UnityClient.CallClientFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PreCallDiagnosticsCallClientFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public PreCallDiagnosticsCallClientFeature() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Id of the pre-call diagnostics feature
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// List granted permissions required for the call
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<int> DevicePermissions
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<int> result;
                int[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_get_device_permissions(this.handle, out result_array, out result_length));
                result = result_array ?? Array.Empty<int>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeaturePreCallDiagnosticsReadyEventHandlerNative))]
        private static void PreCallDiagnosticsReadyStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs>>(
                    cookie,
                    nameof(PreCallDiagnosticsReady));

            Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature instance = Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeaturePreCallDiagnosticsReadyEventHandlerNative PreCallDiagnosticsReadyStaticHandlerDelegate = PreCallDiagnosticsReadyStaticHandler;

        /// <summary>
        /// Event used to notify when the diagnostics are ready
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs> PreCallDiagnosticsReady
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.PreCallDiagnosticsReady), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_set_pre_call_diagnostics_ready(this.handle, ((ICachedObject)this).Cookie, PreCallDiagnosticsReadyStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.PreCallDiagnosticsReady), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_set_pre_call_diagnostics_ready(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Start diagnostics
        /// </summary>
        private async System.Threading.Tasks.Task RunDiagnosticsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_call_client_feature_run_diagnostics(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PreCallDiagnosticsCallClientFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains the pre-call diagnostics values
    /// </summary>
    public partial class PreCallDiagnostics : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PreCallDiagnostics(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~PreCallDiagnostics()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Network diagnostics results
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics NetworkDiagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_get_network_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallNetworkDiagnostics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Media diagnostics results
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallMediaDiagnostics MediaDiagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallMediaDiagnostics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_get_media_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallMediaDiagnostics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Media statistics results
        /// </summary>
        public Azure.Communication.Calling.UnityClient.MediaStatisticsReport MediaStatisticsReport
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.MediaStatisticsReport result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_get_media_statistics_report(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.MediaStatisticsReport.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.PreCallDiagnostics GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PreCallDiagnostics result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PreCallDiagnostics>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PreCallDiagnostics(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains the result of the pre-call diagnostics
    /// </summary>
    public partial class PreCallDiagnosticsReadyEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PreCallDiagnosticsReadyEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_ready_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_ready_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_ready_event_args_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~PreCallDiagnosticsReadyEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_ready_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Pre-call diagnostics results
        /// </summary>
        public Azure.Communication.Calling.UnityClient.PreCallDiagnostics Diagnostics
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.PreCallDiagnostics result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_pre_call_diagnostics_ready_event_args_get_diagnostics(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.PreCallDiagnostics.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PreCallDiagnosticsReadyEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a PropertyChanged event data
    /// </summary>
    public partial class PropertyChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PropertyChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_property_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_property_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_property_changed_event_args_addref(this.handle);
        }

        ~PropertyChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_property_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an incoming call
    /// </summary>
    public partial class PushNotificationDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected PushNotificationDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_addref(this.handle);
        }

        ~PushNotificationDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The display name of the caller
        /// </summary>
        public string FromDisplayName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_from_display_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Indicates whether the incoming call has a video or not
        /// </summary>
        public bool IncomingWithVideo
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_incoming_with_video(this.handle, out result));
                return result;
            }
        }

        private string FromInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_from_internal(this.handle, out result));
                return result;
            }
        }

        private string ToInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_to_internal(this.handle, out result));
                return result;
            }
        }

        private string CallIdInternal
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_call_id_internal(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Type of Push Notification Event
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallPushNotificationEventKind EventKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallPushNotificationEventKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_get_event_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Static Method to parse payload into caller information
        /// </summary>
        /// <param name="payload">
        /// A string representing the json payload from provider.
        /// </param>
        private static Azure.Communication.Calling.UnityClient.PushNotificationDetails ParseInternal(string payload)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.PushNotificationDetails result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(Azure.Communication.Calling.UnityClient.NativeLibrary.sam_push_notification_info_parse_internal(payload, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.PushNotificationDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.PushNotificationDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.PushNotificationDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.PushNotificationDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.PushNotificationDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for PushNotificationInfo.
        /// <summary>
        /// Parse the given payload.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.PushNotificationDetails Parse(string payload)
        {
            return ParseInternal(payload);
        }
        // Class extension ends for PushNotificationInfo.

    }

    /// <summary>
    /// Call Feature for managing raise hand states for participants on the call.
    /// </summary>
    public partial class RaiseHandCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RaiseHandCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Get all active raised hands. Sorted by order of raise hand events.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RaisedHand> RaisedHands
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RaisedHand> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_get_raised_hands(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RaisedHand.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RaisedHand>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RaiseHandCallFeatureHandRaisedEventHandlerNative))]
        private static void HandRaisedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs>>(
                    cookie,
                    nameof(HandRaised));

            Azure.Communication.Calling.UnityClient.RaiseHandCallFeature instance = Azure.Communication.Calling.UnityClient.RaiseHandCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RaiseHandCallFeatureHandRaisedEventHandlerNative HandRaisedStaticHandlerDelegate = HandRaisedStaticHandler;

        /// <summary>
        /// HandRaised event occurs when any user has raised hand.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs> HandRaised
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.HandRaised), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_set_hand_raised(this.handle, ((ICachedObject)this).Cookie, HandRaisedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.HandRaised), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_set_hand_raised(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RaiseHandCallFeatureHandLoweredEventHandlerNative))]
        private static void HandLoweredStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs>>(
                    cookie,
                    nameof(HandLowered));

            Azure.Communication.Calling.UnityClient.RaiseHandCallFeature instance = Azure.Communication.Calling.UnityClient.RaiseHandCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RaiseHandCallFeatureHandLoweredEventHandlerNative HandLoweredStaticHandlerDelegate = HandLoweredStaticHandler;

        /// <summary>
        /// HandLowered event occurs when any user has raised hand.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.LoweredHandChangedEventArgs> HandLowered
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.HandLowered), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_set_hand_lowered(this.handle, ((ICachedObject)this).Cookie, HandLoweredStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.HandLowered), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_set_hand_lowered(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Send request to raise hand for local user.
        /// </summary>
        public async System.Threading.Tasks.Task RaiseHandAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_raise_hand(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send request to lower hand for local user.
        /// </summary>
        public async System.Threading.Tasks.Task LowerHandAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_lower_hand(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send request to lower the raised hands for local and remote users.
        /// </summary>
        private async System.Threading.Tasks.Task LowerHandsInternalAsync([In] string[] participants)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_lower_hands_internal(this.handle, participants, participants?.Length ?? 0, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send request to lower raised hands for every user on the call.
        /// </summary>
        public async System.Threading.Tasks.Task LowerAllHandsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raise_hand_call_feature_lower_all_hands(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RaiseHandCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RaiseHandCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RaiseHandCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RaiseHandCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RaiseHandCallFeature.
        /// <summary>
        /// Send request to lower the raised hand status for local and remote users.
        /// </summary>
        public async System.Threading.Tasks.Task LowerHandAsync(Azure.Communication.Calling.UnityClient.CallIdentifier[] participants)
        {
            string[] participantIds = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(participants);
            await LowerHandsInternalAsync(participantIds);
        }
        // Class extension ends for RaiseHandCallFeature.

    }

    /// <summary>
    /// Raised hand event information.
    /// </summary>
    public partial class RaisedHandChangedEventArgs : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RaisedHandChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_changed_event_args_addref(this.handle);
        }

        ~RaisedHandChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the event user.
        /// </summary>
        private string Participant
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_changed_event_args_get_participant(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RaisedHandChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RaisedHandChangedEventArgs.
        /// <summary>
        /// Get the identity of the participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(Participant);
            }
        }
        // Class extension ends for RaisedHandChangedEventArgs.

    }

    /// <summary>
    /// Raise hand details.
    /// </summary>
    public partial class RaisedHand : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RaisedHand(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_addref(this.handle);
        }

        ~RaisedHand()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the event user.
        /// </summary>
        private string Participant
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_get_participant(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Order of raise hand events.
        /// </summary>
        public int Order
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raised_hand_get_order(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RaisedHand GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RaisedHand result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RaisedHand>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RaisedHand(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RaisedHand.
        /// <summary>
        /// Get the identity of the participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(Participant);
            }
        }
        // Class extension ends for RaisedHand.

    }

    /// <summary>
    /// An entity that represents an audio buffer that provides a wrapper native buffers and additional information
    /// </summary>
    public partial class RawAudioBuffer : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawAudioBuffer(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public RawAudioBuffer()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawAudioBuffer()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Timestamp of Buffer to set/get depending on outgoing/incoming
        /// </summary>
        public long TimestampInTicks
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_get_timestamp_in_ticks(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_set_timestamp_in_ticks(this.handle, value));
            }
        }

        /// <summary>
        /// Set the native buffer used with Unity apps.
        /// </summary>
        private Azure.Communication.Calling.UnityClient.NativeBuffer GetUnityBuffer()
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.NativeBuffer result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_get_unity_buffer(this.handle, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.NativeBuffer.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        /// <summary>
        /// Set the native buffer used with Unity apps.
        /// </summary>
        private void SetUnityBuffer(Azure.Communication.Calling.UnityClient.NativeBuffer buffer)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_set_unity_buffer(this.handle, buffer != null ? buffer.handle : IntPtr.Zero));
        }

        /// <summary>
        /// Dispose method for cleaning up resources
        /// </summary>
        public void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_buffer_dispose(this.handle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RawAudioBuffer GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawAudioBuffer result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawAudioBuffer>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawAudioBuffer(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RawAudioBuffer.
        /// <summary>
        /// Representation of the audio buffer as a byte array.
        /// </summary>
        public NativeBuffer Buffer
        {
            get => GetUnityBuffer();
            set => SetUnityBuffer(value);
        }
        // Class extension ends for RawAudioBuffer.

    }

    /// <summary>
    /// Base Class for All Raw Audio Options needed to be defined for RawAudioStreams
    /// </summary>
    public abstract partial class RawAudioStreamOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawAudioStreamOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_options_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawAudioStreamOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Base Class for All Raw Audio Properties needed to describe RawAudioStreams
    /// </summary>
    public abstract partial class RawAudioStreamProperties : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawAudioStreamProperties(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawAudioStreamProperties()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Sample Rate of Audio Stream
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamSampleRate SampleRate
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamSampleRate result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_get_sample_rate(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_set_sample_rate(this.handle, value));
            }
        }

        /// <summary>
        /// Channel Mode of Audio Stream
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamChannelMode ChannelMode
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamChannelMode result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_get_channel_mode(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_set_channel_mode(this.handle, value));
            }
        }

        /// <summary>
        /// Audio Format of Audio Stream in the Call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamFormat Format
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamFormat result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_get_format(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_audio_stream_properties_set_format(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// An audio stream that utilizes a virtual device for receiving audio
    /// </summary>
    public partial class RawIncomingAudioStream : Azure.Communication.Calling.UnityClient.IncomingAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawIncomingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions options)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_create_raw_incoming_audio_stream_options_options(options != null ? options.handle : IntPtr.Zero, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawIncomingAudioStream(Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions options) : base(Create(options), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamMixedAudioBufferReceivedEventHandlerNative))]
        private static void MixedAudioBufferReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs>>(
                    cookie,
                    nameof(MixedAudioBufferReceived));

            Azure.Communication.Calling.UnityClient.RawIncomingAudioStream instance = Azure.Communication.Calling.UnityClient.RawIncomingAudioStream.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamMixedAudioBufferReceivedEventHandlerNative MixedAudioBufferReceivedStaticHandlerDelegate = MixedAudioBufferReceivedStaticHandler;

        /// <summary>
        /// An event for when a new mixed audio buffer is available.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingMixedAudioEventArgs> MixedAudioBufferReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.MixedAudioBufferReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_set_mixed_audio_buffer_received(this.handle, ((ICachedObject)this).Cookie, MixedAudioBufferReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.MixedAudioBufferReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_set_mixed_audio_buffer_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamUnmixedAudioBufferReceivedEventHandlerNative))]
        private static void UnmixedAudioBufferReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs>>(
                    cookie,
                    nameof(UnmixedAudioBufferReceived));

            Azure.Communication.Calling.UnityClient.RawIncomingAudioStream instance = Azure.Communication.Calling.UnityClient.RawIncomingAudioStream.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamUnmixedAudioBufferReceivedEventHandlerNative UnmixedAudioBufferReceivedStaticHandlerDelegate = UnmixedAudioBufferReceivedStaticHandler;

        /// <summary>
        /// An event for when new unmixed mixed audio buffer(s) is available.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.IncomingUnmixedAudioEventArgs> UnmixedAudioBufferReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.UnmixedAudioBufferReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_set_unmixed_audio_buffer_received(this.handle, ((ICachedObject)this).Cookie, UnmixedAudioBufferReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.UnmixedAudioBufferReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_set_unmixed_audio_buffer_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawIncomingAudioStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawIncomingAudioStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawIncomingAudioStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawIncomingAudioStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options required for initializing a RawIncomingAudioStream
    /// </summary>
    public partial class RawIncomingAudioStreamOptions : Azure.Communication.Calling.UnityClient.RawAudioStreamOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawIncomingAudioStreamOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawIncomingAudioStreamOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Raw Incoming Audio Properties needed for initializing a RawIncomingAudioStream
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties Properties
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_options_get_properties(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_options_set_properties(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Option to receive Unmixed Audio (if it can be provided)
        /// </summary>
        public bool ReceiveUnmixedAudio
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_options_get_receive_unmixed_audio(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_options_set_receive_unmixed_audio(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Audio Properties For RawIncomingAudioStreams
    /// </summary>
    public partial class RawIncomingAudioStreamProperties : Azure.Communication.Calling.UnityClient.RawAudioStreamProperties, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawIncomingAudioStreamProperties(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_audio_stream_properties_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawIncomingAudioStreamProperties() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawIncomingAudioStreamProperties(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Representation of a remote CallVideoStream using raw data (bytes)
    /// </summary>
    public partial class RawIncomingVideoStream : Azure.Communication.Calling.UnityClient.IncomingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawIncomingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RawIncomingVideoStreamRawVideoFrameReceivedEventHandlerNative))]
        private static void RawVideoFrameReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs>>(
                    cookie,
                    nameof(RawVideoFrameReceived));

            Azure.Communication.Calling.UnityClient.RawIncomingVideoStream instance = Azure.Communication.Calling.UnityClient.RawIncomingVideoStream.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RawIncomingVideoStreamRawVideoFrameReceivedEventHandlerNative RawVideoFrameReceivedStaticHandlerDelegate = RawVideoFrameReceivedStaticHandler;

        /// <summary>
        /// Listener used to get video frames
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs> RawVideoFrameReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.RawVideoFrameReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_video_stream_set_raw_video_frame_received(this.handle, ((ICachedObject)this).Cookie, RawVideoFrameReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.RawVideoFrameReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_video_stream_set_raw_video_frame_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Start receiving frames
        /// </summary>
        /// <param name="options">
        /// 
        /// </param>
        public void Start()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_video_stream_start(this.handle));
        }

        /// <summary>
        /// Stop receiving frames
        /// </summary>
        /// <param name="options">
        /// 
        /// </param>
        public void Stop()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_incoming_video_stream_stop(this.handle));
        }

        internal static Azure.Communication.Calling.UnityClient.RawIncomingVideoStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawIncomingVideoStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawIncomingVideoStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawIncomingVideoStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// An audio stream that utilizes a virtual device for sending audio
    /// </summary>
    public partial class RawOutgoingAudioStream : Azure.Communication.Calling.UnityClient.OutgoingAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawOutgoingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions options)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_create_raw_outgoing_audio_stream_options_options(options != null ? options.handle : IntPtr.Zero, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawOutgoingAudioStream(Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions options) : base(Create(options), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Expected buffer size of Audio Buffer
        /// </summary>
        public long ExpectedBufferSizeInBytes
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_get_expected_buffer_size_in_bytes(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// OutgoingAudioProperties that this CallAudioStream is set to
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties Properties
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_get_properties(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Method for sending audio buffer. The buffer should match the format, sample rate and channel mode specified in the stream properties. For data per block property, we recommend sending data in the specified size, but additionally, we support sending larger buffers limited to 100ms as long as it can be evenly divided by the specified data per block.
        /// </summary>
        public async System.Threading.Tasks.Task SendRawAudioBufferAsync(Azure.Communication.Calling.UnityClient.RawAudioBuffer rawAudioBuffer)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_send_raw_audio_buffer(this.handle, rawAudioBuffer != null ? rawAudioBuffer.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawOutgoingAudioStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawOutgoingAudioStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawOutgoingAudioStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawOutgoingAudioStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options required for initializing a RawOutgoingAudioStream
    /// </summary>
    public partial class RawOutgoingAudioStreamOptions : Azure.Communication.Calling.UnityClient.RawAudioStreamOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawOutgoingAudioStreamOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawOutgoingAudioStreamOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Raw Outgoing Audio Properties needed for initializing a RawOutgoingAudioStream
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties Properties
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_options_get_properties(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_options_set_properties(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Audio Properties For RawOutgoingAudioStreams
    /// </summary>
    public partial class RawOutgoingAudioStreamProperties : Azure.Communication.Calling.UnityClient.RawAudioStreamProperties, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawOutgoingAudioStreamProperties(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_properties_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawOutgoingAudioStreamProperties() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Specifies the size of sample data block expected to be sent through a given outgoing audio stream.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.AudioStreamBufferDuration BufferDuration
        {
            get
            {
                Azure.Communication.Calling.UnityClient.AudioStreamBufferDuration result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_properties_get_buffer_duration(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_audio_stream_properties_set_buffer_duration(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawOutgoingAudioStreamProperties(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains information about common properties between different types of raw outgoing video streams
    /// </summary>
    public abstract partial class RawOutgoingVideoStream : Azure.Communication.Calling.UnityClient.OutgoingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawOutgoingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Get VideoStreamFormat used to send VideoFrames
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamFormat Format
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.VideoStreamFormat result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_get_format(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.VideoStreamFormat.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Timestamp with the time of the current outgoing stream
        /// </summary>
        public long TimestampInTicks
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_get_timestamp_in_ticks(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamFormatChangedEventHandlerNative))]
        private static void FormatChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs>>(
                    cookie,
                    nameof(FormatChanged));

            Azure.Communication.Calling.UnityClient.RawOutgoingVideoStream instance = Factories.RawOutgoingVideoStreamFactory(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamFormatChangedEventHandlerNative FormatChangedStaticHandlerDelegate = FormatChangedStaticHandler;

        /// <summary>
        /// Listener used to know the video stream format has state
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs> FormatChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.FormatChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_set_format_changed(this.handle, ((ICachedObject)this).Cookie, FormatChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.FormatChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_set_format_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Send Raw Video Frame
        /// </summary>
        /// <param name="RawVideoFrame">
        /// 
        /// </param>
        public async System.Threading.Tasks.Task SendRawVideoFrameAsync(Azure.Communication.Calling.UnityClient.RawVideoFrame rawVideoFrame)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_send_raw_video_frame(this.handle, rawVideoFrame != null ? rawVideoFrame.handle : IntPtr.Zero, promise_.Handle));
                await promise_.Task;
            }
        }

    }

    /// <summary>
    /// Defines the options required for creating a virtual video device. Changes to RawOutgoingVideoStreamOptions do not affect previously created virtual video devices.
    /// </summary>
    public partial class RawOutgoingVideoStreamOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawOutgoingVideoStreamOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public RawOutgoingVideoStreamOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawOutgoingVideoStreamOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoStreamFormat> Formats
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoStreamFormat> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_get_formats(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.VideoStreamFormat.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.VideoStreamFormat>();
                return result;
            }
            set
            {
                IntPtr[] value_array = value?.Select(x => x?.handle ?? IntPtr.Zero).ToArray() ?? Array.Empty<IntPtr>();
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_outgoing_video_stream_options_set_formats(this.handle, value_array, value_array.Length));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold's video frame data as a buffer
    /// </summary>
    public partial class RawVideoFrameBuffer : Azure.Communication.Calling.UnityClient.RawVideoFrame, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawVideoFrameBuffer(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_buffer_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawVideoFrameBuffer() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Representation of the video frame texture as a native buffer.
        /// </summary>
        private System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.NativeBuffer> BuffersUnity
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.NativeBuffer> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_buffer_get_buffers_unity(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.NativeBuffer.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.NativeBuffer>();
                return result;
            }
            set
            {
                IntPtr[] value_array = value?.Select(x => x?.handle ?? IntPtr.Zero).ToArray() ?? Array.Empty<IntPtr>();
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_buffer_set_buffers_unity(this.handle, value_array, value_array.Length));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawVideoFrameBuffer GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawVideoFrameBuffer result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawVideoFrameBuffer>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawVideoFrameBuffer(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RawVideoFrameBuffer.
        /// <summary>
        /// Representation of the video frame as a byte array
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<NativeBuffer> Buffers
        {
            get => BuffersUnity;
            set => BuffersUnity = value;
        }
        // Class extension ends for RawVideoFrameBuffer.

    }

    /// <summary>
    /// Information about the video frame
    /// </summary>
    public abstract partial class RawVideoFrame : IDisposable, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawVideoFrame(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawVideoFrame()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Informs how video frames will be available for encoding or decoding.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawVideoFrameKind Kind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.RawVideoFrameKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_get_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Information about the 4CC used on this video frame
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamFormat StreamFormat
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.VideoStreamFormat result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_get_stream_format(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.VideoStreamFormat.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_set_stream_format(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// time when the video frame was created
        /// </summary>
        public long TimestampInTicks
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_get_timestamp_in_ticks(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_set_timestamp_in_ticks(this.handle, value));
            }
        }

        /// <summary>
        /// Dispose heavy resources
        /// </summary>
        public void Dispose()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_dispose(this.handle));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Contains information about the newest video frame
    /// </summary>
    public partial class RawVideoFrameReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawVideoFrameReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~RawVideoFrameReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the new video frame
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RawVideoFrame Frame
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RawVideoFrame result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_get_frame(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.RawVideoFrameFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// VideoStreamId that own this video frame
        /// </summary>
        public int VideoStreamId
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_received_event_args_get_video_stream_id(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawVideoFrameReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold's video frame data as a texture
    /// </summary>
    public partial class RawVideoFrameTexture : Azure.Communication.Calling.UnityClient.RawVideoFrame, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RawVideoFrameTexture(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_texture_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RawVideoFrameTexture() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Representation of the video frame as a texture saved on memory
        /// </summary>
        public IntPtr Texture
        {
            get
            {
                IntPtr result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_texture_get_texture(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_raw_video_frame_texture_set_texture(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RawVideoFrameTexture GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RawVideoFrameTexture result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RawVideoFrameTexture>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RawVideoFrameTexture(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing call recording
    /// </summary>
    public partial class RecordingCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RecordingCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Indicates if recording is active in current call
        /// </summary>
        public bool IsRecordingActive
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_get_is_recording_active(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The list of current recordings
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RecordingInfo> Recordings
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.RecordingInfo> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_get_recordings(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.RecordingInfo.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.RecordingInfo>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RecordingCallFeatureIsRecordingActiveChangedEventHandlerNative))]
        private static void IsRecordingActiveChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IsRecordingActiveChanged));

            Azure.Communication.Calling.UnityClient.RecordingCallFeature instance = Azure.Communication.Calling.UnityClient.RecordingCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RecordingCallFeatureIsRecordingActiveChangedEventHandlerNative IsRecordingActiveChangedStaticHandlerDelegate = IsRecordingActiveChangedStaticHandler;

        /// <summary>
        /// IsRecordingActiveChanged Event. Occurs when recording is started or stopped for a call
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IsRecordingActiveChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IsRecordingActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_set_is_recording_active_changed(this.handle, ((ICachedObject)this).Cookie, IsRecordingActiveChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IsRecordingActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_set_is_recording_active_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RecordingCallFeatureRecordingUpdatedEventHandlerNative))]
        private static void RecordingUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs>>(
                    cookie,
                    nameof(RecordingUpdated));

            Azure.Communication.Calling.UnityClient.RecordingCallFeature instance = Azure.Communication.Calling.UnityClient.RecordingCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RecordingCallFeatureRecordingUpdatedEventHandlerNative RecordingUpdatedStaticHandlerDelegate = RecordingUpdatedStaticHandler;

        /// <summary>
        /// RecordingsChanged Event. Will be triggered when a recording is started or stopped
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs> RecordingUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.RecordingUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_set_recording_updated(this.handle, ((ICachedObject)this).Cookie, RecordingUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.RecordingUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_call_feature_set_recording_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RecordingCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RecordingCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RecordingCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RecordingCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// The state of an existing recording
    /// </summary>
    public partial class RecordingInfo : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RecordingInfo(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_info_addref(this.handle);
        }

        ~RecordingInfo()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Indicates the state of current recording
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RecordingState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.RecordingState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_info_get_state(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RecordingInfo GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RecordingInfo result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RecordingInfo>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RecordingInfo(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a RecordingUpdated event data
    /// </summary>
    public partial class RecordingUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RecordingUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_updated_event_args_addref(this.handle);
        }

        ~RecordingUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// The recording that was added or removed
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RecordingInfo UpdatedRecording
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.RecordingInfo result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_recording_updated_event_args_get_updated_recording(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RecordingInfo.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RecordingUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// An audio stream that utilizes physical device for playback
    /// </summary>
    public partial class RemoteIncomingAudioStream : Azure.Communication.Calling.UnityClient.IncomingAudioStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RemoteIncomingAudioStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_incoming_audio_stream_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Default constructor
        /// </summary>
        public RemoteIncomingAudioStream() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.RemoteIncomingAudioStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RemoteIncomingAudioStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RemoteIncomingAudioStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RemoteIncomingAudioStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a remote participant on a call
    /// </summary>
    public partial class RemoteParticipant : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RemoteParticipant(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_addref(this.handle);
        }

        ~RemoteParticipant()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Private Preview Only: Display Name of the remote participant
        /// </summary>
        public string DisplayName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_display_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Public Preview Only: Role of the remote participant
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallParticipantRole CallParticipantRole
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CallParticipantRole result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_call_participant_role(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// True if the remote participant is muted
        /// </summary>
        public bool IsMuted
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_is_muted(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// True if the remote participant is speaking. Only applicable to multi-party calls
        /// </summary>
        public bool IsSpeaking
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_is_speaking(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Reason why participant left the call, contains code/subcode.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallEndReason CallEndReason
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallEndReason result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_call_end_reason(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallEndReason.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Current state of the remote participant
        /// </summary>
        public Azure.Communication.Calling.UnityClient.ParticipantState State
        {
            get
            {
                Azure.Communication.Calling.UnityClient.ParticipantState result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_state(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get a list of incoming streams in the current call.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingVideoStream> IncomingVideoStreams
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.IncomingVideoStream> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_incoming_video_streams(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Factories.IncomingVideoStreamFactory(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.IncomingVideoStream>();
                return result;
            }
        }

        /// <summary>
        /// Access to the participants endpoint details
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.EndpointDetails> EndpointDetails
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.EndpointDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_endpoint_details(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.EndpointDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.EndpointDetails>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantStateChangedEventHandlerNative))]
        private static void StateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(StateChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantStateChangedEventHandlerNative StateChangedStaticHandlerDelegate = StateChangedStaticHandler;

        /// <summary>
        /// PropertyChanged Event. Occurs when the remote participant state changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> StateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_state_changed(this.handle, ((ICachedObject)this).Cookie, StateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.StateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantIsMutedChangedEventHandlerNative))]
        private static void IsMutedChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IsMutedChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantIsMutedChangedEventHandlerNative IsMutedChangedStaticHandlerDelegate = IsMutedChangedStaticHandler;

        /// <summary>
        /// PropertyChanged Event. Occurs when the remote participant's IsMuted changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IsMutedChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IsMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_is_muted_changed(this.handle, ((ICachedObject)this).Cookie, IsMutedChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IsMutedChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_is_muted_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantIsSpeakingChangedEventHandlerNative))]
        private static void IsSpeakingChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IsSpeakingChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantIsSpeakingChangedEventHandlerNative IsSpeakingChangedStaticHandlerDelegate = IsSpeakingChangedStaticHandler;

        /// <summary>
        /// PropertyChanged Event. Occurs when the remote participant is an active speaker in a multi-party calls
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IsSpeakingChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IsSpeakingChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_is_speaking_changed(this.handle, ((ICachedObject)this).Cookie, IsSpeakingChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IsSpeakingChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_is_speaking_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantDisplayNameChangedEventHandlerNative))]
        private static void DisplayNameChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(DisplayNameChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantDisplayNameChangedEventHandlerNative DisplayNameChangedStaticHandlerDelegate = DisplayNameChangedStaticHandler;

        /// <summary>
        /// PropertyChanged Event. Occurs when the remote participant's displayName changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> DisplayNameChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.DisplayNameChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_display_name_changed(this.handle, ((ICachedObject)this).Cookie, DisplayNameChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.DisplayNameChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_display_name_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantRoleChangedEventHandlerNative))]
        private static void RoleChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(RoleChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantRoleChangedEventHandlerNative RoleChangedStaticHandlerDelegate = RoleChangedStaticHandler;

        /// <summary>
        /// PropertyChanged Event. Occurs when the remote participant's role changes
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> RoleChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.RoleChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_role_changed(this.handle, ((ICachedObject)this).Cookie, RoleChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.RoleChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_role_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.RemoteParticipantVideoStreamStateChangedEventHandlerNative))]
        private static void VideoStreamStateChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs>>(
                    cookie,
                    nameof(VideoStreamStateChanged));

            Azure.Communication.Calling.UnityClient.RemoteParticipant instance = Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.RemoteParticipantVideoStreamStateChangedEventHandlerNative VideoStreamStateChangedStaticHandlerDelegate = VideoStreamStateChangedStaticHandler;

        /// <summary>
        /// Occurs when the CallVideoStream has changed
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs> VideoStreamStateChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.VideoStreamStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_video_stream_state_changed(this.handle, ((ICachedObject)this).Cookie, VideoStreamStateChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.VideoStreamStateChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_set_video_stream_state_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Private Preview Only: Identity of the remote participant
        /// </summary>
        private string GetIdentifierInternal()
        {
            string result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_get_identifier_internal(this.handle, out result));
            return result;
        }

        /// <summary>
        /// Mute remote participant audio
        /// </summary>
        public async System.Threading.Tasks.Task MuteAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_participant_mute(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.RemoteParticipant GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RemoteParticipant result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RemoteParticipant>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RemoteParticipant(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RemoteParticipant.
        /// <summary>
        /// Get the identity of the remote participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(GetIdentifierInternal());
            }
        }
        // Class extension ends for RemoteParticipant.

    }

    /// <summary>
    /// Video stream on remote participant
    /// </summary>
    public partial class RemoteIncomingVideoStream : Azure.Communication.Calling.UnityClient.IncomingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RemoteIncomingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Creates and attach the video binding event to the underlying video
        /// </summary>
        private string StartPreviewWindows()
        {
            string result;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_video_stream_start_preview_windows(this.handle, out result));
            return result;
        }

        /// <summary>
        /// Detach the video binding event to the underlying video
        /// </summary>
        private void StopPreviewInternal()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_remote_video_stream_stop_preview_internal(this.handle));
        }

        internal static Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for RemoteVideoStream.
        /// <summary>
        /// Start rendering the remote video stream to the returned Uri.
        /// </summary>
        public async System.Threading.Tasks.Task<System.Uri> StartPreviewAsync()
        {
            return await Task.Run(() =>
            {
                return new System.Uri(StartPreviewWindows());
            });
        }

        /// <summary>
        /// Stop rendering the remote video stream.
        /// </summary>
        public async System.Threading.Tasks.Task StopPreviewAsync()
        {
            await Task.Run(() =>
            {
                StopPreviewInternal();
            });
        }
        // Class extension ends for RemoteVideoStream.

    }

    /// <summary>
    /// Options for joining a call using Room ID locator
    /// </summary>
    public partial class RoomCallLocator : Azure.Communication.Calling.UnityClient.JoinMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected RoomCallLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string roomId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_room_call_locator_create_string_room_id(roomId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a Room ID
        /// </summary>
        /// <param name="roomId">
        /// A string representing the Room to join.
        /// </param>
        public RoomCallLocator(string roomId) : base(Create(roomId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// The Room identifier of the meeting
        /// </summary>
        public string RoomId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_room_call_locator_get_room_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.RoomCallLocator GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.RoomCallLocator result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.RoomCallLocator>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.RoomCallLocator(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Screen Share stream information
    /// </summary>
    public partial class ScreenShareOutgoingVideoStream : Azure.Communication.Calling.UnityClient.RawOutgoingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ScreenShareOutgoingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions videoStreamOptions)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_screen_share_outgoing_video_stream_create_raw_outgoing_video_stream_options_video_stream_options(videoStreamOptions != null ? videoStreamOptions.handle : IntPtr.Zero, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Constructor used to create an instance of a stream that send's screen frames
        /// </summary>
        /// <param name="videoStreamOptions">
        /// Video options to be used on order to send the frames properly.
        /// </param>
        public ScreenShareOutgoingVideoStream(Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions videoStreamOptions) : base(Create(videoStreamOptions), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.ScreenShareOutgoingVideoStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.ScreenShareOutgoingVideoStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.ScreenShareOutgoingVideoStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.ScreenShareOutgoingVideoStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing spotlight states in a call.
    /// </summary>
    public partial class SpotlightCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SpotlightCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Send request to return the maximum number of participants that can be spotlighted
        /// </summary>
        public int MaxSpotlightedParticipants
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_get_max_spotlighted_participants(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Send request to get a list of all spotlighted participants
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> SpotlightedParticipants
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_get_spotlighted_participants(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.SpotlightedParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.SpotlightedParticipant>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(SpotlightChangedDelegateNative))]
        private static void SpotlightChangedStaticHandler(IntPtr cookie, IntPtr args)
        {
            Azure.Communication.Calling.UnityClient.SpotlightChangedDelegate handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<Azure.Communication.Calling.UnityClient.SpotlightChangedDelegate>(
                    cookie,
                    nameof(SpotlightChanged));

            Azure.Communication.Calling.UnityClient.SpotlightCallFeature instance = Azure.Communication.Calling.UnityClient.SpotlightCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs.GetOrCreateInstance(args, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.SpotlightChangedDelegateNative SpotlightChangedStaticHandlerDelegate = SpotlightChangedStaticHandler;

        /// <summary>
        /// Spotlight event occurs when any user starts or stops spotlight.
        /// </summary>
        public event Azure.Communication.Calling.UnityClient.SpotlightChangedDelegate SpotlightChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.SpotlightChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_set_on_spotlight_changed(this.handle, ((ICachedObject)this).Cookie, SpotlightChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.SpotlightChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_set_on_spotlight_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Send request to start spotlight for local and remote users.
        /// </summary>
        private async System.Threading.Tasks.Task SpotlightInternalAsync([In] string[] participants)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_spotlight_internal(this.handle, participants, participants?.Length ?? 0, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send request to stop spotlight for local and remote users.
        /// </summary>
        private async System.Threading.Tasks.Task CancelSpotlightInternalAsync([In] string[] participants)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_cancel_spotlight_internal(this.handle, participants, participants?.Length ?? 0, promise_.Handle));
                await promise_.Task;
            }
        }

        /// <summary>
        /// Send request to stop spotlight for all spotlighted participants
        /// </summary>
        public async System.Threading.Tasks.Task CancelAllSpotlightsAsync()
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_call_feature_cancel_all_spotlights(this.handle, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.SpotlightCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.SpotlightCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.SpotlightCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.SpotlightCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for SpotlightCallFeature.
        /// <summary>
        /// Send request to start spotlight for local and remote users.
        /// </summary>
        public async System.Threading.Tasks.Task SpotlightAsync(Azure.Communication.Calling.UnityClient.CallIdentifier[] participants)
        {
            string[] participantIds = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(participants);
            await SpotlightInternalAsync(participantIds);
        }
        /// <summary>
        /// Send request to stop spotlight for local and remote users.
        /// </summary>
        public async System.Threading.Tasks.Task CancelSpotlightAsync(Azure.Communication.Calling.UnityClient.CallIdentifier[] participants)
        {
            string[] participantIds = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(participants);
            await CancelSpotlightInternalAsync(participantIds);
        }
        // Class extension ends for SpotlightCallFeature.

    }

    /// <summary>
    /// Spotlight event information.
    /// </summary>
    public partial class SpotlightChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SpotlightChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_addref(this.handle);
        }

        ~SpotlightChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// List of spotlighted participants identifiers that were added
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> Added
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_get_added(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.SpotlightedParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.SpotlightedParticipant>();
                return result;
            }
        }

        /// <summary>
        /// List of Participants identifiers whose spotlight state were removed
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> Removed
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.SpotlightedParticipant> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlight_changed_event_args_get_removed(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.SpotlightedParticipant.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.SpotlightedParticipant>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.SpotlightChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Spotlighted participant details
    /// </summary>
    public partial class SpotlightedParticipant : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SpotlightedParticipant(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlighted_participant_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlighted_participant_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlighted_participant_addref(this.handle);
        }

        ~SpotlightedParticipant()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlighted_participant_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Identifier of spotlighted participant
        /// </summary>
        private string Participant
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_spotlighted_participant_get_participant(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.SpotlightedParticipant GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.SpotlightedParticipant result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.SpotlightedParticipant>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.SpotlightedParticipant(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for SpotlightedParticipant.
        /// <summary>
        /// Get the identity of the participant.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallIdentifier Identifier
        {
            get
            {
                return Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToCallIdentifier(Participant);
            }
        }
        // Class extension ends for SpotlightedParticipant.

    }

    /// <summary>
    /// Options to be passed when starting a call
    /// </summary>
    public partial class StartCallOptions : Azure.Communication.Calling.UnityClient.CallOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StartCallOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_call_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a default configuration
        /// </summary>
        public StartCallOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Alternate Identifier to be used while starting a call with PSTN participants
        /// </summary>
        private string AlternateId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_call_options_get_alternate_id(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_call_options_set_alternate_id(this.handle, value));
            }
        }

        internal static Azure.Communication.Calling.UnityClient.StartCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.StartCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.StartCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.StartCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for StartCallOptions.
        /// <summary>
        /// A phone number in E.164 format that will be used to represent callers identity. For example, using
        /// the alternateCallerId to add a participant using PSTN, this number will  be used as the caller id
        /// in the PSTN call.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier AlternateCallerId
        {
            get
            {
                return new Azure.Communication.Calling.UnityClient.PhoneNumberCallIdentifier(AlternateId);
            }

            set
            {
                AlternateId = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToMri(value);
            }
        }
        // Class extension ends for StartCallOptions.

    }

    /// <summary>
    /// Options to request language before starting captions
    /// </summary>
    public partial class StartCaptionsOptions : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StartCaptionsOptions(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_addref(this.handle);
        }

        /// <summary>
        /// Start captions options constructor.
        /// </summary>
        public StartCaptionsOptions()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~StartCaptionsOptions()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// language in which the speaker is speaking.
        /// </summary>
        public string SpokenLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_get_spoken_language(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_captions_options_set_spoken_language(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.StartCaptionsOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.StartCaptionsOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.StartCaptionsOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.StartCaptionsOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options to be passed when starting a teams call
    /// </summary>
    public partial class StartTeamsCallOptions : Azure.Communication.Calling.UnityClient.CallOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StartTeamsCallOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_teams_call_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with the given threadId
        /// </summary>
        public StartTeamsCallOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.StartTeamsCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.StartTeamsCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.StartTeamsCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.StartTeamsCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options to be passed when starting a teams group call
    /// </summary>
    public partial class StartTeamsGroupCallOptions : Azure.Communication.Calling.UnityClient.StartTeamsCallOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected StartTeamsGroupCallOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string threadId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_teams_group_call_options_create_string_thread_id(threadId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with the given threadId
        /// </summary>
        public StartTeamsGroupCallOptions(string threadId) : base(Create(threadId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Thread Id to pass when adding a new participant
        /// </summary>
        public string ThreadId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_start_teams_group_call_options_get_thread_id(this.handle, out result));
                return result;
            }
        }

        internal static new Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public partial class SwitchSourceTelemetryEvent : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected SwitchSourceTelemetryEvent(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_addref(this.handle);
        }

        public SwitchSourceTelemetryEvent(Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream localStream)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_create_local_video_stream_local_stream(localStream != null ? localStream.handle : IntPtr.Zero, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~SwitchSourceTelemetryEvent()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public void sendAttempt()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_send_attempt(this.handle));
        }

        public void sendSuccess()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_send_success(this.handle));
        }

        public void sendFailure(string reason)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_switch_source_telemetry_event_send_failure(this.handle, reason));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.SwitchSourceTelemetryEvent GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.SwitchSourceTelemetryEvent result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.SwitchSourceTelemetryEvent>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.SwitchSourceTelemetryEvent(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Teams Call agent created by the CallClient factory method createTeamsCallAgent It bears the responsibility of managing calls on behalf of the authenticated user
    /// </summary>
    public partial class TeamsCallAgent : Azure.Communication.Calling.UnityClient.CommonCallAgent, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCallAgent(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Returns the list of all active calls.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> Calls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_get_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.TeamsCall>();
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCallAgentCallsUpdatedEventHandlerNative))]
        private static void CallsUpdatedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs>>(
                    cookie,
                    nameof(CallsUpdated));

            Azure.Communication.Calling.UnityClient.TeamsCallAgent instance = Azure.Communication.Calling.UnityClient.TeamsCallAgent.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCallAgentCallsUpdatedEventHandlerNative CallsUpdatedStaticHandlerDelegate = CallsUpdatedStaticHandler;

        /// <summary>
        /// CallsUpdated event. Occurs when a new call is created, in case of an incoming call or when an existing call is disconnected.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs> CallsUpdated
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_set_calls_updated(this.handle, ((ICachedObject)this).Cookie, CallsUpdatedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CallsUpdated), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_set_calls_updated(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCallAgentIncomingCallReceivedEventHandlerNative))]
        private static void IncomingCallReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs>>(
                    cookie,
                    nameof(IncomingCallReceived));

            Azure.Communication.Calling.UnityClient.TeamsCallAgent instance = Azure.Communication.Calling.UnityClient.TeamsCallAgent.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCallAgentIncomingCallReceivedEventHandlerNative IncomingCallReceivedStaticHandlerDelegate = IncomingCallReceivedStaticHandler;

        /// <summary>
        /// TeamsIncomingCallReceived event. Occurs when incoming call is recieved from PushNotification or Trouter.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs> IncomingCallReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_set_incoming_call_received(this.handle, ((ICachedObject)this).Cookie, IncomingCallReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IncomingCallReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_set_incoming_call_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> StartCallInternalAsync([In] string participant, Azure.Communication.Calling.UnityClient.StartTeamsCallOptions options, string callId)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_start_call_internal(this.handle, participant, options != null ? options.handle : IntPtr.Zero, callId, promise_.Handle));
                return await promise_.Task;
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> StartGroupCallInternalAsync([In] string[] participants, Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions options, string callId)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_start_group_call_internal(this.handle, participants, participants?.Length ?? 0, options != null ? options.handle : IntPtr.Zero, callId, promise_.Handle));
                return await promise_.Task;
            }
        }

        private async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> JoinInternalAsync(Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator meetingLocator, Azure.Communication.Calling.UnityClient.JoinCallOptions joinCallOptions)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_join_internal(this.handle, meetingLocator != null ? meetingLocator.handle : IntPtr.Zero, joinCallOptions != null ? joinCallOptions.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsCallAgent GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCallAgent result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCallAgent>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCallAgent(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for TeamsCallAgent.
        /// <summary>
        /// Join a teams call.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> JoinAsync(
                Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator meetingLocator, 
                Azure.Communication.Calling.UnityClient.JoinCallOptions joinCallOptions)
        {
            return JoinInternalAsync(meetingLocator, joinCallOptions);
        }

        /// <summary>
        /// Join a teams call.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> JoinAsync(
                Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator meetingLocator)
        {
            return JoinInternalAsync(meetingLocator, null);
        }

        /// <summary>
        /// Initiate a call to the participant provided.
        /// </summary>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> StartCallAsync(
                Azure.Communication.Calling.UnityClient.CallIdentifier identifier, 
                Azure.Communication.Calling.UnityClient.StartTeamsCallOptions startTeamsCallOptions)
        {
            return await Task.Run(() =>
            {
                Guid guid = Guid.NewGuid();
                string callId = guid.ToString();

                string participant = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ToMri(identifier);

                return StartCallInternalAsync(participant, startTeamsCallOptions, callId);
            });
        }

        /// <summary>
        /// Initiate a call to the participants provided.
        /// </summary>
        public System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> StartGroupCallAsync(
                Azure.Communication.Calling.UnityClient.CallIdentifier[] identifiers, 
                Azure.Communication.Calling.UnityClient.StartTeamsGroupCallOptions startTeamsGroupCallOptions)
        {
            Guid guid = Guid.NewGuid();
            string callId = guid.ToString();
            string[] participants = Azure.Communication.Calling.UnityClient.IdentifierHelpers.ConvertIdentifiersToMris(identifiers);
            return StartGroupCallInternalAsync(participants, startTeamsGroupCallOptions, callId);
        }
        // Class extension ends for TeamsCallAgent.

    }

    /// <summary>
    /// Options for creating TeamsCallAgent
    /// </summary>
    public partial class TeamsCallAgentOptions : Azure.Communication.Calling.UnityClient.CommonCallAgentOptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCallAgentOptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create()
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_agent_options_create(out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a default options
        /// </summary>
        public TeamsCallAgentOptions() : base(Create(), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCallAgentOptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a teams call
    /// </summary>
    public partial class TeamsCall : Azure.Communication.Calling.UnityClient.CommonCommunicationCall, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCall(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Information about the teams call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.TeamsCallDetails Details
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.TeamsCallDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_get_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.TeamsCallDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        private Azure.Communication.Calling.UnityClient.RemoteParticipant AddParticipant(string participant, Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions options)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.RemoteParticipant result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_add_participant(this.handle, participant, options != null ? options.handle : IntPtr.Zero, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.RemoteParticipant.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsCall GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCall result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCall>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCall(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
        // Class extension begins for TeamsCall.
        /// <summary>
        /// Add a participant to a call.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.RemoteParticipant AddParticipant(Azure.Communication.Calling.UnityClient.CallIdentifier participant, Azure.Communication.Calling.UnityClient.AddTeamsParticipantOptions options)
        {
            return AddParticipant(participant.RawId, options);
        }
        // Class extension ends for TeamsCall.

    }

    /// <summary>
    /// Describes a teamscall's information
    /// </summary>
    public partial class TeamsCallDetails : Azure.Communication.Calling.UnityClient.CommonCallDetails, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCallDetails(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Get thread ID
        /// </summary>
        public string ThreadId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_call_info_get_thread_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsCallDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCallDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCallDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCallDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a TeamsCallsUpdated event
    /// </summary>
    public partial class TeamsCallsUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCallsUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_addref(this.handle);
        }

        ~TeamsCallsUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// New calls being tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> AddedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_get_added_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.TeamsCall>();
                return result;
            }
        }

        /// <summary>
        /// Calls that are no longer tracked by the library
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> RemovedCalls
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.TeamsCall> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_calls_updated_event_args_get_removed_calls(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.TeamsCall>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCallsUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Teams captions for managing captions for a Teams Interop call.
    /// </summary>
    public partial class TeamsCaptions : Azure.Communication.Calling.UnityClient.CallCaptions, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCaptions(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Get active caption language.
        /// </summary>
        public string ActiveCaptionLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_get_active_caption_language(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// List of supported captions languages for Captions.
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<string> SupportedCaptionLanguages
        {
            get
            {
                IntPtr result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_get_supported_caption_languages(this.handle, out result_array, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result_array, result_length);
            }
        }

        /// <summary>
        /// List of supported captions languages for Captions.
        /// </summary>
        private string[] SupportedCaptionLanguagesInternal
        {
            get
            {
                IntPtr result;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_get_supported_caption_languages_internal(this.handle, out result, out result_length));
                return Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.IntPtrToStringArray(result, result_length);
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCaptionsCaptionsEnabledChangedEventHandlerNative))]
        private static void CaptionsEnabledChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(CaptionsEnabledChanged));

            Azure.Communication.Calling.UnityClient.TeamsCaptions instance = Azure.Communication.Calling.UnityClient.TeamsCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCaptionsCaptionsEnabledChangedEventHandlerNative CaptionsEnabledChangedStaticHandlerDelegate = CaptionsEnabledChangedStaticHandler;

        /// <summary>
        /// IsEnabled Event. Occurs when captions is started or stopped.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> CaptionsEnabledChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsEnabledChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_captions_enabled_changed(this.handle, ((ICachedObject)this).Cookie, CaptionsEnabledChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsEnabledChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_captions_enabled_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCaptionsActiveSpokenLanguageChangedEventHandlerNative))]
        private static void ActiveSpokenLanguageChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ActiveSpokenLanguageChanged));

            Azure.Communication.Calling.UnityClient.TeamsCaptions instance = Azure.Communication.Calling.UnityClient.TeamsCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCaptionsActiveSpokenLanguageChangedEventHandlerNative ActiveSpokenLanguageChangedStaticHandlerDelegate = ActiveSpokenLanguageChangedStaticHandler;

        /// <summary>
        /// ActiveSpokenLanguage Event. Occurs when spoken language is changed.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ActiveSpokenLanguageChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveSpokenLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_active_spoken_language_changed(this.handle, ((ICachedObject)this).Cookie, ActiveSpokenLanguageChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveSpokenLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_active_spoken_language_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCaptionsActiveCaptionLanguageChangedEventHandlerNative))]
        private static void ActiveCaptionLanguageChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(ActiveCaptionLanguageChanged));

            Azure.Communication.Calling.UnityClient.TeamsCaptions instance = Azure.Communication.Calling.UnityClient.TeamsCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCaptionsActiveCaptionLanguageChangedEventHandlerNative ActiveCaptionLanguageChangedStaticHandlerDelegate = ActiveCaptionLanguageChangedStaticHandler;

        /// <summary>
        /// ActiveCaptionLanguage Event. Occurs when caption language is changed.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> ActiveCaptionLanguageChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveCaptionLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_active_caption_language_changed(this.handle, ((ICachedObject)this).Cookie, ActiveCaptionLanguageChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.ActiveCaptionLanguageChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_active_caption_language_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TeamsCaptionsCaptionsReceivedEventHandlerNative))]
        private static void CaptionsReceivedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs>>(
                    cookie,
                    nameof(CaptionsReceived));

            Azure.Communication.Calling.UnityClient.TeamsCaptions instance = Azure.Communication.Calling.UnityClient.TeamsCaptions.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TeamsCaptionsCaptionsReceivedEventHandlerNative CaptionsReceivedStaticHandlerDelegate = CaptionsReceivedStaticHandler;

        /// <summary>
        /// CaptionsReceived Event. Occurs when captions is received for a call.
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs> CaptionsReceived
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_captions_received(this.handle, ((ICachedObject)this).Cookie, CaptionsReceivedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.CaptionsReceived), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_captions_received(this.handle, IntPtr.Zero, null));
                }
            }
        }

        /// <summary>
        /// Set the captions language.
        /// </summary>
        public async System.Threading.Tasks.Task SetCaptionLanguageAsync(string language)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_set_caption_language(this.handle, language, promise_.Handle));
                await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsCaptions GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCaptions result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCaptions>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCaptions(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an CaptionsReceived event for when new captions data comes in
    /// </summary>
    public partial class TeamsCaptionsReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsCaptionsReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_addref(this.handle);
        }

        ~TeamsCaptionsReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Information about the speaker.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallerDetails Speaker
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallerDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_speaker(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.CallerDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// The original text with no transcribed.
        /// </summary>
        public string SpokenText
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_spoken_text(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// language identifier for the speaker.
        /// </summary>
        public string SpokenLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_spoken_language(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The transcribed text.
        /// </summary>
        public string CaptionText
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_caption_text(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// language identifier for the captions text.
        /// </summary>
        public string CaptionLanguage
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_caption_language(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// CaptionsResultType is Partial if text contains partially spoken sentence. It is set to Final once the sentence has been completely transcribed.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CaptionsResultType ResultType
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CaptionsResultType result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_result_type(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Timestamp denoting the time when the corresponding speech was made. timestamp is received from call recorder in C# ticks since 1/1/1900 (NTP Epoch) timestamp is converted to ms since 1/1/1970 (UNIX Epoch) 10000 C# ticks / 1 ms
        /// </summary>
        public DateTimeOffset Timestamp
        {
            get
            {
                long result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_captions_received_event_args_get_timestamp(this.handle, out result));
                return (result == 0) ? DateTimeOffset.MaxValue : DateTimeOffset.FromUnixTimeMilliseconds(result);
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsCaptionsReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes an teams incoming call
    /// </summary>
    public partial class TeamsIncomingCall : Azure.Communication.Calling.UnityClient.CommonIncomingCall, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsIncomingCall(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Information about the call
        /// </summary>
        public Azure.Communication.Calling.UnityClient.TeamsCallDetails CallDetails
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.TeamsCallDetails result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_get_call_info(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.TeamsCallDetails.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Accept a teams incoming call
        /// </summary>
        /// <param name="options">
        /// Options for call Accepting the call
        /// </param>
        public async System.Threading.Tasks.Task<Azure.Communication.Calling.UnityClient.TeamsCall> AcceptAsync(Azure.Communication.Calling.UnityClient.AcceptCallOptions options)
        {
            using (var promise_ = Azure.Communication.Calling.UnityClient.Promise.Create(pv_ => pv_.Pointer != IntPtr.Zero ? Azure.Communication.Calling.UnityClient.TeamsCall.GetOrCreateInstance(pv_.Pointer, true) : default, System.Threading.CancellationToken.None))
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_accept(this.handle, options != null ? options.handle : IntPtr.Zero, promise_.Handle));
                return await promise_.Task;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsIncomingCall GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsIncomingCall result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsIncomingCall>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsIncomingCall(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// EventArgs for TeamsIncomingCallReceived event.
    /// </summary>
    public partial class TeamsIncomingCallReceivedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsIncomingCallReceivedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_received_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_received_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_received_event_args_addref(this.handle);
        }

        ~TeamsIncomingCallReceivedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_received_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public Azure.Communication.Calling.UnityClient.TeamsIncomingCall IncomingCall
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.TeamsIncomingCall result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_incoming_call_received_event_args_get_incoming_call(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.TeamsIncomingCall.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsIncomingCallReceivedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options for joining a Teams meeting using Coordinates locator
    /// </summary>
    public partial class TeamsMeetingCoordinatesLocator : Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsMeetingCoordinatesLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string threadId, System.Guid organizerId, System.Guid tenantId, string messageId)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_coordinates_locator_create_string_thread_id_guid_organizer_id_guid_tenant_id_string_message_id(threadId, organizerId, tenantId, messageId, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a threadId, OrganizerId, TenantId, MessageId
        /// </summary>
        /// <param name="threadId">
        /// A string representing the thread to join.
        /// </param>
        /// <param name="organizerId">
        /// A Guid representing the group to join.
        /// </param>
        /// <param name="tenantId">
        /// A Guid representing the group to join.
        /// </param>
        /// <param name="messageId">
        /// A Guid representing the group to join.
        /// </param>
        public TeamsMeetingCoordinatesLocator(string threadId, System.Guid organizerId, System.Guid tenantId, string messageId) : base(Create(threadId, organizerId, tenantId, messageId), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// The thread identifier of meeting
        /// </summary>
        public string ChatThreadId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_coordinates_locator_get_thread_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The organizer identifier of meeting
        /// </summary>
        public System.Guid OrganizerId
        {
            get
            {
                System.Guid result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_coordinates_locator_get_organizer_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The tenant identifier of meeting
        /// </summary>
        public System.Guid TenantId
        {
            get
            {
                System.Guid result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_coordinates_locator_get_tenant_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// The message identifier of meeting
        /// </summary>
        public string MessageId
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_coordinates_locator_get_message_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsMeetingCoordinatesLocator GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsMeetingCoordinatesLocator result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsMeetingCoordinatesLocator>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsMeetingCoordinatesLocator(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Options for joining a Teams meeting using Link locator
    /// </summary>
    public partial class TeamsMeetingLinkLocator : Azure.Communication.Calling.UnityClient.JoinTeamsMeetingLocator, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TeamsMeetingLinkLocator(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string meetingLink)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_link_locator_create_string_meeting_link(meetingLink, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a new instance with a MeetingLink
        /// </summary>
        /// <param name="meetingLink">
        /// A string representing the full URI of the teams meeting.
        /// </param>
        public TeamsMeetingLinkLocator(string meetingLink) : base(Create(meetingLink), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        public System.Uri MeetingLink
        {
            get
            {
                string result_string;
                Uri result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_teams_meeting_link_locator_get_meeting_link_uri(this.handle, out result_string));
                result = new Uri(result_string, UriKind.RelativeOrAbsolute);
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TeamsMeetingLinkLocator GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TeamsMeetingLinkLocator result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TeamsMeetingLinkLocator>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TeamsMeetingLinkLocator(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Call Feature for managing call transcription
    /// </summary>
    public partial class TranscriptionCallFeature : Azure.Communication.Calling.UnityClient.CallFeature, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected TranscriptionCallFeature(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        /// <summary>
        /// Indicates if transcription is active in current call
        /// </summary>
        public bool IsTranscriptionActive
        {
            get
            {
                bool result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_transcription_call_feature_get_is_transcription_active(this.handle, out result));
                return result;
            }
        }

        /// <summary>Static handler.</summary>
        [AOT.MonoPInvokeCallback(typeof(Azure.Communication.Calling.UnityClient.TranscriptionCallFeatureIsTranscriptionActiveChangedEventHandlerNative))]
        private static void IsTranscriptionActiveChangedStaticHandler(IntPtr cookie, IntPtr e)
        {
            System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> handler =
                Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.GetEventHandler<System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs>>(
                    cookie,
                    nameof(IsTranscriptionActiveChanged));

            Azure.Communication.Calling.UnityClient.TranscriptionCallFeature instance = Azure.Communication.Calling.UnityClient.TranscriptionCallFeature.GetOrCreateInstance(cookie, transfer: false);

            if (instance == null)
            {
                throw new System.InvalidOperationException("The object instance is not tracked by the cache.");
            }

            handler?.Invoke(instance, Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs.GetOrCreateInstance(e, transfer: false));
        }
        /// <summary>This static delegate instance keeps callbacks alive.</summary>
        private static Azure.Communication.Calling.UnityClient.TranscriptionCallFeatureIsTranscriptionActiveChangedEventHandlerNative IsTranscriptionActiveChangedStaticHandlerDelegate = IsTranscriptionActiveChangedStaticHandler;

        /// <summary>
        /// IsTranscriptionActiveChanged Event. Occurs when transcription is started or stopped for a call
        /// </summary>
        public event System.EventHandler<Azure.Communication.Calling.UnityClient.PropertyChangedEventArgs> IsTranscriptionActiveChanged
        {
            add
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.AddEventHandler((this as ICachedObject).Cookie, nameof(this.IsTranscriptionActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_transcription_call_feature_set_is_transcription_active_changed(this.handle, ((ICachedObject)this).Cookie, IsTranscriptionActiveChangedStaticHandlerDelegate));
                }
            }
            remove
            {
                if (Azure.Communication.Calling.UnityClient.ProjectedObjectEventHandlerCache.RemoveEventHandler((this as ICachedObject).Cookie, nameof(this.IsTranscriptionActiveChanged), value))
                {
                    Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_transcription_call_feature_set_is_transcription_active_changed(this.handle, IntPtr.Zero, null));
                }
            }
        }

        internal static Azure.Communication.Calling.UnityClient.TranscriptionCallFeature GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.TranscriptionCallFeature result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.TranscriptionCallFeature>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.TranscriptionCallFeature(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Catch-all for all other call identifiers.
    /// </summary>
    public partial class UnknownCallIdentifier : Azure.Communication.Calling.UnityClient.CallIdentifier, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UnknownCallIdentifier(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string id)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_unknown_call_identifier_create_string_id(id, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates an instance of of <see cref="UnknownCallIdentifier"/>
        /// </summary>
        /// <param name="id">
        /// the string identifier representing the identity.
        /// </param>
        public UnknownCallIdentifier(string id) : base(Create(id), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Gets id of this identifier.
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_unknown_call_identifier_get_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.UnknownCallIdentifier GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.UnknownCallIdentifier result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.UnknownCallIdentifier>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.UnknownCallIdentifier(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// User identifier for Communication Services Users.
    /// </summary>
    public partial class UserCallIdentifier : Azure.Communication.Calling.UnityClient.CallIdentifier, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected UserCallIdentifier(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(string id)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_user_call_identifier_create_string_id(id, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Creates a UserIdentifier object
        /// </summary>
        /// <param name="id">
        /// identifier of the communication user.
        /// </param>
        public UserCallIdentifier(string id) : base(Create(id), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Get id of the communication user.
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_user_call_identifier_get_id(this.handle, out result));
                return result;
            }
        }

        internal static Azure.Communication.Calling.UnityClient.UserCallIdentifier GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.UserCallIdentifier result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.UserCallIdentifier>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.UserCallIdentifier(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Hold properties that configure VideoConstraints
    /// </summary>
    public partial class VideoConstraints : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoConstraints(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public VideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~VideoConstraints()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Constraints for incoming video
        /// </summary>
        public Azure.Communication.Calling.UnityClient.IncomingVideoConstraints IncomingVideoConstraints
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.IncomingVideoConstraints result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_get_incoming_video_constraints(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.IncomingVideoConstraints.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_set_incoming_video_constraints(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        /// <summary>
        /// Constraints for outgoing video
        /// </summary>
        public Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints OutgoingVideoConstraints
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_get_outgoing_video_constraints(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.OutgoingVideoConstraints.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_constraints_set_outgoing_video_constraints(this.handle, value != null ? value.handle : IntPtr.Zero));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoConstraints GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoConstraints result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoConstraints>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoConstraints(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about a video device
    /// </summary>
    public partial class VideoDeviceDetails : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoDeviceDetails(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_addref(this.handle);
        }

        ~VideoDeviceDetails()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Get the name of this video device.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_get_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get Name of this audio device.
        /// </summary>
        public string Id
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_get_id(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Direction of the camera
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CameraFacing CameraFacing
        {
            get
            {
                Azure.Communication.Calling.UnityClient.CameraFacing result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_get_camera_facing(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Get the VideoDeviceKind of this video device.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoDeviceKind VideoDeviceKind
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoDeviceKind result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_device_info_get_video_device_kind(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoDeviceDetails GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoDeviceDetails result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoDeviceDetails>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoDeviceDetails(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes a VideoDevicesUpdated event data
    /// </summary>
    public partial class VideoDevicesUpdatedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoDevicesUpdatedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_addref(this.handle);
        }

        ~VideoDevicesUpdatedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Video devicesRemote video streams that have been added to the current call
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> AddedVideoDevices
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_get_added_video_devices(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.VideoDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.VideoDeviceDetails>();
                return result;
            }
        }

        /// <summary>
        /// Remote video streams that have been added to the current call
        /// </summary>
        public System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> RemovedVideoDevices
        {
            get
            {
                System.Collections.Generic.IReadOnlyList<Azure.Communication.Calling.UnityClient.VideoDeviceDetails> result;
                IntPtr[] result_array;
                int result_length;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_devices_updated_event_args_get_removed_video_devices(this.handle, out result_array, out result_length));
                result = result_array?.Select(handle => Azure.Communication.Calling.UnityClient.VideoDeviceDetails.GetOrCreateInstance(handle, transfer: true)).ToArray() ?? Array.Empty<Azure.Communication.Calling.UnityClient.VideoDeviceDetails>();
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoDevicesUpdatedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about video effect disabled status
    /// </summary>
    public partial class VideoEffectDisabledEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoEffectDisabledEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_disabled_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_disabled_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_disabled_event_args_addref(this.handle);
        }

        ~VideoEffectDisabledEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_disabled_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the video effect.
        /// </summary>
        public string VideoEffectName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_disabled_event_args_get_video_effect_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoEffectDisabledEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about video effect enabled status
    /// </summary>
    public partial class VideoEffectEnabledEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoEffectEnabledEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_enabled_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_enabled_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_enabled_event_args_addref(this.handle);
        }

        ~VideoEffectEnabledEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_enabled_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the video effect.
        /// </summary>
        public string VideoEffectName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_enabled_event_args_get_video_effect_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoEffectEnabledEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Information about remote Effects changing state
    /// </summary>
    public partial class VideoEffectErrorEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoEffectErrorEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_addref(this.handle);
        }

        ~VideoEffectErrorEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the video effect.
        /// </summary>
        public string VideoEffectName
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_get_video_effect_name(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Error code.
        /// </summary>
        public string Code
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_get_code(this.handle, out result));
                return result;
            }
        }

        /// <summary>
        /// Error message.
        /// </summary>
        public string Message
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_error_event_args_get_message(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoEffectErrorEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Video Effect base type.
    /// </summary>
    public abstract partial class VideoEffect : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoEffect(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_addref(this.handle);
        }

        ~VideoEffect()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Name of the video effect.
        /// </summary>
        public string Name
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_effect_get_name(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

    }

    /// <summary>
    /// Contains information about changes to the flow control of a video or audio virtual device.
    /// </summary>
    public partial class VideoStreamFormatChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoStreamFormatChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_changed_event_args_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~VideoStreamFormatChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// New VideoStreamFormat
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamFormat Format
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.VideoStreamFormat result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_changed_event_args_get_format(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.VideoStreamFormat.GetOrCreateInstance(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoStreamFormatChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Describes details of the video frame content that the application is capable of generating. ACS Calling SDK will dynamically select the VideoStreamFormat best matching with network conditions at runtime.
    /// </summary>
    public partial class VideoStreamFormat : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoStreamFormat(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_addref(this.handle);
        }

        /// <summary>
        /// Default constructor
        /// </summary>
        public VideoStreamFormat()
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_create(out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~VideoStreamFormat()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// Total width-wise count of pixels of the video frame. It must be greater or equal to 240 and less or equal to 1920. Values greater than 1280 and aspect ratios other than 16:9 or 4:3 might be adjusted by the SDK consuming extra resources.
        /// </summary>
        public int Width
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_width(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_width(this.handle, value));
            }
        }

        /// <summary>
        /// Total height-wise count of pixels of the video frame. It must be greater or equal to 180 and less or equal to 1080. Values greater than 720 and aspect ratios other than 16:9 or 4:3 might be adjusted by the SDK consuming extra resources.
        /// </summary>
        public int Height
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_height(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_height(this.handle, value));
            }
        }

        /// <summary>
        /// Width and height to be used from a known video resolution standard
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamResolution Resolution
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamResolution result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_resolution(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_resolution(this.handle, value));
            }
        }

        /// <summary>
        /// Informs how the content of the video frame is encoded.
        /// </summary>
        public Azure.Communication.Calling.UnityClient.VideoStreamPixelFormat PixelFormat
        {
            get
            {
                Azure.Communication.Calling.UnityClient.VideoStreamPixelFormat result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_pixel_format(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_pixel_format(this.handle, value));
            }
        }

        /// <summary>
        /// Informs how many frames per second the virtual video device will be sending to remote participants. It must be greater or equal to 1 and lower or equal to 30. The following values are preferable 7.5, 15 or 30.
        /// </summary>
        public float FramesPerSecond
        {
            get
            {
                float result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_frames_per_second(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_frames_per_second(this.handle, value));
            }
        }

        /// <summary>
        /// Informs the stride in bytes for the first plane of the video frame content when RawVideoFrameKind is VideoSoftware. It must be greater or equal to the count of bytes required for the first plane of the selected VideoStreamPixelFormat.
        /// </summary>
        public int Stride1
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_stride1(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_stride1(this.handle, value));
            }
        }

        /// <summary>
        /// For VideoFormats with more than one plane, informs the stride in bytes for the second plane of the video frame content when RawVideoFrameKind is VideoSoftware. It must be greater or equal to the count of bytes required for the second plane of the selected VideoStreamPixelFormat.
        /// </summary>
        public int Stride2
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_stride2(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_stride2(this.handle, value));
            }
        }

        /// <summary>
        /// For VideoFormats with more than two planes, informs the stride in bytes for the third plane of the video frame content when RawVideoFrameKind is VideoSoftware. It must be greater or equal to the count of bytes required for the third plane of the selected VideoStreamPixelFormat.
        /// </summary>
        public int Stride3
        {
            get
            {
                int result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_get_stride3(this.handle, out result));
                return result;
            }
            set
            {
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_format_set_stride3(this.handle, value));
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoStreamFormat GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoStreamFormat result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoStreamFormat>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoStreamFormat(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Contains Information about the CallVideoStream which the state has changed
    /// </summary>
    public partial class VideoStreamStateChangedEventArgs : System.EventArgs, ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VideoStreamStateChangedEventArgs(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_addref(this.handle);
        }

        /// <summary>
        /// Default destructor
        /// </summary>
        ~VideoStreamStateChangedEventArgs()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        /// <summary>
        /// CallVideoStream which the state has changed
        /// </summary>
        public Azure.Communication.Calling.UnityClient.CallVideoStream Stream
        {
            get
            {
                IntPtr result_handle;
                Azure.Communication.Calling.UnityClient.CallVideoStream result_object;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_get_stream(this.handle, out result_handle));
                result_object = (result_handle != IntPtr.Zero) ? Factories.CallVideoStreamFactory(result_handle, transfer: true) : null;
                return result_object;
            }
        }

        /// <summary>
        /// Contains an important message about the functioning of the CallVideoStream.
        /// </summary>
        public string Message
        {
            get
            {
                string result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_video_stream_state_changed_event_args_get_message(this.handle, out result));
                return result;
            }
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VideoStreamStateChangedEventArgs(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    public partial class ViewLifecycleTelemetryEvent : ICachedObject, IReferenceCounted
    {
        internal IntPtr handle;

        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected ViewLifecycleTelemetryEvent(IntPtr ahandle, bool transfer)
        {
            this.handle = ahandle;
            if (!transfer)
            {
                Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_addref(ahandle);
            }
        }

        void IReferenceCounted.DecreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_release(this.handle);
        }

        void IReferenceCounted.IncreaseReferenceCount()
        {
            Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_addref(this.handle);
        }

        public ViewLifecycleTelemetryEvent(System.Guid viewId)
        {
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_create_guid_view_id(viewId, out this.handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, resultStatus);
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        ~ViewLifecycleTelemetryEvent()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_release(this.handle));
            this.handle = IntPtr.Zero;
        }

        public System.Guid ViewId
        {
            get
            {
                System.Guid result;
                Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_get_view_id(this.handle, out result));
                return result;
            }
        }

        public static Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent CreateForLocalStream(System.Guid viewId, Azure.Communication.Calling.UnityClient.LocalOutgoingVideoStream localStream)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_create_for_local_stream(viewId, localStream != null ? localStream.handle : IntPtr.Zero, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        public static Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent CreateForRemoteStream(System.Guid viewId, Azure.Communication.Calling.UnityClient.RemoteIncomingVideoStream remoteStream)
        {
            IntPtr result_handle;
            Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent result_object;
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_create_for_remote_stream(viewId, remoteStream != null ? remoteStream.handle : IntPtr.Zero, out result_handle));
            result_object = (result_handle != IntPtr.Zero) ? Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent.GetOrCreateInstance(result_handle, transfer: true) : null;
            return result_object;
        }

        public void SendCreateViewAttempt()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_create_view_attempt(this.handle));
        }

        public void SendCreateViewSuccess(int width, int height)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_create_view_success(this.handle, width, height));
        }

        public void SendCreateViewFailed(string reason)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_create_view_failed(this.handle, reason));
        }

        public void SendDisposeViewAttempt()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_dispose_view_attempt(this.handle));
        }

        public void SendDisposeViewSuccess()
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_dispose_view_success(this.handle));
        }

        public void SendDisposeViewFailed(string reason)
        {
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(this.handle, Azure.Communication.Calling.UnityClient.NativeLibrary.sam_view_lifecycle_telemetry_event_send_dispose_view_failed(this.handle, reason));
        }

        IntPtr ICachedObject.Cookie => ProjectedObjectHelpers.ConvertHandleToCookie(this.handle);

        internal static Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.ViewLifecycleTelemetryEvent(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

    /// <summary>
    /// Virtual stream information
    /// </summary>
    public partial class VirtualOutgoingVideoStream : Azure.Communication.Calling.UnityClient.RawOutgoingVideoStream, ICachedObject
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        protected VirtualOutgoingVideoStream(IntPtr ahandle, bool transfer)
            : base(ahandle, transfer)
        {
        }

        internal static IntPtr Create(Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions videoStreamOptions)
        {
            IntPtr handle;
            Azure.Communication.Calling.UnityClient.Status resultStatus = (Azure.Communication.Calling.UnityClient.NativeLibrary.sam_virtual_outgoing_video_stream_create_raw_outgoing_video_stream_options_video_stream_options(videoStreamOptions != null ? videoStreamOptions.handle : IntPtr.Zero, out handle));
            Azure.Communication.Calling.UnityClient.NativeLibraryHelpers.CheckStatus(handle, resultStatus);
            return handle;
        }
        /// <summary>
        /// Constructor used to create an instance of a stream that send's generated frames from external sources
        /// </summary>
        /// <param name="videoStreamOptions">
        /// Video options to be used on order to send the frames properly.
        /// </param>
        public VirtualOutgoingVideoStream(Azure.Communication.Calling.UnityClient.RawOutgoingVideoStreamOptions videoStreamOptions) : base(Create(videoStreamOptions), transfer: true)
        {
            Azure.Communication.Calling.UnityClient.ProjectedObjectCache.Add(this);
        }

        internal static Azure.Communication.Calling.UnityClient.VirtualOutgoingVideoStream GetOrCreateInstance(IntPtr cookie, bool transfer)
        {
            IntPtr handle = ProjectedObjectHelpers.ConvertCookieToHandle(cookie);
            bool created = false;
            Azure.Communication.Calling.UnityClient.VirtualOutgoingVideoStream result = Azure.Communication.Calling.UnityClient.ProjectedObjectCache.GetOrCreate<Azure.Communication.Calling.UnityClient.VirtualOutgoingVideoStream>(
                cookie,
                _ =>
                {
                    created = true;
                    return new Azure.Communication.Calling.UnityClient.VirtualOutgoingVideoStream(handle, transfer: transfer);
                }
            );
            if (!created && transfer)
            {
                ((IReferenceCounted)result).DecreaseReferenceCount();
            }
            return result;
        }
    }

}

#endif
